<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.baoshuo.ren</id>
    <title>宝硕博客 • Posts by &#34;折腾&#34; tag</title>
    <link href="https://blog.baoshuo.ren" />
    <updated>2021-07-15T09:57:25.000Z</updated>
    <category term="DN42" />
    <category term="网络" />
    <category term="题解" />
    <category term="洛谷" />
    <category term="Web" />
    <category term="CTF" />
    <category term="BIRD" />
    <category term="BGP" />
    <category term="Git" />
    <category term="折腾" />
    <category term="Linux" />
    <category term="笔记" />
    <category term="游记" />
    <category term="S2OJ" />
    <category term="macOS" />
    <category term="前端" />
    <category term="CloudFlare" />
    <category term="牛客网" />
    <entry>
        <id>https://blog.baoshuo.ren/post/vps-cloudflare-warp/</id>
        <title>使用 CloudFlare Warp 为单栈 VPS 添加双栈网络访问</title>
        <link rel="alternate" href="https://blog.baoshuo.ren/post/vps-cloudflare-warp/"/>
        <content type="html"><![CDATA[ <p><a href="https://blog.cloudflare.com/1111-warp-better-vpn/">Warp</a> 是 CloudFlare 提供的一项基于 WireGuard 的网络流量安全及加速服务，能够让你通过连接到 CloudFlare 的边缘节点实现隐私保护及链路优化。</p>
<a id="more"></a>
<p>由于 CloudFlare 官方的 <a href="https://developers.cloudflare.com/warp-client/setting-up/linux">Warp Client</a> 过于臃肿，导致我看到安装包大小后就决定直接放弃安装，于是我选择了 <a href="https://github.com/ViRb3/wgcf">ViRb3/wgcf</a> 替代。</p>
<p><img src="https://vip1.loli.io/2021/07/15/dHClLqSsvDKbrBc.png" alt="使用 apt 安装 cloudflare-warp 时的提示" loading="lazy" data-action="zoom"><span class="image-description">使用 apt 安装 cloudflare-warp 时的提示</span></p>
<h2 id="安装依赖">安装依赖</h2>
<p>可以前往 <a href="https://github.com/ViRb3/wgcf/releases/latest">Releases 页面</a> 下载编译好的二进制文件以供使用。</p>
<p>也可使用如下命令安装：</p>
<pre><code class="highlight bash">curl -Ls https://git.io/wgcf-installer.sh | bash</code></pre>
<p>安装好之后运行 <code>wgcf --help</code> ，得到类似下图的输出即为安装成功：</p>
<p><img src="https://vip1.loli.io/2021/07/15/lDaywAzQGd8HI9S.png" alt="" loading="lazy" data-action="zoom"></p>
<p>另外还需按照 <a href="https://www.wireguard.com/install/">WireGuard 官网</a> 上的说明安装 WireGuard 。</p>
<p>根据需求可能还需要安装 <code>resolvconf</code> 。</p>
<h2 id="生成-WireGuard-配置文件">生成 WireGuard 配置文件</h2>
<p>先使用 <code>wgcf register</code> 命令注册 Warp 。</p>
<p><img src="https://vip2.loli.io/2021/07/15/MYT5bkX4r2pGHUv.png" alt="使用键盘上的方向键选择 &quot;Yes&quot; 并回车确认" loading="lazy" data-action="zoom"><span class="image-description">使用键盘上的方向键选择 &quot;Yes&quot; 并回车确认</span></p>
<p>注册成功后的提示：</p>
<p><img src="https://vip2.loli.io/2021/07/15/y4homkVbqsr9PYj.png" alt="" loading="lazy" data-action="zoom"></p>
<p>之后使用 <code>wgcf generate</code> 命令生成配置文件。</p>
<p><img src="https://vip1.loli.io/2021/07/15/3zWUZYTdGhn9qkP.png" alt="" loading="lazy" data-action="zoom"></p>
<h2 id="修改-WireGuard-配置文件">修改 WireGuard 配置文件</h2>
<p>这是一份生成出来的配置文件：</p>
<pre><code class="highlight ini"><span class="section">[Interface]</span>
<span class="attr">PrivateKey</span> = ******
<span class="attr">Address</span> = <span class="number">172.16</span>.*.*/<span class="number">32</span>
<span class="attr">Address</span> = fd01:******/<span class="number">128</span>
<span class="attr">DNS</span> = <span class="number">1.1</span>.<span class="number">1.1</span>
<span class="attr">MTU</span> = <span class="number">1280</span>

<span class="section">[Peer]</span>
<span class="attr">PublicKey</span> = ******
<span class="attr">AllowedIPs</span> = <span class="number">0.0</span>.<span class="number">0.0</span>/<span class="number">0</span>
<span class="attr">AllowedIPs</span> = ::/<span class="number">0</span>
<span class="attr">Endpoint</span> = engage.cloudflareclient.com:<span class="number">2408</span></code></pre>
<ul>
<li>添加 IPv4 网络访问
<ol>
<li>删去 <code>[Interface]</code> 中的 <code>Address = fd01:******/128</code> ；</li>
<li>删去 <code>[Peer]</code> 中的 <code>AllowedIPs = ::/0</code> ；</li>
<li>将 Endpoint 的域名替换为解析出来的 IPv6 地址，如 <code>[2606:4700:d0::a29f:c001]:2408</code> 。</li>
</ol>
</li>
<li>添加 IPv6 网络访问
<ol>
<li>删去 <code>[Interface]</code> 中的 <code>Address = 172.16.*.*/32</code> ；</li>
<li>删去 <code>[Peer]</code> 中的 <code>AllowedIPs = 0.0.0.0/0</code> ；</li>
<li>将 Endpoint 的域名替换为解析出来的 IPv4 地址，如 <code>162.159.192.1:2408</code> 。</li>
</ol>
</li>
</ul>
<p>如果不需要使用 CloudFlare 的 DNS 服务可以删去 <code>DNS = 1.1.1.1</code> 这一行，使用的话需要安装 <code>resolvconf</code> 。</p>
<h2 id="启动-WireGuard-隧道">启动 WireGuard 隧道</h2>
<p>将刚才修改好的配置文件移动到 <code>/etc/wireguard/</code> 目录下，推荐命名为 <code>wgcf.conf</code> ，下面的操作以这个文件名为准。</p>
<p>使用 <code>systemd enable --now wg-quick@wgcf</code> 命令启动隧道，然后使用 <code>wg show wgcf</code> 命令查看隧道状态。</p>
<p>如果在启动时出现了错误，可以使用 <code>systemd status wg-quick@wgcf</code> 命令查看错误信息，修复后使用 <code>systemd start wg-quick@wgcf</code> 启动隧道。</p>
<p><img src="https://vip1.loli.io/2021/07/15/M9D1L2rFfHCPtcU.png" alt="一切正常" loading="lazy" data-action="zoom"><span class="image-description">一切正常</span></p>
<p>之后就可以享受双栈网络带来的便利了~</p>
<p>注：日常如果需要重启隧道可以使用 <code>systemctl restart wg-quick@wgcf</code> 命令。</p>
<h2 id="后记">后记</h2>
<p>折腾这些的原因是我从某个 Player IX 那里嫖的 VM 没有提供 IPv4 网络访问权限，这让我日常的维护工作麻烦了很多，于是我想到了 CloudFlare Warp 这个东西。CloudFlare Warp 提供的网络访问相较于 <a href="http://TunnelBroker.net">TunnelBroker.net</a> 、 <a href="http://TunnelBroker.ch">TunnelBroker.ch</a> 等一众隧道要好很多，延迟并不像其他隧道那样高。</p>
<p>在查找资料的过程中我也发现了很多博客里面所描述的内容有误或已经过时，所以综合其他文章的内容加上自己的实践，写下了这篇文章。</p>
<h2 id="参考资料">参考资料</h2>
<ol>
<li><a href="https://luotianyi.vc/5252.html">【WGCF】连接CF WARP为服务器添加IPv4/IPv6网络 - Luminous’ Home</a></li>
<li><a href="https://p3terx.com/archives/use-cloudflare-warp-to-add-extra-ipv4-or-ipv6-network-support-to-vps-servers-for-free.html">Cloudflare WARP 给 VPS 服务器额外添加 IPv4 或 IPv6 网络获得“原生”IP - P3TERX</a></li>
</ol>
 ]]></content>
        <summary><![CDATA[ Warp 是 CloudFlare 提供的一项基于 WireGuard 的网络流量安全及加速服务，能够让你通过连接到 CloudFlare 的边缘节点实现隐私保护及链路优化。 ]]></summary>
        <category term="折腾" />
        <category term="Linux" />
        <category term="CloudFlare" />
        <updated>2021-07-15T09:57:25.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.baoshuo.ren/post/hello-2021/</id>
        <title>你好，2021 | 博客迁移记录</title>
        <link rel="alternate" href="https://blog.baoshuo.ren/post/hello-2021/"/>
        <content type="html"><![CDATA[ <p>再见，2020。</p>
<a id="more"></a>
<p>最近总是觉得博客太慢了，于是乎，我把博客迁移到自己的服务器上面了。</p>
<h2 id="服务器端操作">服务器端操作</h2>
<h3 id="安装-nginx">安装 nginx</h3>
<p>apt 一把梭，省时又省力。</p>
<pre><code class="highlight shell">apt install nginx -y</code></pre>
<h3 id="配置-nginx">配置 nginx</h3>
<p>简简单单配置了一下，没有什么过于复杂的东西。</p>
<p>在申请 SSL 证书之前，不要写 HTTPS 的配置。</p>
<pre><code class="highlight nginx"><span class="section">server</span> &#123;
    <span class="attribute">listen</span>      <span class="number">80</span>;
    <span class="attribute">listen</span>      [::]:<span class="number">80</span>;
    <span class="attribute">server_name</span> blog.baoshuo.ren;

    <span class="comment"># ACME-challenge</span>
    <span class="attribute">location</span><span class="regexp"> ^~</span> /.well-known/acme-challenge/ &#123;
        <span class="attribute">allow</span> all;
        <span class="attribute">root</span> /var/www/_letsencrypt;
    &#125;

    <span class="attribute">location</span> / &#123;
        <span class="attribute">return</span> <span class="number">301</span> https://blog.baoshuo.ren$request_uri;
    &#125;
&#125;</code></pre>
<h3 id="申请-SSL-证书">申请 SSL 证书</h3>
<p>由于笔者懒得每年换证书，所以就用了 <a href="https://letsencrypt.org/">Let’s Encrypt</a> + <a href="https://acme.sh">acme.sh</a> 的组合套装来配置 SSL 。
当然，ECC 证书也是少不了的。</p>
<pre><code class="highlight bash">acme.sh --issue -d baoshuo.ren -d www.baoshuo.ren -d blog.baoshuo.ren \
    -w /var/www/_letsencrypt/ \
    --renew-hook <span class="string">&quot;acme.sh --install-cert -d baoshuo.ren \</span>
<span class="string">    --key-file /***/baoshuo.ren.key \</span>
<span class="string">    --fullchain-file /***/baoshuo.ren.cer \</span>
<span class="string">    --reloadcmd \&quot;service nginx force-reload\&quot;&quot;</span>
acme.sh --issue --keylength ec-256 \
    -d baoshuo.ren -d www.baoshuo.ren -d blog.baoshuo.ren \
    -w /var/www/_letsencrypt/ \
    --renew-hook <span class="string">&quot;acme.sh --install-cert -d baoshuo.ren --ecc \</span>
<span class="string">    --key-file /***/baoshuo.ren.ecc.key \</span>
<span class="string">    --fullchain-file /***/baoshuo.ren.ecc.cer \</span>
<span class="string">    --reloadcmd \&quot;service nginx force-reload\&quot;&quot;</span></code></pre>
<p>申请完成后，将 RSA 和 ECC 证书添加到 nginx 配置中，在配置文件中写入以下内容：</p>
<pre><code class="highlight nginx"><span class="section">server</span> &#123;
    <span class="attribute">listen</span>                               <span class="number">443</span> ssl http2;
    <span class="attribute">listen</span>                               [::]:<span class="number">443</span> ssl http2;
    <span class="attribute">server_name</span>                          blog.baoshuo.ren;
    <span class="attribute">root</span>                                 /var/www/blog/;

    <span class="comment"># SSL</span>
    <span class="attribute">ssl_certificate</span>                      /***/baoshuo.ren.cer;
    <span class="attribute">ssl_certificate_key</span>                  /***/baoshuo.ren.key;
    <span class="attribute">ssl_certificate</span>                      /***/baoshuo.ren.ecc.cer;
    <span class="attribute">ssl_certificate_key</span>                  /***/baoshuo.ren.ecc.key;
    <span class="attribute">ssl_protocols</span>                        TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;
    <span class="attribute">ssl_ciphers</span>                          ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">off</span>;

    <span class="comment"># HSTS</span>
    <span class="attribute">add_header</span> Strict-Transport-Security <span class="string">&#x27;max-age=31536000&#x27;</span>;

    <span class="comment"># logging</span>
    <span class="attribute">error_log</span>                            /var/log/nginx/blog.baoshuo.ren.<span class="literal">error</span>.log <span class="literal">warn</span>;

    <span class="comment"># 404 page</span>
    <span class="attribute">error_page</span>                           <span class="number">404</span> /<span class="number">404</span>.html;
&#125;</code></pre>
<p>上方使用的 SSL 配置是 Mozilla 推荐的现代化配置<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> ，如果需要更好的兼容性，可以使用 Mozilla 提供的中等安全性配置<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup> ：</p>
<pre><code class="highlight apache"><span class="attribute">ssl_protocols</span> TLSv<span class="number">1</span> TLSv<span class="number">1</span>.<span class="number">1</span> TLSv<span class="number">1</span>.<span class="number">2</span> TLSv<span class="number">1</span>.<span class="number">3</span>;
<span class="attribute">ssl_ciphers</span> ECDHE-ECDSA-AES<span class="number">128</span>-GCM-SHA<span class="number">256</span>:ECDHE-RSA-AES<span class="number">128</span>-GCM-SHA<span class="number">256</span>:ECDHE-ECDSA-AES<span class="number">256</span>-GCM-SHA<span class="number">384</span>:ECDHE-RSA-AES<span class="number">256</span>-GCM-SHA<span class="number">384</span>:ECDHE-ECDSA-CHACHA<span class="number">20</span>-POLY<span class="number">1305</span>:ECDHE-RSA-CHACHA<span class="number">20</span>-POLY<span class="number">1305</span>:DHE-RSA-AES<span class="number">128</span>-GCM-SHA<span class="number">256</span>:DHE-RSA-AES<span class="number">256</span>-GCM-SHA<span class="number">384</span>:DHE-RSA-CHACHA<span class="number">20</span>-POLY<span class="number">1305</span>:ECDHE-ECDSA-AES<span class="number">128</span>-SHA<span class="number">256</span>:ECDHE-RSA-AES<span class="number">128</span>-SHA<span class="number">256</span>:ECDHE-ECDSA-AES<span class="number">128</span>-SHA:ECDHE-RSA-AES<span class="number">128</span>-SHA:ECDHE-ECDSA-AES<span class="number">256</span>-SHA<span class="number">384</span>:ECDHE-RSA-AES<span class="number">256</span>-SHA<span class="number">384</span>:ECDHE-ECDSA-AES<span class="number">256</span>-SHA:ECDHE-RSA-AES<span class="number">256</span>-SHA:DHE-RSA-AES<span class="number">128</span>-SHA<span class="number">256</span>:DHE-RSA-AES<span class="number">256</span>-SHA<span class="number">256</span>:AES<span class="number">128</span>-GCM-SHA<span class="number">256</span>:AES<span class="number">256</span>-GCM-SHA<span class="number">384</span>:AES<span class="number">128</span>-SHA<span class="number">256</span>:AES<span class="number">256</span>-SHA<span class="number">256</span>:AES<span class="number">128</span>-SHA:AES<span class="number">256</span>-SHA:DES-CBC<span class="number">3</span>-SHA;
<span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</code></pre>
<h2 id="将博客文件同步到服务器上">将博客文件同步到服务器上</h2>
<p>在 <code>.github/workflows</code> 目录下创建一个 <code>server.yml</code> 文件，写入以下内容：</p>
<pre><code class="highlight yaml"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">blog</span> <span class="string">to</span> <span class="string">Server</span>

<span class="attr">on:</span>
  <span class="attr">push:</span>
    <span class="attr">branches:</span> [ <span class="string">master</span> ]
  <span class="attr">workflow_dispatch:</span>

<span class="attr">jobs:</span>
  <span class="attr">deploy:</span>
    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span>
    <span class="attr">steps:</span>
      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span>
        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span>
      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span>
        <span class="attr">uses:</span> <span class="string">easingthemes/ssh-deploy@v2.1.5</span>
        <span class="attr">env:</span>
          <span class="attr">SSH_PRIVATE_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SSH_PRIVATE_KEY</span> <span class="string">&#125;&#125;</span>
          <span class="attr">ARGS:</span> <span class="string">&quot;-avz --delete  --exclude &#x27;.git/*&#x27; --exclude &#x27;.github/*&#x27; --exclude &#x27;.gitlab-ci.yml&#x27; --exclude &#x27;.nojekyll&#x27;&quot;</span>
          <span class="attr">REMOTE_HOST:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.REMOTE_HOST</span> <span class="string">&#125;&#125;</span>
          <span class="attr">REMOTE_USER:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.REMOTE_USER</span> <span class="string">&#125;&#125;</span>
          <span class="attr">TARGET:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.TARGET</span> <span class="string">&#125;&#125;</span></code></pre>
<p>之后在 <code>https://github.com/&#123;username&#125;/&#123;repo&#125;/settings/secrets/actions</code> 中添加四个 Secrets 。</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>REMOTE_HOST</td>
<td>服务器 IP 地址</td>
</tr>
<tr>
<td>REMOTE_USER</td>
<td>服务器用户名</td>
</tr>
<tr>
<td>SSH_PRIVATE_KEY</td>
<td>连接到服务器的 SSH 私钥</td>
</tr>
<tr>
<td>TARGET</td>
<td>存放文件的路径</td>
</tr>
</tbody>
</table>
<p>将博客文件 push 到仓库中，就能在服务器上查看到文件了。</p>
<h2 id="参考资料">参考资料</h2>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a href="https://ssl-config.mozilla.org/#server=nginx&amp;version=1.18.0&amp;config=modern&amp;openssl=1.1.1f&amp;ocsp=false&amp;guideline=5.6">nginx 1.18.0, modern config, OpenSSL 1.1.1f - Mozilla SSL Configuration Generator</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p><a href="https://ssl-config.mozilla.org/#server=nginx&amp;version=1.18.0&amp;config=intermediate&amp;openssl=1.1.1f&amp;ocsp=false&amp;guideline=5.6">nginx 1.18.0, intermediate config, OpenSSL 1.1.1f - Mozilla SSL Configuration Generator</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
 ]]></content>
        <summary><![CDATA[ 再见，2020。 ]]></summary>
        <category term="折腾" />
        <updated>2020-12-31T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.baoshuo.ren/post/raspberry-pi-rtmp-live/</id>
        <title>使用树莓派+nginx搭建 rtmp 直播服务</title>
        <link rel="alternate" href="https://blog.baoshuo.ren/post/raspberry-pi-rtmp-live/"/>
        <content type="html"><![CDATA[ <p>国庆在家闲着没啥事，把一直在角落里吃灰的树莓派 4B 拿出来捣鼓了几下。</p>
<a id="more"></a>
<p>使用 nginx 模块：<a href="https://github.com/arut/nginx-rtmp-module"><code>nginx-rtmp-module</code></a></p>
<h2 id="安装-nginx-nginx-rtmp-module">安装 nginx &amp; nginx-rtmp-module</h2>
<p>apt, yes!</p>
<pre><code class="highlight bash">apt update
apt upgrade -y
apt install nginx libnginx-mod-rtmp -y</code></pre>
<p>访问服务器 IP ，出现如下图所示网页即代表安装成功。</p>
<p><img src="https://vip1.loli.io/2020/11/26/BdKOhDuxIaYks6q.png" alt="" loading="lazy" data-action="zoom"></p>
<h2 id="修改-nginx-配置">修改 nginx 配置</h2>
<p>打开 <code>/etc/nginx/nginx.conf</code> ，在末尾处插入下面的配置</p>
<pre><code class="highlight nginx"><span class="section">rtmp</span> &#123;
    <span class="section">server</span> &#123;
        <span class="attribute">listen</span>     <span class="number">1935</span>;              <span class="comment"># 服务端口</span>
        <span class="attribute">chunk_size</span> <span class="number">4096</span>;              <span class="comment"># 数据传输块的大小</span>

        <span class="attribute">application</span> vod &#123;
            <span class="attribute">play</span> /opt/video;          <span class="comment"># 视频文件存放位置。</span>
        &#125;

        <span class="attribute">application</span> rtmplive &#123;
            <span class="attribute">live</span>            <span class="literal">on</span>;        <span class="comment"># 开启直播</span>
            <span class="attribute">max_connections</span> <span class="number">64</span>;        <span class="comment"># 为 rtmp 引擎设置最大连接数。默认为 off</span>
        &#125;

        <span class="attribute">application</span> live &#123;
            <span class="attribute">live</span>                <span class="literal">on</span>;              <span class="comment"># 开启直播</span>
            <span class="attribute">hls</span>                 <span class="literal">on</span>;              <span class="comment"># 这个参数把直播服务器改造成实时回放服务器。</span>
            <span class="attribute">wait_key</span>            <span class="literal">on</span>;              <span class="comment"># 对视频切片进行保护，这样就不会产生马赛克了。</span>
            <span class="attribute">hls_path</span>            /opt/video/hls;  <span class="comment"># 切片视频文件存放位置。</span>
            <span class="attribute">hls_fragment</span>        <span class="number">10s</span>;             <span class="comment"># 设置HLS片段长度。</span>
            <span class="attribute">hls_max_fragment</span>    <span class="number">10s</span>;             <span class="comment"># 设置HLS片段最大长度。</span>
            <span class="attribute">hls_playlist_length</span> <span class="number">30s</span>;             <span class="comment"># 设置HLS播放列表长度。</span>
            <span class="attribute">hls_continuous</span>      <span class="literal">on</span>;              <span class="comment"># 连续模式。</span>
            <span class="attribute">hls_cleanup</span>         <span class="literal">on</span>;              <span class="comment"># 对多余的切片进行删除。</span>
            <span class="attribute">hls_nested</span>          <span class="literal">on</span>;              <span class="comment"># 嵌套模式。</span>
        &#125;
    &#125;
&#125;</code></pre>
<p>打开默认站点配置文件 <code>/etc/nginx/sites-available/default</code> ，在 <code>server</code> 部分的末尾添加以下内容</p>
<pre><code class="highlight nginx"><span class="attribute">location</span> /live &#123;
    <span class="section">types</span> &#123;
        application/vnd.apple.mpegurl m3u8;
        video/mp2t                    ts;
    &#125;

    <span class="attribute">autoindex</span> <span class="literal">on</span>;
    <span class="attribute">alias</span>     /opt/video/hls;

    <span class="attribute">expires</span> -<span class="number">1</span>;

    <span class="attribute">add_header</span> <span class="string">&#x27;Cache-Control&#x27;</span>                    <span class="string">&#x27;no-cache&#x27;</span>;
    <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>      <span class="string">&#x27;*&#x27;</span>;
    <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="string">&#x27;true&#x27;</span>;
    <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>     <span class="string">&#x27;GET, POST, OPTIONS&#x27;</span>;
    <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>     <span class="string">&#x27;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&#x27;</span>;
&#125;
<span class="attribute">location</span> /stat &#123;
    <span class="attribute">rtmp_stat</span> all;
    <span class="comment"># rtmp_stat_stylesheet stat.xsl;</span>
&#125;</code></pre>
<p>插入完以后配置文件会变成下面的样子</p>
<pre><code class="highlight diff"><span class="comment">--- /etc/nginx/sites-available/default</span>
<span class="comment">+++ /etc/nginx/sites-available/default</span>
<span class="meta">@@ -1,14 +1,36 @@</span>
 server &#123;
     listen 80 default_server;
     listen [::]:80 default_server;

     root /var/www/html;

     index index.html index.htm index.nginx-debian.html;

     server_name _;

     location / &#123;
         try_files $uri $uri/ =404;
     &#125;
<span class="addition">+</span>
<span class="addition">+    location /live &#123;</span>
<span class="addition">+        types &#123;</span>
<span class="addition">+            application/vnd.apple.mpegurl m3u8;</span>
<span class="addition">+            video/mp2t                    ts;</span>
<span class="addition">+        &#125;</span>
<span class="addition">+</span>
<span class="addition">+        autoindex on;</span>
<span class="addition">+        alias     /opt/video/hls;</span>
<span class="addition">+</span>
<span class="addition">+        expires -1;</span>
<span class="addition">+</span>
<span class="addition">+        add_header &#x27;Cache-Control&#x27;                    &#x27;no-cache&#x27;;</span>
<span class="addition">+        add_header &#x27;Access-Control-Allow-Origin&#x27;      &#x27;*&#x27;;</span>
<span class="addition">+        add_header &#x27;Access-Control-Allow-Credentials&#x27; &#x27;true&#x27;;</span>
<span class="addition">+        add_header &#x27;Access-Control-Allow-Methods&#x27;     &#x27;GET, POST, OPTIONS&#x27;;</span>
<span class="addition">+        add_header &#x27;Access-Control-Allow-Headers&#x27;     &#x27;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&#x27;;</span>
<span class="addition">+    &#125;</span>
<span class="addition">+    location /stat &#123;</span>
<span class="addition">+        rtmp_stat all;</span>
<span class="addition">+        # rtmp_stat_stylesheet stat.xsl;</span>
<span class="addition">+    &#125;</span>
 &#125;</code></pre>
<p>修改完成后使用 <code>nginx -t</code> 测试配置文件是否正确</p>
<pre><code class="highlight vim">nginx: the configuration <span class="keyword">file</span> /etc/nginx/nginx.<span class="keyword">conf</span> <span class="keyword">syntax</span> <span class="keyword">is</span> ok
nginx: configuration <span class="keyword">file</span> /etc/nginx/nginx.<span class="keyword">conf</span> test <span class="keyword">is</span> successful</code></pre>
<p>当出现成功提示时，使用 <code>nginx -s reload</code> 平滑重启 nginx。</p>
<p>重启成功后使用 <code>netstat -lnp</code> 查看 <code>tcp/1935</code> 端口是否开启。</p>
<p><img src="https://vip1.loli.io/2020/11/26/Xy3Nq5WZaogLIvR.png" alt="" loading="lazy" data-action="zoom"></p>
<h2 id="使用-OBS-连接直播服务器">使用 OBS 连接直播服务器</h2>
<p>打开 OBS ，在 设置 -&gt; 推流 中配置以下内容</p>
<table>
<thead>
<tr>
<th>项目</th>
<th>值</th>
</tr>
</thead>
<tbody>
<tr>
<td>服务</td>
<td><code>自定义...</code></td>
</tr>
<tr>
<td>服务器</td>
<td><code>rtmp://$&#123;ip&#125;/live</code></td>
</tr>
<tr>
<td>串流密钥</td>
<td><code>$&#123;key&#125;</code></td>
</tr>
</tbody>
</table>
<p>其中，<code>$&#123;ip&#125;</code> 和 <code>$&#123;key&#125;</code> 设置为你需要的值即可。</p>
<p>回到主界面，点击 <strong>开始推流</strong> 进行推流。</p>
<h2 id="使用客户端拉取直播流">使用客户端拉取直播流</h2>
<p><img src="https://vip2.loli.io/2020/11/26/jpqVTAgXSW6oyEP.png" alt="" loading="lazy" data-action="zoom"></p>
<p>在 <code>PotPlayer</code> <code>QQ影音</code> 等播放器中选择 <code>打开-&gt;打开URL</code> 。</p>
<p><img src="https://vip1.loli.io/2020/11/26/rzBNukVTntf5xUR.png" alt="" loading="lazy" data-action="zoom"></p>
<p>输入 <code>http://$&#123;ip&#125;/live/$&#123;key&#125;/index.m3u8</code> ，点击确定。</p>
<p><img src="https://vip1.loli.io/2020/11/26/crbEBQNC3qH8uOl.jpg" alt="" loading="lazy" data-action="zoom"></p>
<p>此时可以就看到直播画面了。</p>
<h2 id="网页端播放">网页端播放</h2>
<p>页面中只有一个播放器，其他功能请自行实现。</p>
<pre><code class="highlight xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span>

<span class="tag">&lt;<span class="name">head</span>&gt;</span>
    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Live Player<span class="tag">&lt;/<span class="name">title</span>&gt;</span>
    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span>
<span class="tag">&lt;/<span class="name">head</span>&gt;</span>

<span class="tag">&lt;<span class="name">body</span>&gt;</span>
    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;dplayer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>
    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/hls.js@0.14.13/dist/hls.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>
    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/dplayer@1.26.0/dist/DPlayer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>
    <span class="tag">&lt;<span class="name">script</span>&gt;</span>
<span class="javascript">        <span class="keyword">const</span> dp = <span class="keyword">new</span> DPlayer(&#123;</span>
<span class="javascript">            container: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;dplayer&#x27;</span>),</span>
<span class="javascript">            live: <span class="literal">true</span>,</span>
            video: &#123;
<span class="javascript">                url: <span class="string">&#x27;http://$&#123;ip&#125;/live/$&#123;key&#125;/index.m3u8&#x27;</span>,</span>
<span class="javascript">                type: <span class="string">&#x27;hls&#x27;</span>,</span>
            &#125;,
        &#125;);
    <span class="tag">&lt;/<span class="name">script</span>&gt;</span>
<span class="tag">&lt;/<span class="name">body</span>&gt;</span>

<span class="tag">&lt;/<span class="name">html</span>&gt;</span></code></pre>
<p><img src="https://vip1.loli.io/2020/11/26/9X6mUtF4fLzdaYn.jpg" alt="" loading="lazy" data-action="zoom"></p>
<h2 id="后记">后记</h2>
<p>如果没有在外直播的需求，不要将 rtmp 端口映射至公网，这可能会带来一些不必要的麻烦。</p>
<h2 id="参考资料">参考资料</h2>
 ]]></content>
        <summary><![CDATA[ 国庆在家闲着没啥事，把一直在角落里吃灰的树莓派 4B 拿出来捣鼓了几下。 ]]></summary>
        <category term="折腾" />
        <updated>2020-10-05T13:35:32.000Z</updated>
    </entry>
</feed>