{
    "version": "https://jsonfeed.org/version/1",
    "title": "宝硕博客 • All posts by \"dn42\" tag",
    "description": "宝硕博客 —— Baoshuo (@renbaoshuo) 随便写东西的地方，以技术向博文为主，生活向博文为辅。",
    "home_page_url": "https://blog.baoshuo.ren",
    "items": [
        {
            "id": "https://blog.baoshuo.ren/post/bird-looking-glass/",
            "url": "https://blog.baoshuo.ren/post/bird-looking-glass/",
            "title": "搭建 BIRD Looking Glass 速成指北",
            "date_published": "2021-05-03T04:23:00.000Z",
            "content_html": "<p>BIRD 是 Linux 上常用的一款 BGP 路由软件。bird-lg-go 是 <a href=\"https://lantian.pub\">蓝天</a> 使用 Go 语言编写的 Looking Glass 程序，内存占用比原版 bird-lg 更低。它提供了一个网页面板，可以显示各个服务器上的 BIRD 路由软件的状态，以及查询到指定 IP 的路由。</p>\n<a id=\"more\"></a>\n<ul>\n<li>项目地址：<a href=\"https://github.com/xddxdd/bird-lg-go\">https://github.com/xddxdd/bird-lg-go</a></li>\n<li>成品： <a href=\"https://lg.dn42.as141776.net\">https://lg.dn42.as141776.net</a></li>\n</ul>\n<h2 id=\"安装-Docker-和-Docker-Compose\">安装 Docker 和 Docker Compose</h2>\n<p>虽然这个程序可以直接运行，但我还是比较喜欢套个 Docker 防止污染环境。</p>\n<pre><code class=\"highlight bash\">curl -sSL https://get.docker.com | sh\npip install docker-compose</code></pre>\n<h2 id=\"编排-Docker-Compose-服务\">编排 Docker Compose 服务</h2>\n<p>在运行 web 的服务器上找个地方（如 <code>/var/bird-lg/</code>），将下面的内容修改后写入 <code>docker-compose.yml</code> 中：</p>\n<pre><code class=\"highlight yml\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span>\n\n<span class=\"attr\">services:</span>\n  <span class=\"attr\">bird-lg:</span>\n    <span class=\"attr\">image:</span> <span class=\"string\">xddxdd/bird-lg-go</span>\n    <span class=\"attr\">container_name:</span> <span class=\"string\">bird-lg</span>\n    <span class=\"attr\">restart:</span> <span class=\"string\">always</span>\n    <span class=\"attr\">environment:</span>\n      <span class=\"bullet\">-</span> <span class=\"string\">BIRDLG_SERVERS=cn1,eu1</span>              <span class=\"comment\"># 节点列表，以逗号分隔</span>\n      <span class=\"bullet\">-</span> <span class=\"string\">BIRDLG_DOMAIN=dn42.as141776.net</span>     <span class=\"comment\"># 节点 endpiont 后缀</span>\n      <span class=\"bullet\">-</span> <span class=\"string\">BIRDLG_TITLE_BRAND=Looking</span> <span class=\"string\">Glass</span>    <span class=\"comment\"># 标签栏上显示的名称</span>\n      <span class=\"bullet\">-</span> <span class=\"string\">BIRDLG_NAVBAR_BRAND=Looking</span> <span class=\"string\">Glass</span>   <span class=\"comment\"># 页面上显示的名称</span>\n      <span class=\"bullet\">-</span> <span class=\"string\">BIRDLG_WHOIS=whois.lantian.dn42</span>     <span class=\"comment\"># Whois 服务器地址</span>\n      <span class=\"bullet\">-</span> <span class=\"string\">BIRDLG_DNS_INTERFACE=asn.dn42</span>\n    <span class=\"attr\">ports:</span>\n      <span class=\"bullet\">-</span> <span class=\"string\">&quot;5000:5000&quot;</span>\n  <span class=\"attr\">bird-lgproxy:</span>\n    <span class=\"attr\">image:</span> <span class=\"string\">xddxdd/bird-lgproxy-go</span>\n    <span class=\"attr\">container_name:</span> <span class=\"string\">bird-lgproxy</span>\n    <span class=\"attr\">restart:</span> <span class=\"string\">always</span>\n    <span class=\"attr\">volumes:</span>\n      <span class=\"bullet\">-</span> <span class=\"string\">&quot;/var/run/bird/bird.ctl:/var/run/bird/bird.ctl&quot;</span>\n    <span class=\"attr\">ports:</span>\n      <span class=\"bullet\">-</span> <span class=\"string\">&quot;8000:8000&quot;</span></code></pre>\n<p>在各个节点上只需要写入下面内容即可：</p>\n<pre><code class=\"highlight yml\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span>\n\n<span class=\"attr\">services:</span>\n  <span class=\"attr\">bird-lgproxy:</span>\n    <span class=\"attr\">image:</span> <span class=\"string\">xddxdd/bird-lgproxy-go</span>\n    <span class=\"attr\">container_name:</span> <span class=\"string\">bird-lgproxy</span>\n    <span class=\"attr\">restart:</span> <span class=\"string\">always</span>\n    <span class=\"attr\">volumes:</span>\n      <span class=\"bullet\">-</span> <span class=\"string\">&quot;/var/run/bird/bird.ctl:/var/run/bird/bird.ctl&quot;</span>\n    <span class=\"attr\">ports:</span>\n      <span class=\"bullet\">-</span> <span class=\"string\">&quot;8000:8000&quot;</span></code></pre>\n<p>之后启动 Docker 容器：</p>\n<pre><code class=\"highlight bash\">docker-compose up -d</code></pre>\n<h2 id=\"使用-nginx-反代页面\">使用 nginx 反代页面</h2>\n<p>使用下方的配置启动反向代理即可。</p>\n<pre><code class=\"highlight nginx\"><span class=\"section\">server</span> &#123;\n    <span class=\"attribute\">listen</span>      *:<span class=\"number\">80</span>;\n    <span class=\"attribute\">listen</span>      [::]:<span class=\"number\">80</span>;\n    <span class=\"attribute\">server_name</span> lg.dn42.as141776.net;\n\n    <span class=\"comment\"># reverse proxy</span>\n    <span class=\"attribute\">location</span> / &#123;\n        <span class=\"attribute\">proxy_pass</span>                         http://127.0.0.1:5000;\n        <span class=\"attribute\">proxy_http_version</span>                 <span class=\"number\">1</span>.<span class=\"number\">1</span>;\n        <span class=\"attribute\">proxy_cache_bypass</span>                 $http_upgrade;\n\n        <span class=\"comment\"># Proxy headers</span>\n        <span class=\"attribute\">proxy_set_header</span> Upgrade           $http_upgrade;\n        <span class=\"attribute\">proxy_set_header</span> Host              $host;\n        <span class=\"attribute\">proxy_set_header</span> X-Real-IP         $remote_addr;\n        <span class=\"attribute\">proxy_set_header</span> X-Forwarded-For   $proxy_add_x_forwarded_for;\n        <span class=\"attribute\">proxy_set_header</span> X-Forwarded-Proto $scheme;\n        <span class=\"attribute\">proxy_set_header</span> X-Forwarded-Host  $host;\n        <span class=\"attribute\">proxy_set_header</span> X-Forwarded-Port  $server_port;\n\n        <span class=\"comment\"># Proxy timeouts</span>\n        <span class=\"attribute\">proxy_connect_timeout</span>              <span class=\"number\">60s</span>;\n        <span class=\"attribute\">proxy_send_timeout</span>                 <span class=\"number\">60s</span>;\n        <span class=\"attribute\">proxy_read_timeout</span>                 <span class=\"number\">60s</span>;\n    &#125;\n&#125;</code></pre>\n<h2 id=\"配置-DNS-解析\">配置 DNS 解析</h2>\n<p>bird-lg-go 的节点 endpiont 生成逻辑是 <code>http://[节点].[endpoint后缀]:8000</code> ，如 <code>http://eu1.dn42.as141776.net:8000</code> ，所以只需要去配置对应的解析。</p>\n<blockquote>\n<p><strong>警告</strong></p>\n<p>建议解析到节点的公网 IP 上，以免 DN42 炸掉时 Looking Glass 也一并炸掉。</p>\n</blockquote>\n<p>配置示例：</p>\n<pre><code class=\"highlight css\"><span class=\"selector-tag\">eu1</span><span class=\"selector-class\">.dn42</span><span class=\"selector-class\">.as141776</span><span class=\"selector-class\">.net</span>.  3600    <span class=\"selector-tag\">IN</span>      <span class=\"selector-tag\">A</span>       136.243.221.96\n<span class=\"selector-tag\">cn1</span><span class=\"selector-class\">.dn42</span><span class=\"selector-class\">.as141776</span><span class=\"selector-class\">.net</span>.  3600    <span class=\"selector-tag\">IN</span>      <span class=\"selector-tag\">CNAME</span>   <span class=\"selector-tag\">home</span><span class=\"selector-class\">.baoshuo</span><span class=\"selector-class\">.ren</span>.</code></pre>\n<h2 id=\"成果\">成果</h2>\n<p><img src=\"https://vip2.loli.io/2021/05/03/iaFfTWAhpdZGJ9t.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n",
            "tags": [
                "BIRD",
                "BGP",
                "DN42"
            ]
        },
        {
            "id": "https://blog.baoshuo.ren/post/dn42-network/",
            "url": "https://blog.baoshuo.ren/post/dn42-network/",
            "title": "初探 DN42 网络",
            "date_published": "2021-04-04T03:29:32.000Z",
            "content_html": "<p>DN42 全称 Decentralized Network 42（42 号去中心网络），是一个大型、去中心化的 BGP 网络。DN42 的目的是模拟一个互联网。它使用了大量在目前互联网骨干上应用的技术（例如 BGP 和递归 DNS），可以很好地模拟一个真实的网络环境。</p>\n<a id=\"more\"></a>\n<p>DN42 适合以下类别的用户：</p>\n<ul>\n<li>想要研究网络技术，练习服务器、路由器等网络设备配置，甚至后续在真实互联网建立 AS 的用户</li>\n<li>拥有真实 AS，但担心自己<a href=\"https://blog.cloudflare.com/how-verizon-and-a-bgp-optimizer-knocked-large-parts-of-the-internet-offline-today/\">配置错误广播出错误路由、干掉半个互联网</a>，希望有个地方测试的用户（比如我）</li>\n</ul>\n<p>DN42 不适合以下类别的用户：</p>\n<ul>\n<li>单纯想要保护隐私、规避网络审查的用户</li>\n<li>在网内消耗大量流量，例如用于解锁流媒体服务的用户</li>\n</ul>\n<p>所以，DN42 的使用门槛还是比较高的。这与在真实互联网中一样，你要扮演一个 ISP（互联网服务提供商），注册自己的个人信息，ASN 号码，IPv4 和 IPv6 的地址池，并且使用 BGP 在自己的服务器上广播它们。你还要和其它的用户联系，和他们做 Peering（对等互联），一步步进入完整的 DN42 网络。</p>\n<p>DN42 在 <code>172.20.0.0/14</code> 和 <code>fd00::/8</code> 上运行，而这两个 IP 段都是分配给内网使用的。换句话说，你在 DN42 上怎么折腾，都不会影响到服务器其它的互联网连接。</p>\n<p>你可以通过加入这个 <a href=\"https://t.me/Dn42Chat\">非官方 Telegram 群组</a> 或者 <a href=\"irc://irc.hackint.org/#dn42\">IRC 频道</a> 来寻求帮助。</p>\n<p>注意：DN42 是一个<strong>测试网络</strong>，所有人都在帮助所有人。即使你不小心搞砸了，也没有人会指责你。</p>\n<h2 id=\"注册-DN42\">注册 DN42</h2>\n<p>在注册过程中会大量使用到一些 UNIX 工具（如 Git、GnuPG 等），所以最好使用 Linux 或者 macOS 系统完成整个流程，如果你正在使用 Windows 系统，那么可以使用 <a href=\"http://aka.ms/wsl\">WSL</a> 。</p>\n<p>首先在 <a href=\"https://git.dn42.dev/\">DN42 Git</a> 中注册一个账户，并将 <a href=\"https://git.dn42.dev/dn42/registry\">dn42/registry</a> 这个仓库 clone 到本地。</p>\n<p>新建一个名为 <code>[用户名]-[日期, YYYYMMDD]/[自定义名称]</code> 的分支。</p>\n<pre><code class=\"highlight bash\">git checkout -b renbaoshuo-20210403/register\ngit push --set-upstream origin renbaoshuo-20210403/register</code></pre>\n<p>在仓库内新建以下文件：</p>\n<ul>\n<li><code>data/mntner/[昵称]-MNT</code>\n<ul>\n<li><code>mntner</code> ：Maintainer（维护者），这个账户的名称，与文件名相同。</li>\n<li><code>admin-c</code> ：Admin Contact（管理员联系信息），需要指向后续创建的 person 文件，一般为 <code>[昵称]-DN42</code> 。</li>\n<li><code>tech-c</code> ：Tech Contact（技术员联系信息），需要指向后续创建的 person 文件，一般为 <code>[昵称]-DN42</code> 。</li>\n<li><code>mnt-by</code> ：Maintain by（由谁维护），指向这个账户本身。</li>\n<li><code>source</code> ：固定为 <code>DN42</code>。</li>\n<li><code>auth</code> ：身份验证信息，接受 <strong>SSH 公钥</strong> 和 <strong>GPG 公钥</strong>\n<ul>\n<li>你<strong>必须</strong>选择这两种验证方式中的至少一种，可以前往 <a href=\"https://dn42.dev/howto/Registry-Authentication\">官方 Wiki 中的身份认证页面</a> 了解更多信息。</li>\n</ul>\n</li>\n<li><code>remarks</code> ：备注信息，可以不填。</li>\n</ul>\n</li>\n<li><code>data/person/[昵称]-DN42</code>\n<ul>\n<li><code>person</code> ：昵称。</li>\n<li><code>contact</code> ：你的联系方式，一般是你的邮箱。</li>\n<li><code>nic-hdl</code> ：NIC handle，指向文件本身，与文件名相同。</li>\n<li><code>mnt-by</code> ：Maintain by（由谁维护），由谁维护，指向你的 mntner 文件，<code>[昵称]-MNT</code>。</li>\n<li><code>source</code> ：固定为 <code>DN42</code>。</li>\n</ul>\n</li>\n<li><code>data/aut-num/[ASN]</code>\n<ul>\n<li><code>aut-num</code> ：AS 号。\n<ul>\n<li>在国际互联网上，ASN 范围 4200000000 - 4294967294 是被保留作私下使用（private use）的，DN42 占用的就是其中的一块：4242420000 - 4242423999。只需要在这个区间内挑选一个你喜欢的、没有被他人占用的号码即可。</li>\n<li>如果你有自己的公网 ASN 的话，也可以直接在 DN42 中使用。</li>\n</ul>\n</li>\n<li><code>as-name</code> ：AS 的名称，一般只在 DN42 的一些网络结构示意图中看到。可以设置为 <code>[昵称]-AS</code> 。</li>\n<li><code>descr</code> ：AS 简介，一般只在结构图中看到，随意填写。</li>\n<li><code>admin-c</code> ：Admin Contact（管理员联系信息），指向你的 person 文件，<code>[昵称]-DN42</code> 。</li>\n<li><code>tech-c</code> ：Tech Contact（技术员联系信息），指向你的 person 文件，<code>[昵称]-DN42</code> 。</li>\n<li><code>mnt-by</code> ：Maintain by（由谁维护），由谁维护，指向你的 mntner 文件，<code>[昵称]-MNT</code> 。</li>\n<li><code>source</code> ：固定为 <code>DN42</code> 。</li>\n</ul>\n</li>\n<li><code>data/inetnum/[IPv4 Block]</code>\n<ul>\n<li><code>inetnum</code> ：这个地址块的范围。</li>\n<li><code>cidr</code> ：这个地址块的范围，与 <code>inetnum</code> 相同，只是以 CIDR 方式表示。</li>\n<li><code>netname</code> ：这个地址块的名称。可以设置为 <code>[昵称]-IPV4</code> 。</li>\n<li><code>descr</code> ：简介，随意填写。</li>\n<li><code>country</code> ：你的国家代号，填 CN 代表中国大陆。</li>\n<li><code>admin-c</code> ：Admin Contact（管理员联系信息），指向你的 person 文件，<code>[昵称]-DN42</code>。</li>\n<li><code>tech-c</code> ：Tech Contact（技术员联系信息），指向你的 person 文件，<code>[昵称]-DN42</code>。</li>\n<li><code>mnt-by</code> ：Maintain by（由谁维护），由谁维护，指向你的 mntner 文件，<code>[昵称]-MNT</code>。</li>\n<li><code>nserver</code> ：IP 地址反向解析的 DNS 服务器。如果你不知道/不需要反向DNS，可以去掉。</li>\n<li><code>status</code> ：固定为 <code>ASSIGNED</code>。</li>\n<li><code>source</code> ：固定为 <code>DN42</code>。</li>\n<li><code>remarks</code> ：备注信息，可以不填。</li>\n</ul>\n</li>\n<li><code>data/route/[IPv4 Block]</code>\n<ul>\n<li><code>route</code> ：这个地址块的范围。</li>\n<li><code>descr</code> ：简介，随意填写。</li>\n<li><code>origin</code> ：填写你的 AS 号。</li>\n<li><code>mnt-by</code> ：Maintain by（由谁维护），由谁维护，指向你的 mntner 文件，<code>[昵称]-MNT</code>。</li>\n<li><code>source</code> ：固定为 <code>DN42</code>。</li>\n</ul>\n</li>\n<li><code>data/inet6num/[IPv6 Block]</code>\n<ul>\n<li>与 IPv4 并无太大区别，只需将 <code>inetnum</code> 字段改为 <code>inet6num</code> 即可。</li>\n</ul>\n</li>\n<li><code>data/route6/[IPv6 Block]</code>\n<ul>\n<li>与 IPv4 并无太大区别，只需将 <code>route</code> 字段改为 <code>route6</code> 即可。</li>\n</ul>\n</li>\n</ul>\n<p>你可以查看我提交的注册信息：<a href=\"https://git.dn42.dev/dn42/registry/pulls/673/files\">Add AS141776 <small>(#673)</small></a></p>\n<p>注意：各个项目的名称和值之间有一长串空格。这段空格的长度是不能随意修改的，当然也不能替换成 Tab。名称 + 冒号 + 空格的总长度 <strong>必须是 20 个字符</strong>。</p>\n<p>创建完成之后，切换到仓库的根目录，执行 <code>git add .</code> 暂存更改。</p>\n<p>你可以使用 <code>git commit -S</code> 使用 GPG 对提交进行签名，或者暂时不对提交进行签名，使用 SSH 公钥进行验证：在 commit 之后执行 <code>git rev-parse HEAD | ssh-keygen -Y sign -f ~/.ssh/id_rsa -n dn42</code> 命令，将输出的信息贴到 Pull Request 里面。</p>\n<p>执行 <code>git push -f</code> 命令，将修改上传到服务器上。</p>\n<p><img src=\"https://vip2.loli.io/2021/04/04/1YwNjs8uvOJMFoq.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<p>使用黄色高亮标记出的菜单切换到你的分支，然后点击 <strong>New Pull Request</strong> 新建一个 Pull Request 即可。</p>\n<p>注意：<strong>请使用英文发 Pull Request ，否则审核人员会看不懂。</strong></p>\n<h2 id=\"DN42-WireGuard-使用入门\">DN42 WireGuard 使用入门</h2>\n<h3 id=\"安装-WireGuard\">安装 WireGuard</h3>\n<pre><code class=\"highlight bash\">apt install wireguard wireguard-tools -y</code></pre>\n<h3 id=\"系统配置\">系统配置</h3>\n<p>打开 Linux 内核的数据包转发功能：</p>\n<pre><code class=\"highlight bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;net.ipv4.ip_forward=1&quot;</span> &gt;&gt; /etc/sysctl.conf\n<span class=\"built_in\">echo</span> <span class=\"string\">&quot;net.ipv6.conf.default.forwarding=1&quot;</span> &gt;&gt; /etc/sysctl.conf\n<span class=\"built_in\">echo</span> <span class=\"string\">&quot;net.ipv6.conf.all.forwarding=1&quot;</span> &gt;&gt; /etc/sysctl.conf\nsysctl -p</code></pre>\n<p>关闭 Linux 内核 <code>rp_filter</code> 的严格模式：</p>\n<pre><code class=\"highlight bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;net.ipv4.conf.default.rp_filter=0&quot;</span> &gt;&gt; /etc/sysctl.conf\n<span class=\"built_in\">echo</span> <span class=\"string\">&quot;net.ipv4.conf.all.rp_filter=0&quot;</span> &gt;&gt; /etc/sysctl.conf</code></pre>\n<p>关闭 UFW 等帮你配置 iptables 的工具。</p>\n<h3 id=\"生成公钥和私钥\">生成公钥和私钥</h3>\n<p>先使用 <code>wg genkey</code> 命令生成一个私钥，然后使用 <code>echo &quot;&lt;PUBLIC_KEY&gt;&quot; | wg pubkey</code> 算出所对应的公钥。</p>\n<p>这是 WireGuard 隧道中双方的唯一认证方式，务必将其保管好，不要泄漏。</p>\n<h3 id=\"添加配置\">添加配置</h3>\n<p>新建一个文件：<code>/etc/wireguard/dn42-&lt;PEER_NAME&gt;.conf</code></p>\n<p>将下方示例中用 <code>&lt;&gt;</code> 括住的内容替换为实际信息，然后写入文件。</p>\n<pre><code class=\"highlight ini\"><span class=\"section\">[Interface]</span>\n<span class=\"attr\">PrivateKey</span> = &lt;PRIVATE_KEY&gt;\n<span class=\"attr\">ListenPort</span> = &lt;PORT&gt;\n<span class=\"attr\">Address</span> = &lt;YOUR_IPv4&gt;/<span class=\"number\">32</span>, &lt;YOUR_IPv6&gt;/<span class=\"number\">128</span>\n<span class=\"attr\">PostUp</span> = /usr/sbin/ip addr del dev dn42-&lt;PEER_NAME&gt; &lt;YOUR_IPv4&gt;/<span class=\"number\">32</span> &amp;&amp; /usr/sbin/ip addr add dev dn42-&lt;PEER_NAME&gt; &lt;YOUR_IPv4&gt;/<span class=\"number\">32</span> peer &lt;PEER_IPv4&gt;/<span class=\"number\">32</span>\n<span class=\"attr\">PostUp</span> = /usr/sbin/ip addr del dev dn42-&lt;PEER_NAME&gt; &lt;YOUR_IPv6&gt;/<span class=\"number\">128</span> &amp;&amp; /usr/sbin/ip addr add dev dn42-&lt;PEER_NAME&gt; &lt;YOUR_IPv6&gt;/<span class=\"number\">128</span> peer &lt;PEER_IPv6&gt;/<span class=\"number\">128</span>\n<span class=\"attr\">Table</span> = <span class=\"literal\">off</span>\n\n<span class=\"section\">[Peer]</span>\n<span class=\"attr\">PublicKey</span> = &lt;PEER_PUBLIC_KEY&gt;\n<span class=\"attr\">Endpoint</span> = &lt;IP/DOMAIN&gt;:&lt;PORT&gt; <span class=\"comment\"># 仅当你向对方发起连接时才需要填写此项配置</span>\n<span class=\"attr\">AllowedIPs</span> = <span class=\"number\">0.0</span>.<span class=\"number\">0.0</span>/<span class=\"number\">0</span>,::/<span class=\"number\">0</span></code></pre>\n<p>然后启动对应的 WireGuard 隧道：</p>\n<pre><code class=\"highlight bash\">systemctl start wg-quick@dn42-&lt;PEER_NAME&gt;</code></pre>\n<p>使用 <code>systemctl status wg-quick@dn42-&lt;PEER_NAME&gt;</code> 查看启动状态。</p>\n<p><img src=\"https://vip1.loli.io/2021/04/04/2wuXdEisnxvPCZJ.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<p>之后就可以使用 <code>wg</code> 命令查看隧道状态了。</p>\n<h2 id=\"与他人进行对等互联（Peer）\">与他人进行对等互联（Peer）</h2>\n<h3 id=\"安装-BIRD2\">安装 BIRD2</h3>\n<pre><code class=\"highlight bash\">apt install bird2 -y</code></pre>\n<p>安装完成后先停止 bird2 的服务：</p>\n<pre><code class=\"highlight bash\">systemctl stop bird</code></pre>\n<h3 id=\"编写配置文件\">编写配置文件</h3>\n<p>可以在 <a href=\"https://dn42.dev/howto/Bird2\">howto/Bird2 - DN42 Wiki</a> 页面上找到一份示例配置文件。</p>\n<p>apt 安装的 bird2 的配置文件一般是 <code>/etc/bird/bird.conf</code>。</p>\n<p>然后下载 ROA 配置文件：</p>\n<pre><code class=\"highlight bash\">curl -sfSLR &#123;-o,-z&#125;/etc/bird/roa_dn42.conf https://dn42.burble.com/roa/dn42_roa_bird2_4.conf\ncurl -sfSLR &#123;-o,-z&#125;/etc/bird/roa_dn42_v6.conf https://dn42.burble.com/roa/dn42_roa_bird2_6.conf\nbirdc configure</code></pre>\n<h3 id=\"ROA-配置文件的自动下载与更新\">ROA 配置文件的自动下载与更新</h3>\n<p>添加下面两个 crontab 定时任务：</p>\n<pre><code class=\"highlight cron\">*&#x2F;15 * * * * curl -sfSLR &#123;-o,-z&#125;&#x2F;etc&#x2F;bird&#x2F;roa_dn42.conf https:&#x2F;&#x2F;dn42.burble.com&#x2F;roa&#x2F;dn42_roa_bird2_4.conf &amp;&amp; chronic birdc configure\n*&#x2F;15 * * * * curl -sfSLR &#123;-o,-z&#125;&#x2F;etc&#x2F;bird&#x2F;roa_dn42_v6.conf https:&#x2F;&#x2F;dn42.burble.com&#x2F;roa&#x2F;dn42_roa_bird2_6.conf &amp;&amp; chronic birdc configure</code></pre>\n<h3 id=\"建立对等互联\">建立对等互联</h3>\n<p>在 <code>/etc/bird/peers</code> 目录下新建名为 <code>&lt;PEER_NAME&gt;.conf</code> 的文件，填入以下内容：</p>\n<pre><code class=\"highlight bird\">protocol bgp &lt;NEIGHBOR_NAME&gt; from dnpeers &#123;\n    neighbor &lt;NEIGHBOR_IP&gt; as &lt;NEIGHBOR_ASN&gt;;\n    direct;\n    # 在 IPv4 BGP 中禁用 IPv6 路由传递\n    ipv6 &#123;\n        import none;\n        export none;\n    &#125;;\n&#125;\n\nprotocol bgp &lt;NEIGHBOR_NAME&gt;_v6 from dnpeers &#123;\n    neighbor &lt;NEIGHBOR_IPv6&gt; as &lt;NEIGHBOR_ASN&gt;; # 或 neighbor &lt;NEIGHBOR_LINK_LOCAL_IP&gt; % &#39;dn42-&lt;PEER_NAME&gt;&#39; as &lt;NEIGHBOR_ASN&gt;;\n    direct;\n    # 在 IPv6 BGP 中禁用 IPv4 路由传递\n    ipv4 &#123;\n        import none;\n        export none;\n    &#125;;\n&#125;</code></pre>\n<p>当然，BIRD2 也是支持多协议会话的，只需要像下面这样写就可以同时建立 IPv4 和 IPv6 会话了：</p>\n<pre><code class=\"highlight bird\">protocol bgp &lt;NEIGHBOR_NAME&gt; from dnpeers &#123;\n    neighbor &lt;NEIGHBOR_IPv6&gt; as &lt;NEIGHBOR_ASN&gt;; # 或 neighbor &lt;NEIGHBOR_LINK_LOCAL_IP&gt; % &#39;dn42-&lt;PEER_NAME&gt;&#39; as &lt;NEIGHBOR_ASN&gt;;\n&#125;</code></pre>\n<p>配置完成后就可以开启 bird2 服务了：</p>\n<pre><code class=\"highlight bash\">systemctl start bird</code></pre>\n<p>Enjoy it!</p>\n<h2 id=\"我的-DN42-网络信息\">我的 DN42 网络信息</h2>\n<iframe src=\"https://as141776.net/dn42.html\" width=\"100%\" height=\"500px\"></iframe>\n<p><small>如果看不到上方的嵌入式页面，请访问 <a href=\"https://as141776.net/dn42.html\">https://as141776.net/dn42.html</a> 。</small></p>\n<h2 id=\"参考资料\">参考资料</h2>\n<ul>\n<li><a href=\"https://dn42.dev/howto/Getting-Started\">Getting Started - DN42 Wiki</a></li>\n<li><a href=\"https://git.dn42.dev/dn42/registry/src/branch/master/README.md\">Guide for creating a Pull Request - dn42/registry - DN42 Git</a></li>\n<li><a href=\"https://lantian.pub/article/modify-website/dn42-experimental-network-2020.lantian/\">DN42 实验网络介绍及注册教程（2020-10-01 更新） - Lan Tian @ Blog</a></li>\n</ul>\n",
            "tags": [
                "BGP",
                "DN42"
            ]
        }
    ]
}