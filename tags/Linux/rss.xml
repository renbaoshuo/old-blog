  
<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>宝硕博客 • Posts by &#34;linux&#34; tag</title>
        <link>https://blog.baoshuo.ren</link>
        <description>宝硕博客 —— Baoshuo (@renbaoshuo) 随便写东西的地方，以技术向博文为主，生活向博文为辅。</description>
        <language>cn</language>
        <pubDate>Thu, 15 Jul 2021 17:57:25 +0800</pubDate>
        <lastBuildDate>Thu, 15 Jul 2021 17:57:25 +0800</lastBuildDate>
        <category>BIRD</category>
        <category>BGP</category>
        <category>DN42</category>
        <category>网络</category>
        <category>Web</category>
        <category>CTF</category>
        <category>Git</category>
        <category>折腾</category>
        <category>Linux</category>
        <category>题解</category>
        <category>洛谷</category>
        <category>笔记</category>
        <category>牛客网</category>
        <category>S2OJ</category>
        <category>游记</category>
        <category>macOS</category>
        <category>CloudFlare</category>
        <category>前端</category>
        <item>
            <guid isPermalink="true">https://blog.baoshuo.ren/post/vps-cloudflare-warp/</guid>
            <title>使用 CloudFlare Warp 为单栈 VPS 添加双栈网络访问</title>
            <link>https://blog.baoshuo.ren/post/vps-cloudflare-warp/</link>
            <category>折腾</category>
            <category>Linux</category>
            <category>CloudFlare</category>
            <pubDate>Thu, 15 Jul 2021 17:57:25 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;a href=&#34;https://blog.cloudflare.com/1111-warp-better-vpn/&#34;&gt;Warp&lt;/a&gt; 是 CloudFlare 提供的一项基于 WireGuard 的网络流量安全及加速服务，能够让你通过连接到 CloudFlare 的边缘节点实现隐私保护及链路优化。&lt;/p&gt;
&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;
&lt;p&gt;由于 CloudFlare 官方的 &lt;a href=&#34;https://developers.cloudflare.com/warp-client/setting-up/linux&#34;&gt;Warp Client&lt;/a&gt; 过于臃肿，导致我看到安装包大小后就决定直接放弃安装，于是我选择了 &lt;a href=&#34;https://github.com/ViRb3/wgcf&#34;&gt;ViRb3/wgcf&lt;/a&gt; 替代。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://vip1.loli.io/2021/07/15/dHClLqSsvDKbrBc.png&#34; alt=&#34;使用 apt 安装 cloudflare-warp 时的提示&#34; loading=&#34;lazy&#34; data-action=&#34;zoom&#34;&gt;&lt;span class=&#34;image-description&#34;&gt;使用 apt 安装 cloudflare-warp 时的提示&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;安装依赖&#34;&gt;安装依赖&lt;/h2&gt;
&lt;p&gt;可以前往 &lt;a href=&#34;https://github.com/ViRb3/wgcf/releases/latest&#34;&gt;Releases 页面&lt;/a&gt; 下载编译好的二进制文件以供使用。&lt;/p&gt;
&lt;p&gt;也可使用如下命令安装：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;highlight bash&#34;&gt;curl -Ls https://git.io/wgcf-installer.sh | bash&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装好之后运行 &lt;code&gt;wgcf --help&lt;/code&gt; ，得到类似下图的输出即为安装成功：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://vip1.loli.io/2021/07/15/lDaywAzQGd8HI9S.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-action=&#34;zoom&#34;&gt;&lt;/p&gt;
&lt;p&gt;另外还需按照 &lt;a href=&#34;https://www.wireguard.com/install/&#34;&gt;WireGuard 官网&lt;/a&gt; 上的说明安装 WireGuard 。&lt;/p&gt;
&lt;p&gt;根据需求可能还需要安装 &lt;code&gt;resolvconf&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;生成-WireGuard-配置文件&#34;&gt;生成 WireGuard 配置文件&lt;/h2&gt;
&lt;p&gt;先使用 &lt;code&gt;wgcf register&lt;/code&gt; 命令注册 Warp 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://vip2.loli.io/2021/07/15/MYT5bkX4r2pGHUv.png&#34; alt=&#34;使用键盘上的方向键选择 &amp;quot;Yes&amp;quot; 并回车确认&#34; loading=&#34;lazy&#34; data-action=&#34;zoom&#34;&gt;&lt;span class=&#34;image-description&#34;&gt;使用键盘上的方向键选择 &amp;quot;Yes&amp;quot; 并回车确认&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;注册成功后的提示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://vip2.loli.io/2021/07/15/y4homkVbqsr9PYj.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-action=&#34;zoom&#34;&gt;&lt;/p&gt;
&lt;p&gt;之后使用 &lt;code&gt;wgcf generate&lt;/code&gt; 命令生成配置文件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://vip1.loli.io/2021/07/15/3zWUZYTdGhn9qkP.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-action=&#34;zoom&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;修改-WireGuard-配置文件&#34;&gt;修改 WireGuard 配置文件&lt;/h2&gt;
&lt;p&gt;这是一份生成出来的配置文件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;highlight ini&#34;&gt;&lt;span class=&#34;section&#34;&gt;[Interface]&lt;/span&gt;
&lt;span class=&#34;attr&#34;&gt;PrivateKey&lt;/span&gt; = ******
&lt;span class=&#34;attr&#34;&gt;Address&lt;/span&gt; = &lt;span class=&#34;number&#34;&gt;172.16&lt;/span&gt;.*.*/&lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;
&lt;span class=&#34;attr&#34;&gt;Address&lt;/span&gt; = fd01:******/&lt;span class=&#34;number&#34;&gt;128&lt;/span&gt;
&lt;span class=&#34;attr&#34;&gt;DNS&lt;/span&gt; = &lt;span class=&#34;number&#34;&gt;1.1&lt;/span&gt;.&lt;span class=&#34;number&#34;&gt;1.1&lt;/span&gt;
&lt;span class=&#34;attr&#34;&gt;MTU&lt;/span&gt; = &lt;span class=&#34;number&#34;&gt;1280&lt;/span&gt;

&lt;span class=&#34;section&#34;&gt;[Peer]&lt;/span&gt;
&lt;span class=&#34;attr&#34;&gt;PublicKey&lt;/span&gt; = ******
&lt;span class=&#34;attr&#34;&gt;AllowedIPs&lt;/span&gt; = &lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;.&lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;/&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;attr&#34;&gt;AllowedIPs&lt;/span&gt; = ::/&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;attr&#34;&gt;Endpoint&lt;/span&gt; = engage.cloudflareclient.com:&lt;span class=&#34;number&#34;&gt;2408&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;添加 IPv4 网络访问
&lt;ol&gt;
&lt;li&gt;删去 &lt;code&gt;[Interface]&lt;/code&gt; 中的 &lt;code&gt;Address = fd01:******/128&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;删去 &lt;code&gt;[Peer]&lt;/code&gt; 中的 &lt;code&gt;AllowedIPs = ::/0&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;将 Endpoint 的域名替换为解析出来的 IPv6 地址，如 &lt;code&gt;[2606:4700:d0::a29f:c001]:2408&lt;/code&gt; 。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;添加 IPv6 网络访问
&lt;ol&gt;
&lt;li&gt;删去 &lt;code&gt;[Interface]&lt;/code&gt; 中的 &lt;code&gt;Address = 172.16.*.*/32&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;删去 &lt;code&gt;[Peer]&lt;/code&gt; 中的 &lt;code&gt;AllowedIPs = 0.0.0.0/0&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;将 Endpoint 的域名替换为解析出来的 IPv4 地址，如 &lt;code&gt;162.159.192.1:2408&lt;/code&gt; 。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果不需要使用 CloudFlare 的 DNS 服务可以删去 &lt;code&gt;DNS = 1.1.1.1&lt;/code&gt; 这一行，使用的话需要安装 &lt;code&gt;resolvconf&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;启动-WireGuard-隧道&#34;&gt;启动 WireGuard 隧道&lt;/h2&gt;
&lt;p&gt;将刚才修改好的配置文件移动到 &lt;code&gt;/etc/wireguard/&lt;/code&gt; 目录下，推荐命名为 &lt;code&gt;wgcf.conf&lt;/code&gt; ，下面的操作以这个文件名为准。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;systemd enable --now wg-quick@wgcf&lt;/code&gt; 命令启动隧道，然后使用 &lt;code&gt;wg show wgcf&lt;/code&gt; 命令查看隧道状态。&lt;/p&gt;
&lt;p&gt;如果在启动时出现了错误，可以使用 &lt;code&gt;systemd status wg-quick@wgcf&lt;/code&gt; 命令查看错误信息，修复后使用 &lt;code&gt;systemd start wg-quick@wgcf&lt;/code&gt; 启动隧道。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://vip1.loli.io/2021/07/15/M9D1L2rFfHCPtcU.png&#34; alt=&#34;一切正常&#34; loading=&#34;lazy&#34; data-action=&#34;zoom&#34;&gt;&lt;span class=&#34;image-description&#34;&gt;一切正常&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;之后就可以享受双栈网络带来的便利了~&lt;/p&gt;
&lt;p&gt;注：日常如果需要重启隧道可以使用 &lt;code&gt;systemctl restart wg-quick@wgcf&lt;/code&gt; 命令。&lt;/p&gt;
&lt;h2 id=&#34;后记&#34;&gt;后记&lt;/h2&gt;
&lt;p&gt;折腾这些的原因是我从某个 Player IX 那里嫖的 VM 没有提供 IPv4 网络访问权限，这让我日常的维护工作麻烦了很多，于是我想到了 CloudFlare Warp 这个东西。CloudFlare Warp 提供的网络访问相较于 &lt;a href=&#34;http://TunnelBroker.net&#34;&gt;TunnelBroker.net&lt;/a&gt; 、 &lt;a href=&#34;http://TunnelBroker.ch&#34;&gt;TunnelBroker.ch&lt;/a&gt; 等一众隧道要好很多，延迟并不像其他隧道那样高。&lt;/p&gt;
&lt;p&gt;在查找资料的过程中我也发现了很多博客里面所描述的内容有误或已经过时，所以综合其他文章的内容加上自己的实践，写下了这篇文章。&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://luotianyi.vc/5252.html&#34;&gt;【WGCF】连接CF WARP为服务器添加IPv4/IPv6网络 - Luminous’ Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://p3terx.com/archives/use-cloudflare-warp-to-add-extra-ipv4-or-ipv6-network-support-to-vps-servers-for-free.html&#34;&gt;Cloudflare WARP 给 VPS 服务器额外添加 IPv4 或 IPv6 网络获得“原生”IP - P3TERX&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.baoshuo.ren/post/linux-systemd/</guid>
            <title>Linux Systemd 入门</title>
            <link>https://blog.baoshuo.ren/post/linux-systemd/</link>
            <category>Linux</category>
            <pubDate>Fri, 12 Feb 2021 00:06:31 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;Systemd-简介&#34;&gt;Systemd 简介&lt;/h2&gt;
&lt;p&gt;Systemd 是 Linux 电脑操作系统之下的一套中央化系统及设置管理程序，包括有守护进程、程序库以及应用软件，由 Lennart Poettering 带头开发。其开发目标是提供更优秀的框架以表示系统服务间的依赖关系，并依此实现系统初始化时服务的并行启动，同时达到降低 Shell 的系统开销的效果，最终代替现在常用的 System V 与 BSD 风格 init 程序。&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn1&#34; id=&#34;fnref1&#34;&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;
&lt;p&gt;目前绝大多数的 Linux 发行版都已采用 systemd 代替原来的 System V。&lt;/p&gt;
&lt;h2 id=&#34;常用命令列表&#34;&gt;常用命令列表&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn2&#34; id=&#34;fnref2&#34;&gt;[2]&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;列出所有已加载的单元：&lt;code&gt;systemctl list-units&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看指定的单元的配置：&lt;code&gt;systemctl cat [serviceName]&lt;/code&gt; &lt;em&gt;(e.g. &lt;code&gt;systemctl cat sshd.service&lt;/code&gt;)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;修改指定单元的配置：&lt;code&gt;systemctl edit [serviceName]&lt;/code&gt; &lt;em&gt;(e.g. &lt;code&gt;systemctl edit sshd.service&lt;/code&gt;)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;查看指定的单元的运行状态： &lt;code&gt;systemctl status [serviceName|pid]&lt;/code&gt; &lt;em&gt;(e.g. &lt;code&gt;systemctl status sshd.service&lt;/code&gt;)&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;如果指定了单元名称，那么显示指定单元的运行时状态信息，以及这些单元最近的日志数据。&lt;/li&gt;
&lt;li&gt;如果指定了 PID ，那么显示指定 PID 所属单元的运行时状态信息，以及这些单元最近的日志数据。&lt;/li&gt;
&lt;li&gt;如果未指定任何单元或 PID ，那么显示整个系统的状态信息， 此时若与 &lt;code&gt;--all&lt;/code&gt; 连用，则同时显示所有已加载的单元（可以用 &lt;code&gt;-t&lt;/code&gt; 限定单元类型）的状态信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;启动指定的单元：&lt;code&gt;systemctl start [serviceName]&lt;/code&gt; &lt;em&gt;(e.g. &lt;code&gt;systemctl start sshd.service&lt;/code&gt;)&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;被指定的单元必须是已经被加载的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重新启动指定的单元：&lt;code&gt;systemctl restart [serviceName]&lt;/code&gt; &lt;em&gt;(e.g. &lt;code&gt;systemctl restart sshd.service&lt;/code&gt;)&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;如果指定的单元没有启动，则直接启动它们。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;停止指定的单元：&lt;code&gt;systemctl stop [serviceName]&lt;/code&gt; &lt;em&gt;(e.g. &lt;code&gt;systemctl stop sshd.service&lt;/code&gt;)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;启用指定的单元：&lt;code&gt;systemctl enable [serviceName]&lt;/code&gt; &lt;em&gt;(e.g. &lt;code&gt;systemctl enable sshd.service&lt;/code&gt;)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;停用指定的单元：&lt;code&gt;systemctl disable [serviceName]&lt;/code&gt; &lt;em&gt;(e.g. &lt;code&gt;systemctl disable sshd.service&lt;/code&gt;)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;重新加载指定的单元的配置：&lt;code&gt;systemctl reload [serviceName]&lt;/code&gt; &lt;em&gt;(e.g. &lt;code&gt;systemctl reload sshd.service&lt;/code&gt;)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;重新加载所有已修改过的配置文件：&lt;code&gt;systemctl daemon-reload&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开机启动&#34;&gt;开机启动&lt;/h2&gt;
&lt;p&gt;对于那些支持 Systemd 的软件，安装的时候，会自动在 &lt;code&gt;/usr/lib/systemd/system&lt;/code&gt; 目录添加一个配置文件。&lt;/p&gt;
&lt;p&gt;如果你想让该软件开机启动，就执行下面的命令（以 &lt;code&gt;sshd.service&lt;/code&gt; 为例）。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;highlight bash&#34;&gt;sudo systemctl &lt;span class=&#34;built_in&#34;&gt;enable&lt;/span&gt; sshd.service&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面的命令相当于在 &lt;code&gt;/etc/systemd/system&lt;/code&gt; 目录添加一个符号链接，指向 &lt;code&gt;/usr/lib/systemd/system&lt;/code&gt; 里面的 &lt;code&gt;sshd.service&lt;/code&gt; 文件。&lt;/p&gt;
&lt;p&gt;这是因为开机时，Systemd 只执行 &lt;code&gt;/etc/systemd/system&lt;/code&gt; 目录里面的配置文件。这也意味着，如果把修改后的配置文件放在该目录，就可以达到覆盖原始配置的效果。&lt;/p&gt;
&lt;h2 id=&#34;Unit&#34;&gt;Unit&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn3&#34; id=&#34;fnref3&#34;&gt;[3]&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;
&lt;h3 id=&#34;配置文件&#34;&gt;配置文件&lt;/h3&gt;
&lt;p&gt;对于那些没有原生支持 Systemd 的软件，可以自行编写配置文件来达到开机自启的目的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我曾经为 Sakura Frp 编写过一个脚本：&lt;a href=&#34;https://getfrp.sh&#34;&gt;getfrp.sh&lt;/a&gt; &lt;sup&gt;（&lt;a href=&#34;https://gist.github.com/renbaoshuo/9c351b3e5750a2f6d453d035e0fd071a#file-getfrp-sh-L200-L213&#34;&gt;存档&lt;/a&gt; 于 GitHub Gist）&lt;/sup&gt; ，里面便是使用了自行编写配置文件的方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以 &lt;code&gt;sshd.service&lt;/code&gt; 这个配置文件为例子，来分析一下 Systemd 的配置文件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;highlight ini&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# /lib/systemd/system/ssh.service&lt;/span&gt;

&lt;span class=&#34;section&#34;&gt;[Unit]&lt;/span&gt;
&lt;span class=&#34;attr&#34;&gt;Description&lt;/span&gt;=OpenBSD Secure Shell server
&lt;span class=&#34;attr&#34;&gt;Documentation&lt;/span&gt;=man:sshd(&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;) man:sshd_config(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;)
&lt;span class=&#34;attr&#34;&gt;After&lt;/span&gt;=network.target auditd.service
&lt;span class=&#34;attr&#34;&gt;ConditionPathExists&lt;/span&gt;=!/etc/ssh/sshd_not_to_be_run

&lt;span class=&#34;section&#34;&gt;[Service]&lt;/span&gt;
&lt;span class=&#34;attr&#34;&gt;EnvironmentFile&lt;/span&gt;=-/etc/default/ssh
&lt;span class=&#34;attr&#34;&gt;ExecStartPre&lt;/span&gt;=/usr/sbin/sshd -t
&lt;span class=&#34;attr&#34;&gt;ExecStart&lt;/span&gt;=/usr/sbin/sshd -D &lt;span class=&#34;variable&#34;&gt;$SSHD_OPTS&lt;/span&gt;
&lt;span class=&#34;attr&#34;&gt;ExecReload&lt;/span&gt;=/usr/sbin/sshd -t
&lt;span class=&#34;attr&#34;&gt;ExecReload&lt;/span&gt;=/bin/kill -HUP &lt;span class=&#34;variable&#34;&gt;$MAINPID&lt;/span&gt;
&lt;span class=&#34;attr&#34;&gt;KillMode&lt;/span&gt;=process
&lt;span class=&#34;attr&#34;&gt;Restart&lt;/span&gt;=&lt;span class=&#34;literal&#34;&gt;on&lt;/span&gt;-failure
&lt;span class=&#34;attr&#34;&gt;RestartPreventExitStatus&lt;/span&gt;=&lt;span class=&#34;number&#34;&gt;255&lt;/span&gt;
&lt;span class=&#34;attr&#34;&gt;Type&lt;/span&gt;=notify
&lt;span class=&#34;attr&#34;&gt;RuntimeDirectory&lt;/span&gt;=sshd
&lt;span class=&#34;attr&#34;&gt;RuntimeDirectoryMode&lt;/span&gt;=&lt;span class=&#34;number&#34;&gt;0755&lt;/span&gt;

&lt;span class=&#34;section&#34;&gt;[Install]&lt;/span&gt;
&lt;span class=&#34;attr&#34;&gt;WantedBy&lt;/span&gt;=multi-user.target
&lt;span class=&#34;attr&#34;&gt;Alias&lt;/span&gt;=sshd.service&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看出这个文件一共有三个部分：&lt;code&gt;[Unit]&lt;/code&gt;, &lt;code&gt;[Service]&lt;/code&gt; 和 &lt;code&gt;[Install]&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;配置项通常是可以重复的，但靠后的配置项会取代前面同名的配置项。&lt;br&gt;
因此，如果你想要将某项的设定值归零，可以在该配置所在部分的结尾添加一个空值项（如 &lt;code&gt;After=&lt;/code&gt;），就将该设定归零了。&lt;/p&gt;
&lt;h4 id=&#34;Unit-启动顺序与依赖关系&#34;&gt;[Unit]: 启动顺序与依赖关系&lt;/h4&gt;
&lt;p&gt;这个部分主要有以下几个配置项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Description&lt;/code&gt;: 当前服务的简易说明&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Documentation&lt;/code&gt;: 文档位置（以空格分隔）
&lt;ul&gt;
&lt;li&gt;该项可以是网页链接，也可以是 manpages 的名称，亦或是文件路径。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Before&lt;/code&gt;: 在哪些服务之前启动
&lt;ul&gt;
&lt;li&gt;本字段不涉及依赖关系，只是说明了启动顺序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;After&lt;/code&gt;: 在哪些服务之后启动
&lt;ul&gt;
&lt;li&gt;本字段不涉及依赖关系，只是说明了启动顺序&lt;/li&gt;
&lt;li&gt;以 &lt;code&gt;sshd.service&lt;/code&gt; 中的配置为例，该服务需要在 &lt;code&gt;network.target&lt;/code&gt; 和 &lt;code&gt;auditd.service&lt;/code&gt; 之后启动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Wants&lt;/code&gt;: 弱依赖的服务
&lt;ul&gt;
&lt;li&gt;若被依赖的服务被停止，这个服务不需要停止&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Requires&lt;/code&gt;: 强依赖的服务
&lt;ul&gt;
&lt;li&gt;若被依赖的服务没有启动，则不能启动这个服务&lt;/li&gt;
&lt;li&gt;若被依赖的服务被停止，则这个服务也必须停止&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Conflicts&lt;/code&gt;: 冲突的服务
&lt;ul&gt;
&lt;li&gt;如果列出的服务中有一个已经运行，那么就不能启动这个服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Service-启动行为&#34;&gt;[Service]: 启动行为&lt;/h4&gt;
&lt;p&gt;这个部分主要有以下几个配置项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Type&lt;/code&gt;: 启动类型。默认值为 &lt;code&gt;simple&lt;/code&gt; ，可选值如下：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;simple&lt;/code&gt;: 使 &lt;code&gt;ExecStart&lt;/code&gt; 项启动的项成为主进程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;forking&lt;/code&gt;: &lt;code&gt;ExecStart&lt;/code&gt; 项将会以 &lt;code&gt;fork()&lt;/code&gt; 的形式启动，此时父进程将会退出，子进程将成为主进程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;oneshot&lt;/code&gt;: 类似于 &lt;code&gt;simple&lt;/code&gt; ，但只执行一次，Systemd 会等它执行完，才启动其他服务&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dbus&lt;/code&gt;: 类似于 &lt;code&gt;simple&lt;/code&gt; ，但会等待 &lt;code&gt;D-Bus&lt;/code&gt; 信号后启动&lt;/li&gt;
&lt;li&gt;&lt;code&gt;notify&lt;/code&gt;: 类似于 &lt;code&gt;simple&lt;/code&gt; ，启动结束后会发出通知信号，然后 Systemd 再启动其他服务&lt;/li&gt;
&lt;li&gt;&lt;code&gt;idle&lt;/code&gt;: 类似于 &lt;code&gt;simple&lt;/code&gt; ，但是要等到其他任务都执行完，才会启动该服务。
&lt;ul&gt;
&lt;li&gt;这个选项的其中一种使用场合是为让该服务的输出，不与其他服务的输出相混合&lt;/li&gt;
&lt;li&gt;这个选项的另外一种使用场合是执行只需要再开机的时候执行一次的程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Environment&lt;/code&gt;: 指定环境变量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EnvironmentFile&lt;/code&gt;: 环境变量配置文件，该文件内部的 &lt;code&gt;key=value&lt;/code&gt; 形式的配置可以在当前文件中以 &lt;code&gt;$key&lt;/code&gt; 获取&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ExecStart&lt;/code&gt;: 服务启动时执行的命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ExecReload&lt;/code&gt;: 服务重启时执行的命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ExecStop&lt;/code&gt;: 服务停止时执行的命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ExecStartPre&lt;/code&gt;: 服务启动之前执行的命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ExecStartPost&lt;/code&gt;: 服务启动之后执行的命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ExecStopPost&lt;/code&gt;: 服务停止之后执行的命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Restart&lt;/code&gt;: 服务退出后的重启方式，默认值为 &lt;code&gt;no&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;no&lt;/code&gt;: 进程退出后不会重启&lt;/li&gt;
&lt;li&gt;&lt;code&gt;on-success&lt;/code&gt;: 当进程正常退出时（退出状态码为 0）重启&lt;/li&gt;
&lt;li&gt;&lt;code&gt;on-failure&lt;/code&gt;: 当进程非正常退出时（退出状态码不为 0、被信号终止、程序超时）重启&lt;/li&gt;
&lt;li&gt;&lt;code&gt;on-abnormal&lt;/code&gt;: 当进程被信号终止或程序超时时重启&lt;/li&gt;
&lt;li&gt;&lt;code&gt;on-abort&lt;/code&gt;: 当收到没有捕捉到的信号终止时重启&lt;/li&gt;
&lt;li&gt;&lt;code&gt;on-watchdog&lt;/code&gt;: 当进程超时退出时重启&lt;/li&gt;
&lt;li&gt;&lt;code&gt;always&lt;/code&gt;: 总是重启（不论原因）&lt;/li&gt;
&lt;li&gt;对于守护进程，推荐设为 &lt;code&gt;on-failure&lt;/code&gt;。对于那些允许发生错误退出的服务，可以设为 &lt;code&gt;on-abnormal&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RemainAfterExit&lt;/code&gt;: 退出后是否重新启动
&lt;ul&gt;
&lt;li&gt;当设定为 &lt;code&gt;RemainAfterExit=1&lt;/code&gt; 时，则当这个服务所属的所有程序都终止之后，此服务会再尝试启动。这对于 &lt;code&gt;Type=oneshot&lt;/code&gt; 的服务很有帮助&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TimeoutSec&lt;/code&gt;: 当这个服务在启动或停止时失败进入&amp;quot;强制结束&amp;quot;状态的等待秒数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;KillMode&lt;/code&gt;: 定义 Systemd 如何停止这个服务，默认值为 &lt;code&gt;control-group&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;control-group&lt;/code&gt;: 服务停止时关闭此控制组中所有的进程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;process&lt;/code&gt;: 服务停止时只终止主进程（ExecStart 接的后面那串指令）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mixed&lt;/code&gt;: 主进程将收到 &lt;strong&gt;SIGTERM&lt;/strong&gt; 信号，子进程收到 &lt;strong&gt;SIGKILL&lt;/strong&gt; 信号&lt;/li&gt;
&lt;li&gt;&lt;code&gt;none&lt;/code&gt;: 没有进程会被杀掉，只是执行服务的 stop 命令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RestartSec&lt;/code&gt;: 表示 Systemd 重启服务之前，需要等待的秒数（默认是 100ms）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所有的启动设置之前，都可以加上一个连词号 (&lt;code&gt;-&lt;/code&gt;) ，表示 「抑制错误」 ，即发生错误的时候，不影响其他命令的执行。以 &lt;code&gt;sshd.service&lt;/code&gt; 为例，文件中的 &lt;code&gt;EnvironmentFile=-/etc/sysconfig/sshd&lt;/code&gt;（注意等号后面的那个连词号），表示 &lt;code&gt;/etc/sysconfig/sshd&lt;/code&gt; 文件不存在，也不会抛出错误。&lt;/p&gt;
&lt;h4 id=&#34;Install-安装行为&#34;&gt;[Install]: 安装行为&lt;/h4&gt;
&lt;p&gt;这个部分主要有以下几个配置项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WantedBy&lt;/code&gt;: 表示该服务所在的 Target
&lt;ul&gt;
&lt;li&gt;一般来说，服务性质的单元都是挂在 &lt;code&gt;multi-user.target&lt;/code&gt; 下的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Also&lt;/code&gt;: 当该服务被启用时需要同时启用的单元&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alias&lt;/code&gt;: 指定创建软链接时链接至本单元配置文件的别名文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;模板实例&#34;&gt;模板实例&lt;/h3&gt;
&lt;p&gt;此处以 &lt;code&gt;getty@.service&lt;/code&gt; 文件为例，来分析一下它是如何做到使用一个配置文件启动多个服务的：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;highlight ini&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# /lib/systemd/system/getty@.service&lt;/span&gt;
&lt;span class=&#34;comment&#34;&gt;#&lt;/span&gt;
&lt;span class=&#34;comment&#34;&gt;#  SPDX-License-Identifier: LGPL-2.1+&lt;/span&gt;
&lt;span class=&#34;comment&#34;&gt;#&lt;/span&gt;
&lt;span class=&#34;comment&#34;&gt;#  This file is part of systemd.&lt;/span&gt;
&lt;span class=&#34;comment&#34;&gt;#&lt;/span&gt;
&lt;span class=&#34;comment&#34;&gt;#  systemd is free software; you can redistribute it and/or modify it&lt;/span&gt;
&lt;span class=&#34;comment&#34;&gt;#  under the terms of the GNU Lesser General Public License as published by&lt;/span&gt;
&lt;span class=&#34;comment&#34;&gt;#  the Free Software Foundation; either version 2.1 of the License, or&lt;/span&gt;
&lt;span class=&#34;comment&#34;&gt;#  (at your option) any later version.&lt;/span&gt;

&lt;span class=&#34;section&#34;&gt;[Unit]&lt;/span&gt;
&lt;span class=&#34;attr&#34;&gt;Description&lt;/span&gt;=Getty &lt;span class=&#34;literal&#34;&gt;on&lt;/span&gt; %I
&lt;span class=&#34;attr&#34;&gt;Documentation&lt;/span&gt;=man:agetty(&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;) man:systemd-getty-generator(&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;)
&lt;span class=&#34;attr&#34;&gt;Documentation&lt;/span&gt;=http://&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;pointer.de/blog/projects/serial-console.html
&lt;span class=&#34;attr&#34;&gt;After&lt;/span&gt;=systemd-user-sessions.service plymouth-quit-wait.service getty-pre.target
&lt;span class=&#34;attr&#34;&gt;After&lt;/span&gt;=rc-local.service

&lt;span class=&#34;comment&#34;&gt;# If additional gettys are spawned during boot then we should make&lt;/span&gt;
&lt;span class=&#34;comment&#34;&gt;# sure that this is synchronized before getty.target, even though&lt;/span&gt;
&lt;span class=&#34;comment&#34;&gt;# getty.target didn&amp;#x27;t actually pull it in.&lt;/span&gt;
&lt;span class=&#34;attr&#34;&gt;Before&lt;/span&gt;=getty.target
&lt;span class=&#34;attr&#34;&gt;IgnoreOnIsolate&lt;/span&gt;=&lt;span class=&#34;literal&#34;&gt;yes&lt;/span&gt;

&lt;span class=&#34;comment&#34;&gt;# IgnoreOnIsolate causes issues with sulogin, if someone isolates&lt;/span&gt;
&lt;span class=&#34;comment&#34;&gt;# rescue.target or starts rescue.service from multi-user.target or&lt;/span&gt;
&lt;span class=&#34;comment&#34;&gt;# graphical.target.&lt;/span&gt;
&lt;span class=&#34;attr&#34;&gt;Conflicts&lt;/span&gt;=rescue.service
&lt;span class=&#34;attr&#34;&gt;Before&lt;/span&gt;=rescue.service

&lt;span class=&#34;comment&#34;&gt;# On systems without virtual consoles, don&amp;#x27;t start any getty. Note&lt;/span&gt;
&lt;span class=&#34;comment&#34;&gt;# that serial gettys are covered by serial-getty@.service, not this&lt;/span&gt;
&lt;span class=&#34;comment&#34;&gt;# unit.&lt;/span&gt;
&lt;span class=&#34;attr&#34;&gt;ConditionPathExists&lt;/span&gt;=/dev/tty0

&lt;span class=&#34;section&#34;&gt;[Service]&lt;/span&gt;
&lt;span class=&#34;comment&#34;&gt;# the VT is cleared by TTYVTDisallocate&lt;/span&gt;
&lt;span class=&#34;comment&#34;&gt;# The &amp;#x27;-o&amp;#x27; option value tells agetty to replace &amp;#x27;login&amp;#x27; arguments with an&lt;/span&gt;
&lt;span class=&#34;comment&#34;&gt;# option to preserve environment (-p), followed by &amp;#x27;--&amp;#x27; for safety, and then&lt;/span&gt;
&lt;span class=&#34;comment&#34;&gt;# the entered username.&lt;/span&gt;
&lt;span class=&#34;attr&#34;&gt;ExecStart&lt;/span&gt;=-/sbin/agetty -o &lt;span class=&#34;string&#34;&gt;&amp;#x27;-p -- \\u&amp;#x27;&lt;/span&gt; --noclear %I &lt;span class=&#34;variable&#34;&gt;$TERM&lt;/span&gt;
&lt;span class=&#34;attr&#34;&gt;Type&lt;/span&gt;=idle
&lt;span class=&#34;attr&#34;&gt;Restart&lt;/span&gt;=always
&lt;span class=&#34;attr&#34;&gt;RestartSec&lt;/span&gt;=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;attr&#34;&gt;UtmpIdentifier&lt;/span&gt;=%I
&lt;span class=&#34;attr&#34;&gt;TTYPath&lt;/span&gt;=/dev/%I
&lt;span class=&#34;attr&#34;&gt;TTYReset&lt;/span&gt;=&lt;span class=&#34;literal&#34;&gt;yes&lt;/span&gt;
&lt;span class=&#34;attr&#34;&gt;TTYVHangup&lt;/span&gt;=&lt;span class=&#34;literal&#34;&gt;yes&lt;/span&gt;
&lt;span class=&#34;attr&#34;&gt;TTYVTDisallocate&lt;/span&gt;=&lt;span class=&#34;literal&#34;&gt;yes&lt;/span&gt;
&lt;span class=&#34;attr&#34;&gt;KillMode&lt;/span&gt;=process
&lt;span class=&#34;attr&#34;&gt;IgnoreSIGPIPE&lt;/span&gt;=&lt;span class=&#34;literal&#34;&gt;no&lt;/span&gt;
&lt;span class=&#34;attr&#34;&gt;SendSIGHUP&lt;/span&gt;=&lt;span class=&#34;literal&#34;&gt;yes&lt;/span&gt;

&lt;span class=&#34;comment&#34;&gt;# Unset locale for the console getty since the console has problems&lt;/span&gt;
&lt;span class=&#34;comment&#34;&gt;# displaying some internationalized messages.&lt;/span&gt;
&lt;span class=&#34;attr&#34;&gt;UnsetEnvironment&lt;/span&gt;=LANG LANGUAGE LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_MESSAGES LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT LC_IDENTIFICATION

&lt;span class=&#34;section&#34;&gt;[Install]&lt;/span&gt;
&lt;span class=&#34;attr&#34;&gt;WantedBy&lt;/span&gt;=getty.target
&lt;span class=&#34;attr&#34;&gt;DefaultInstance&lt;/span&gt;=tty1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行 &lt;code&gt;systemctl status getty@tty1.service&lt;/code&gt; 命令，可以看到如下图所示的输出：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://vip1.loli.io/2021/02/11/lhw1BzOUb7TRDrq.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-action=&#34;zoom&#34;&gt;&lt;/p&gt;
&lt;p&gt;不难发现图中标橙色的字符与上方配置文件中的 &lt;code&gt;%I&lt;/code&gt; 相对应，并且配置文件的名称也不是 &lt;code&gt;getty@tty1.service&lt;/code&gt; ，而是 &lt;code&gt;getty@.service&lt;/code&gt; ，这种配置文件叫做 「模板实例」 。&lt;/p&gt;
&lt;p&gt;启动时只需要在 &lt;code&gt;@&lt;/code&gt; 后面添加需要填入 &lt;code&gt;%I&lt;/code&gt; 位置的参数即可，如 &lt;code&gt;getty@tty9.service&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;Target&#34;&gt;Target&lt;/h2&gt;
&lt;p&gt;一般来说，常用的 Target 有两个：一个是 &lt;code&gt;multi-user.target&lt;/code&gt; ，表示多用户命令行状态；另一个是 &lt;code&gt;graphical.target&lt;/code&gt; ，表示图形用户状态（它依赖于 &lt;code&gt;multi-user.target&lt;/code&gt;），这一点和 SysVinit 的运行级别很是相似。&lt;/p&gt;
&lt;p&gt;官方提供了一张非常清晰的 Target 依赖关系图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://vip2.loli.io/2021/02/11/ubmqlLdiGeCtUg7.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-action=&#34;zoom&#34;&gt;&lt;/p&gt;
&lt;p&gt;图源：&lt;a href=&#34;https://www.freedesktop.org/software/systemd/man/bootup.html#System%20Manager%20Bootup&#34;&gt;https://www.freedesktop.org/software/systemd/man/bootup.html#System Manager Bootup&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;配置文件-2&#34;&gt;配置文件&lt;/h3&gt;
&lt;p&gt;以 &lt;code&gt;multi-user.target&lt;/code&gt; 这个文件为例子，来简要说明一下 Target 的配置文件中的主要项目：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;highlight ini&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# /lib/systemd/system/multi-user.target&lt;/span&gt;
&lt;span class=&#34;comment&#34;&gt;#&lt;/span&gt;
&lt;span class=&#34;comment&#34;&gt;#  SPDX-License-Identifier: LGPL-2.1+&lt;/span&gt;
&lt;span class=&#34;comment&#34;&gt;#&lt;/span&gt;
&lt;span class=&#34;comment&#34;&gt;#  This file is part of systemd.&lt;/span&gt;
&lt;span class=&#34;comment&#34;&gt;#&lt;/span&gt;
&lt;span class=&#34;comment&#34;&gt;#  systemd is free software; you can redistribute it and/or modify it&lt;/span&gt;
&lt;span class=&#34;comment&#34;&gt;#  under the terms of the GNU Lesser General Public License as published by&lt;/span&gt;
&lt;span class=&#34;comment&#34;&gt;#  the Free Software Foundation; either version 2.1 of the License, or&lt;/span&gt;
&lt;span class=&#34;comment&#34;&gt;#  (at your option) any later version.&lt;/span&gt;

&lt;span class=&#34;section&#34;&gt;[Unit]&lt;/span&gt;
&lt;span class=&#34;attr&#34;&gt;Description&lt;/span&gt;=Multi-User System
&lt;span class=&#34;attr&#34;&gt;Documentation&lt;/span&gt;=man:systemd.special(&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;)
&lt;span class=&#34;attr&#34;&gt;Requires&lt;/span&gt;=basic.target
&lt;span class=&#34;attr&#34;&gt;Conflicts&lt;/span&gt;=rescue.service rescue.target
&lt;span class=&#34;attr&#34;&gt;After&lt;/span&gt;=basic.target rescue.service rescue.target
&lt;span class=&#34;attr&#34;&gt;AllowIsolate&lt;/span&gt;=&lt;span class=&#34;literal&#34;&gt;yes&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Requires&lt;/code&gt;: 要求于某个 Target 一起运行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Conflicts&lt;/code&gt;: 冲突的 Target&lt;/li&gt;
&lt;li&gt;&lt;code&gt;After&lt;/code&gt;: 在哪些 Target 之后启动&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AllowIsolate&lt;/code&gt;: 是否允许使用 &lt;code&gt;systemctl isolate&lt;/code&gt; 命令切换到这个 Target&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;hr class=&#34;footnotes-sep&#34;&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;ol class=&#34;footnotes-list&#34;&gt;
&lt;li id=&#34;fn1&#34; class=&#34;footnote-item&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Systemd&#34;&gt;Systemd - Wikipedia&lt;/a&gt; &lt;sup&gt;（&lt;a href=&#34;https://web.archive.org/web/20210210150200/https://en.wikipedia.org/wiki/Systemd&#34;&gt;存档&lt;/a&gt; 于 &lt;a href=&#34;https://archive.org&#34;&gt;互联网档案馆&lt;/a&gt;）&lt;/sup&gt; &lt;a href=&#34;#fnref1&#34; class=&#34;footnote-backref&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn2&#34; class=&#34;footnote-item&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://manpages.ubuntu.com/manpages/bionic/zh_CN/man1/systemctl.1.html&#34;&gt;Systemd - Ubuntu Manpages&lt;/a&gt; &lt;sup&gt;（&lt;a href=&#34;https://web.archive.org/web/20210210150518/https://manpages.ubuntu.com/manpages/bionic/zh_CN/man1/systemctl.1.html&#34;&gt;存档&lt;/a&gt; 于 &lt;a href=&#34;https://archive.org&#34;&gt;互联网档案馆&lt;/a&gt;）&lt;/sup&gt; &lt;a href=&#34;#fnref2&#34; class=&#34;footnote-backref&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn3&#34; class=&#34;footnote-item&#34;&gt;&lt;p&gt;&lt;a href=&#34;http://linux.vbird.org/linux_basic/0560daemons.php&#34;&gt;第十七章 认识系统服务(daemons) - 鸟哥的Linux私房菜&lt;/a&gt; &lt;sup&gt;（&lt;a href=&#34;https://web.archive.org/web/20200810204650/http://linux.vbird.org/linux_basic/0560daemons.php&#34;&gt;存档&lt;/a&gt; 于 &lt;a href=&#34;https://archive.org&#34;&gt;互联网档案馆&lt;/a&gt;）&lt;/sup&gt; &lt;a href=&#34;#fnref3&#34; class=&#34;footnote-backref&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.baoshuo.ren/post/tencent-cloud-cvm-dual-ip/</guid>
            <title>给腾讯云服务器免费增加第二个 IP</title>
            <link>https://blog.baoshuo.ren/post/tencent-cloud-cvm-dual-ip/</link>
            <category>网络</category>
            <category>Linux</category>
            <pubDate>Thu, 20 Aug 2020 13:22:47 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;良心云果然是良心云，增加了一个IP四舍五入居然不要钱，不过还是要登进系统配置一下双IP的。&lt;/p&gt;
&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&#34;https://vip2.loli.io/2020/11/26/rAyvBmDw2bdMP6t.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-action=&#34;zoom&#34;&gt;&lt;/p&gt;
&lt;p&gt;和客服的对话&lt;/p&gt;
&lt;h2 id=&#34;增加网卡-公网IP&#34;&gt;增加网卡&amp;amp;公网IP&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://vip2.loli.io/2020/11/26/SWwlbLRaHACnuBz.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-action=&#34;zoom&#34;&gt;&lt;/p&gt;
&lt;p&gt;点击按钮新建一个弹性网卡并绑定&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://vip1.loli.io/2020/11/26/sJqBfdbv4eRzZFm.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-action=&#34;zoom&#34;&gt;&lt;/p&gt;
&lt;p&gt;绑定完以后可以在服务器的弹性网卡管理页面看到详情&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://vip1.loli.io/2020/11/26/ivPFgfH69XTCo8Z.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-action=&#34;zoom&#34;&gt;&lt;/p&gt;
&lt;p&gt;点击新建的弹性网卡，进入管理页面，并记录下这张网卡的&lt;strong&gt;内网IP&lt;/strong&gt;，稍后会用到&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://vip1.loli.io/2020/11/26/FAy8U5lpzNtuMTi.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-action=&#34;zoom&#34;&gt;&lt;/p&gt;
&lt;p&gt;点击绑定按钮，并申请一个弹性公网IP&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://vip2.loli.io/2020/11/26/AbZ4vTwr1UCdz2n.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-action=&#34;zoom&#34;&gt;
&lt;img src=&#34;https://vip2.loli.io/2020/11/26/2G5jsdTSZrocqwh.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-action=&#34;zoom&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时弹性公网IP已经绑定成功，并且可以看到已经变为不收取IP资源费的状态了&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://vip1.loli.io/2020/11/26/x8q7I5E2dMSDt4B.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-action=&#34;zoom&#34;&gt;&lt;/p&gt;
&lt;p&gt;查看主网卡的&lt;strong&gt;内网IP&lt;/strong&gt;，并记录下这个IP，稍后会用到&lt;/p&gt;
&lt;h2 id=&#34;配置服务器的网络设置&#34;&gt;配置服务器的网络设置&lt;/h2&gt;
&lt;p&gt;使用 &lt;code&gt;ip addr&lt;/code&gt; 查看网卡名称，并记录下来&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://vip2.loli.io/2020/11/26/Ofh8CzvnYKPGsH7.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-action=&#34;zoom&#34;&gt;&lt;/p&gt;
&lt;p&gt;切换到网卡配置文件目录&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;highlight bash&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;cd&lt;/span&gt; /etc/sysconfig/network-scripts/&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;编辑 &lt;code&gt;ifcfg-eth0&lt;/code&gt; 文件，将下方内容修改后填入&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;highlight ini&#34;&gt;&lt;span class=&#34;attr&#34;&gt;DEVICE&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;eth0&amp;quot;&lt;/span&gt;             &lt;span class=&#34;comment&#34;&gt;# 弹性网卡名称&lt;/span&gt;
&lt;span class=&#34;attr&#34;&gt;NM_CONTROLLED&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;yes&amp;quot;&lt;/span&gt;       &lt;span class=&#34;comment&#34;&gt;# 是否由 Network Manager 控制该网络接口&lt;/span&gt;
&lt;span class=&#34;attr&#34;&gt;ONBOOT&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;yes&amp;quot;&lt;/span&gt;              &lt;span class=&#34;comment&#34;&gt;# 系统启动时是否激活&lt;/span&gt;
&lt;span class=&#34;attr&#34;&gt;IPADDR&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;172.21.0.10&amp;quot;&lt;/span&gt;      &lt;span class=&#34;comment&#34;&gt;# 弹性网卡上的 IP 地址&lt;/span&gt;
&lt;span class=&#34;attr&#34;&gt;NETMASK&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;255.255.240.0&amp;quot;&lt;/span&gt;   &lt;span class=&#34;comment&#34;&gt;# 子网掩码&lt;/span&gt;
&lt;span class=&#34;attr&#34;&gt;GATEWAY&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;172.21.0.1&amp;quot;&lt;/span&gt;      &lt;span class=&#34;comment&#34;&gt;# 网关&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;其中 &lt;code&gt;IPADDR&lt;/code&gt; 填写主网卡的&lt;strong&gt;内网IP&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;子网掩码可以使用 &lt;a href=&#34;https://www.v2ex.com/tools/ipv4&#34;&gt;V2EX 提供的 IPv4 子网查询工具&lt;/a&gt; 查询对应的子网。&lt;/li&gt;
&lt;li&gt;网关根据创建网卡时选择的子网而定。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;新建 &lt;code&gt;ifcfg-eth1&lt;/code&gt; 文件，将下方内容修改后填入&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;highlight ini&#34;&gt;&lt;span class=&#34;attr&#34;&gt;DEVICE&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;eth1&amp;quot;&lt;/span&gt;             &lt;span class=&#34;comment&#34;&gt;# 需配置的弹性网卡名称（此处是新添加的网卡名称）&lt;/span&gt;
&lt;span class=&#34;attr&#34;&gt;NM_CONTROLLED&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;yes&amp;quot;&lt;/span&gt;       &lt;span class=&#34;comment&#34;&gt;# 是否由 Network Manager 控制该网络接口&lt;/span&gt;
&lt;span class=&#34;attr&#34;&gt;ONBOOT&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;yes&amp;quot;&lt;/span&gt;              &lt;span class=&#34;comment&#34;&gt;# 系统启动时是否激活&lt;/span&gt;
&lt;span class=&#34;attr&#34;&gt;IPADDR&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;172.21.0.12&amp;quot;&lt;/span&gt;      &lt;span class=&#34;comment&#34;&gt;# 弹性网卡上的 IP 地址&lt;/span&gt;
&lt;span class=&#34;attr&#34;&gt;NETMASK&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;255.255.240.0&amp;quot;&lt;/span&gt;   &lt;span class=&#34;comment&#34;&gt;# 子网掩码&lt;/span&gt;
&lt;span class=&#34;comment&#34;&gt;# GATEWAY=&amp;quot;172.21.0.1&amp;quot;    # 网关（若与eth0的网关不同，需要删除注释并修改为正确的网关）&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;其中 &lt;code&gt;IPADDR&lt;/code&gt; 填写新添加网卡的&lt;strong&gt;内网IP&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;子网掩码可以 &lt;a href=&#34;https://www.v2ex.com/tools/ipv4&#34;&gt;V2EX 提供的 IPv4 子网查询工具&lt;/a&gt; 查询对应的子网。&lt;/li&gt;
&lt;li&gt;网关根据创建网卡时选择的子网而定。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;保存后重启网络服务。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;highlight bash&#34;&gt;service network restart&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://vip1.loli.io/2020/11/26/ReBSM4C9oF2HbVi.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-action=&#34;zoom&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;配置路由（可选）&#34;&gt;配置路由（可选）&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;按照上述步骤配置好后，Linux 还是默认都从主网卡发包。
您可通过策略路由让报文从哪个网卡进，并从该网卡返回。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;创建路由表&#34;&gt;创建路由表&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;highlight bash&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;10 t1&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/iproute2/rt_tables
&lt;span class=&#34;built_in&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;20 t2&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/iproute2/rt_tables&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;添加默认路由&#34;&gt;添加默认路由&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;highlight bash&#34;&gt;ip route add default dev eth0 via 172.21.0.1 table 10
ip route add default dev eth1 via 172.21.0.1 table 20&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;上述两个命令中，172.21.0.1要分别替换成主网卡所属子网的网关，以及辅助网卡所属子网的网关。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;配置策略路由&#34;&gt;配置策略路由&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;highlight bash&#34;&gt;ip rule add from 172.21.0.10 table 10
ip rule add from 172.21.0.12 table 20&lt;/code&gt;&lt;/pre&gt; ]]></description>
        </item>
    </channel>
</rss>