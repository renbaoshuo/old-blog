{
    "version": "https://jsonfeed.org/version/1",
    "title": "宝硕博客 • All posts by \"linux\" tag",
    "description": "宝硕博客 —— Baoshuo (@renbaoshuo) 随便写东西的地方，以技术向博文为主，生活向博文为辅。",
    "home_page_url": "https://blog.baoshuo.ren",
    "items": [
        {
            "id": "https://blog.baoshuo.ren/post/noi-linux-2/",
            "url": "https://blog.baoshuo.ren/post/noi-linux-2/",
            "title": "NOI Linux 2.0 上手体验",
            "date_published": "2021-08-08T13:44:33.000Z",
            "content_html": "<p>时隔多年，CCF 终于发布了新版的 NOI Linux ，替换了以前基于 Ubuntu 14.04 的 NOI Linux 1.4.1。</p>\n<span id=\"more\"></span>\n<p>在 NOI Linux 2.0 发布的当天，我就迫不及待地下载好了镜像（<a href=\"https://noiresources.ccf.org.cn/ubuntu-noi-v2.0.iso\"><code>ubuntu-noi-v2.0.iso</code></a>），但由于时间原因，没有第一时间进行体验。</p>\n<h2 id=\"安装\"><a class=\"anchor\" href=\"#安装\"></a>安装</h2>\n<p>首先先新建好一台虚拟机。</p>\n<p><img src=\"https://vip2.loli.io/2021/07/25/ceaObqknR3FTtlU.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<p>新建虚拟机及挂载镜像的步骤不再过多叙述，在安装时需要断开网络连接。</p>\n<p><img src=\"https://vip2.loli.io/2021/07/25/PeYV6lquxawzL7b.png\" alt=\"开屏就是自定义的启动加载界面\" loading=\"lazy\" data-action=\"zoom\"><span class=\"image-description\">开屏就是自定义的启动加载界面</span></p>\n<p>安装后需要连接网络，运行 <code>sudo apt update</code> 更新软件包列表，然后安装 <code>open-vm-tools-desktop</code> ，安装完成后建议重启虚拟机。</p>\n<h2 id=\"简单体验\"><a class=\"anchor\" href=\"#简单体验\"></a>简单体验</h2>\n<h3 id=\"整体评价\"><a class=\"anchor\" href=\"#整体评价\"></a>整体评价</h3>\n<ol>\n<li>在考场上如果提供 NOI Linux 虚拟机的话，可能需要手动安装 VMware Tools （因为没网所以不能装 Open VM Tools），略麻烦。</li>\n<li>系统操作有点卡，不知道是不是因为虚拟机的原因。</li>\n<li>预装的软件部分是处于半残状态的，在考场上无法正常使用。</li>\n<li>编译器版本较新，默认支持一些新的语言特性。</li>\n<li>在考场上推荐使用 Sublime Text 或者 Code::Blocks 进行代码编写，不推荐使用 VSCode 。</li>\n</ol>\n<h3 id=\"更新\"><a class=\"anchor\" href=\"#更新\"></a>更新</h3>\n<p><img src=\"https://vip2.loli.io/2021/08/08/MbBrDuQyYpwP9TA.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<p>模拟考试环境时不建议安装<strong>任何</strong>更新，以还原考场上的「本真的」NOI Linux 。如果需要日常使用则建议安装更新。</p>\n<h3 id=\"vscode\"><a class=\"anchor\" href=\"#vscode\"></a>VSCode</h3>\n<p><img src=\"https://vip2.loli.io/2021/08/08/vs2mDg5KCO61n8X.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<p>CCF 预置在 NOI Linux 2.0 中的 VSCode 只能当一个编辑器，并且并没有安装中文语言包和完整的 C/C++ 扩展，处于半残状态。</p>\n<h3 id=\"sublime-text\"><a class=\"anchor\" href=\"#sublime-text\"></a>Sublime Text</h3>\n<p><img src=\"https://vip1.loli.io/2021/08/08/TuEGMtsYcndIoNm.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<p>相比于 VSCode ，NOI Linux 预装的 Sublime Text 的自动补全功能在始终离线的环境下依旧能正常工作，同时 Sublime Text 也支持单文件编译运行，颜值也不低，写起代码来很舒服。</p>\n<h3 id=\"code-blocks\"><a class=\"anchor\" href=\"#code-blocks\"></a>Code::Blocks</h3>\n<p><img src=\"https://vip1.loli.io/2021/08/08/J598DiCRqthEgTS.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<p>Code::Blocks 是一个免费、开源、跨平台的集成开发环境，可以在 <a href=\"https://www.codeblocks.org/\">codeblocks.org</a> 上找到系统对应版本的 Code::Blocks 预编译二进制包及其源码。</p>\n<p>NOI Linux 中内置的 Code::Blocks 的自动补全、代码提示等功能均能正常使用，且不需要网络连接。</p>\n<h3 id=\"nano\"><a class=\"anchor\" href=\"#nano\"></a>Nano</h3>\n<p><img src=\"https://vip2.loli.io/2021/08/08/9BrALjlHxGK54kR.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<p>关于 Nano 此处就不再过多叙述，可以在 <a href=\"https://nano-editor.org\">The GNU nano homepage</a> 上找到系统对应版本的 Nano 预编译二进制包及其源码。</p>\n<h3 id=\"emacs\"><a class=\"anchor\" href=\"#emacs\"></a>Emacs</h3>\n<p><img src=\"https://vip2.loli.io/2021/08/08/FQdGqx8bv2oZNJL.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<p>笔者并没有深度体验过 Emacs ，所以不做过多评价，在这里推荐一篇入门教程：<a href=\"https://liujiacai.net/blog/2020/11/25/why-emacs/\">Emacs 入门指南：Why &amp; How - Keep Coding</a> 。</p>\n<p>可以在 <a href=\"https://www.gnu.org/software/emacs/\">GNU Emacs</a> 找到系统对应版本的 Emacs 预编译二进制包及其源码。</p>\n<h3 id=\"vim\"><a class=\"anchor\" href=\"#vim\"></a>Vim</h3>\n<p><img src=\"https://vip1.loli.io/2021/08/08/aN9xjIneAYByEXv.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<p>Vim 还是老样子，可以在 <a href=\"https://www.vim.org\">vim.org</a> 上找到系统对应版本的 Vim 预编译二进制包及其源码，关于 Vim 的使用请参阅 <a href=\"http://linux.vbird.org/linux_basic/0310vi.php\">第九章、vim 程式編輯器 - 鳥哥的 Linux 私房菜</a>。</p>\n<h3 id=\"编译器\"><a class=\"anchor\" href=\"#编译器\"></a>编译器</h3>\n<p><img src=\"https://vip1.loli.io/2021/08/07/lWviXCj9Txqgmr8.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<blockquote>\n<p>使用 <code>g++ -dM -E -x c++ /dev/null | grep -F __cplusplus</code> 命令可以查看编译器默认使用的 C++ 标准。</p>\n</blockquote>\n<p>通过上图可以得出 NOI Linux 自带的编译器默认的 C++ 标准是 C++ 14 ，希望 CCF 在比赛评测的时候不要添加 <code>--std=c++98</code> ，同时选手也需要做好无法使用 C++ 14 特性的准备。</p>\n<h3 id=\"对拍\"><a class=\"anchor\" href=\"#对拍\"></a>对拍</h3>\n<p>NOI Linux 2.0 依旧安装了 Arbiter 评测系统，但是由于系统内置了 Python ，所以可以自行编写对拍程序。</p>\n<h2 id=\"后记\"><a class=\"anchor\" href=\"#后记\"></a>后记</h2>\n<p>NOI Linux 的本次更新使得 NOI Linux 系统更加地人性化、更加适合 OIer 们的使用。美中不足的一点是此版本的 NOI Linux 仍然没有卸载 <code>openssh-client</code> 软件包。</p>\n<h2 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\"></a>参考资料</h2>\n<ol>\n<li><a href=\"https://noi.cn/gynoi/jsgz/2021-07-16/732450.shtml\">NOI Linux 2.0发布，将于9月1日起正式启用！ - noi.cn</a></li>\n<li><a href=\"https://docs.vmware.com/cn/VMware-Tools/11.3.0/com.vmware.vsphere.vmwaretools.doc/GUID-C48E1F14-240D-4DD1-8D4C-25B6EBE4BB0F.html\">安装 Open VM Tools - VMware Tools - VMware Docs</a></li>\n</ol>\n",
            "tags": [
                "Linux",
                "VMware",
                "OI"
            ]
        },
        {
            "id": "https://blog.baoshuo.ren/post/vps-cloudflare-warp/",
            "url": "https://blog.baoshuo.ren/post/vps-cloudflare-warp/",
            "title": "使用 Cloudflare Warp 为单栈 VPS 添加双栈网络访问",
            "date_published": "2021-07-15T09:57:25.000Z",
            "content_html": "<p><a href=\"https://blog.cloudflare.com/1111-warp-better-vpn/\">Warp</a> 是 Cloudflare 提供的一项基于 WireGuard 的网络流量安全及加速服务，能够让你通过连接到 Cloudflare 的边缘节点实现隐私保护及链路优化。</p>\n<span id=\"more\"></span>\n<p>由于 Cloudflare 官方的 <a href=\"https://developers.cloudflare.com/warp-client/setting-up/linux\">Warp Client</a> 过于臃肿，导致我看到安装包大小后就决定直接放弃安装，于是我选择了 <a href=\"https://github.com/ViRb3/wgcf\">ViRb3/wgcf</a> 替代。</p>\n<p><img src=\"https://vip1.loli.io/2021/07/15/dHClLqSsvDKbrBc.png\" alt=\"使用 apt 安装 cloudflare-warp 时的提示\" loading=\"lazy\" data-action=\"zoom\"><span class=\"image-description\">使用 apt 安装 cloudflare-warp 时的提示</span></p>\n<h2 id=\"安装依赖\"><a class=\"anchor\" href=\"#安装依赖\"></a>安装依赖</h2>\n<p>可以前往 <a href=\"https://github.com/ViRb3/wgcf/releases/latest\">Releases 页面</a> 下载编译好的二进制文件以供使用。</p>\n<p>也可使用如下命令安装：</p>\n<pre><code class=\"highlight bash\">curl -Ls https://git.io/wgcf-installer.sh | bash</code></pre>\n<p>安装好之后运行 <code>wgcf --help</code> ，得到类似下图的输出即为安装成功：</p>\n<p><img src=\"https://vip1.loli.io/2021/07/15/lDaywAzQGd8HI9S.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<p>另外还需按照 <a href=\"https://www.wireguard.com/install/\">WireGuard 官网</a> 上的说明安装 WireGuard 。</p>\n<p>根据需求可能还需要安装 <code>resolvconf</code> 。</p>\n<h2 id=\"生成-wireguard-配置文件\"><a class=\"anchor\" href=\"#生成-wireguard-配置文件\"></a>生成 WireGuard 配置文件</h2>\n<p>先使用 <code>wgcf register</code> 命令注册 Warp 。</p>\n<p><img src=\"https://vip2.loli.io/2021/07/15/MYT5bkX4r2pGHUv.png\" alt=\"使用键盘上的方向键选择 &quot;Yes&quot; 并回车确认\" loading=\"lazy\" data-action=\"zoom\"><span class=\"image-description\">使用键盘上的方向键选择 &quot;Yes&quot; 并回车确认</span></p>\n<p>注册成功后的提示：</p>\n<p><img src=\"https://vip2.loli.io/2021/07/15/y4homkVbqsr9PYj.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<p>之后使用 <code>wgcf generate</code> 命令生成配置文件。</p>\n<p><img src=\"https://vip1.loli.io/2021/07/15/3zWUZYTdGhn9qkP.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<h2 id=\"修改-wireguard-配置文件\"><a class=\"anchor\" href=\"#修改-wireguard-配置文件\"></a>修改 WireGuard 配置文件</h2>\n<p>这是一份生成出来的配置文件：</p>\n<pre><code class=\"highlight ini\"><span class=\"section\">[Interface]</span>\n<span class=\"attr\">PrivateKey</span> = ******\n<span class=\"attr\">Address</span> = <span class=\"number\">172.16</span>.*.*/<span class=\"number\">32</span>\n<span class=\"attr\">Address</span> = fd01:******/<span class=\"number\">128</span>\n<span class=\"attr\">DNS</span> = <span class=\"number\">1.1</span>.<span class=\"number\">1.1</span>\n<span class=\"attr\">MTU</span> = <span class=\"number\">1280</span>\n\n<span class=\"section\">[Peer]</span>\n<span class=\"attr\">PublicKey</span> = ******\n<span class=\"attr\">AllowedIPs</span> = <span class=\"number\">0.0</span>.<span class=\"number\">0.0</span>/<span class=\"number\">0</span>\n<span class=\"attr\">AllowedIPs</span> = ::/<span class=\"number\">0</span>\n<span class=\"attr\">Endpoint</span> = engage.cloudflareclient.com:<span class=\"number\">2408</span></code></pre>\n<ul>\n<li>添加 IPv4 网络访问\n<ol>\n<li>删去 <code>[Interface]</code> 中的 <code>Address = fd01:******/128</code> ；</li>\n<li>删去 <code>[Peer]</code> 中的 <code>AllowedIPs = ::/0</code> ；</li>\n<li>将 Endpoint 的域名替换为解析出来的 IPv6 地址，如 <code>[2606:4700:d0::a29f:c001]:2408</code> 。</li>\n</ol>\n</li>\n<li>添加 IPv6 网络访问\n<ol>\n<li>删去 <code>[Interface]</code> 中的 <code>Address = 172.16.*.*/32</code> ；</li>\n<li>删去 <code>[Peer]</code> 中的 <code>AllowedIPs = 0.0.0.0/0</code> ；</li>\n<li>将 Endpoint 的域名替换为解析出来的 IPv4 地址，如 <code>162.159.192.1:2408</code> 。</li>\n</ol>\n</li>\n</ul>\n<p>如果不需要使用 Cloudflare 的 DNS 服务可以删去 <code>DNS = 1.1.1.1</code> 这一行，使用的话需要安装 <code>resolvconf</code> 。</p>\n<h2 id=\"启动-wireguard-隧道\"><a class=\"anchor\" href=\"#启动-wireguard-隧道\"></a>启动 WireGuard 隧道</h2>\n<p>将刚才修改好的配置文件移动到 <code>/etc/wireguard/</code> 目录下，推荐命名为 <code>wgcf.conf</code> ，下面的操作以这个文件名为准。</p>\n<p>使用 <code>systemd enable --now wg-quick@wgcf</code> 命令启动隧道，然后使用 <code>wg show wgcf</code> 命令查看隧道状态。</p>\n<p>如果在启动时出现了错误，可以使用 <code>systemd status wg-quick@wgcf</code> 命令查看错误信息，修复后使用 <code>systemd start wg-quick@wgcf</code> 启动隧道。</p>\n<p><img src=\"https://vip1.loli.io/2021/07/15/M9D1L2rFfHCPtcU.png\" alt=\"一切正常\" loading=\"lazy\" data-action=\"zoom\"><span class=\"image-description\">一切正常</span></p>\n<p>之后就可以享受双栈网络带来的便利了~</p>\n<p>注：日常如果需要重启隧道可以使用 <code>systemctl restart wg-quick@wgcf</code> 命令。</p>\n<h2 id=\"后记\"><a class=\"anchor\" href=\"#后记\"></a>后记</h2>\n<p>折腾这些的原因是我从某个 Player IX 那里嫖的 VM 没有提供 IPv4 网络访问权限，这让我日常的维护工作麻烦了很多，于是我想到了 Cloudflare Warp 这个东西。CloudFlare Warp 提供的网络访问相较于 <a href=\"http://TunnelBroker.net\">TunnelBroker.net</a> 、 <a href=\"http://TunnelBroker.ch\">TunnelBroker.ch</a> 等一众隧道要好很多，延迟并不像其他隧道那样高。</p>\n<p>在查找资料的过程中我也发现了很多博客里面所描述的内容有误或已经过时，所以综合其他文章的内容加上自己的实践，写下了这篇文章。</p>\n<h2 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\"></a>参考资料</h2>\n<ol>\n<li><a href=\"https://luotianyi.vc/5252.html\">【WGCF】连接CF WARP为服务器添加IPv4/IPv6网络 - Luminous’ Home</a></li>\n<li><a href=\"https://p3terx.com/archives/use-cloudflare-warp-to-add-extra-ipv4-or-ipv6-network-support-to-vps-servers-for-free.html\">Cloudflare WARP 给 VPS 服务器额外添加 IPv4 或 IPv6 网络获得“原生”IP - P3TERX</a></li>\n</ol>\n",
            "tags": [
                "Linux",
                "Cloudflare"
            ]
        },
        {
            "id": "https://blog.baoshuo.ren/post/linux-systemd/",
            "url": "https://blog.baoshuo.ren/post/linux-systemd/",
            "title": "Linux Systemd 入门",
            "date_published": "2021-02-11T16:06:31.000Z",
            "content_html": "<h2 id=\"systemd-简介\"><a class=\"anchor\" href=\"#systemd-简介\"></a>Systemd 简介</h2>\n<p>Systemd 是 Linux 电脑操作系统之下的一套中央化系统及设置管理程序，包括有守护进程、程序库以及应用软件，由 Lennart Poettering 带头开发。其开发目标是提供更优秀的框架以表示系统服务间的依赖关系，并依此实现系统初始化时服务的并行启动，同时达到降低 Shell 的系统开销的效果，最终代替现在常用的 System V 与 BSD 风格 init 程序。<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup></p>\n<span id=\"more\"></span>\n<p>目前绝大多数的 Linux 发行版都已采用 systemd 代替原来的 System V。</p>\n<h2 id=\"常用命令列表\"><a class=\"anchor\" href=\"#常用命令列表\"></a>常用命令列表<sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup></h2>\n<ul>\n<li>列出所有已加载的单元：<code>systemctl list-units</code></li>\n<li>查看指定的单元的配置：<code>systemctl cat [serviceName]</code> <em>(e.g. <code>systemctl cat sshd.service</code>)</em></li>\n<li>修改指定单元的配置：<code>systemctl edit [serviceName]</code> <em>(e.g. <code>systemctl edit sshd.service</code>)</em></li>\n<li>查看指定的单元的运行状态： <code>systemctl status [serviceName|pid]</code> <em>(e.g. <code>systemctl status sshd.service</code>)</em>\n<ul>\n<li>如果指定了单元名称，那么显示指定单元的运行时状态信息，以及这些单元最近的日志数据。</li>\n<li>如果指定了 PID ，那么显示指定 PID 所属单元的运行时状态信息，以及这些单元最近的日志数据。</li>\n<li>如果未指定任何单元或 PID ，那么显示整个系统的状态信息， 此时若与 <code>--all</code> 连用，则同时显示所有已加载的单元（可以用 <code>-t</code> 限定单元类型）的状态信息。</li>\n</ul>\n</li>\n<li>启动指定的单元：<code>systemctl start [serviceName]</code> <em>(e.g. <code>systemctl start sshd.service</code>)</em>\n<ul>\n<li>被指定的单元必须是已经被加载的。</li>\n</ul>\n</li>\n<li>重新启动指定的单元：<code>systemctl restart [serviceName]</code> <em>(e.g. <code>systemctl restart sshd.service</code>)</em>\n<ul>\n<li>如果指定的单元没有启动，则直接启动它们。</li>\n</ul>\n</li>\n<li>停止指定的单元：<code>systemctl stop [serviceName]</code> <em>(e.g. <code>systemctl stop sshd.service</code>)</em></li>\n<li>启用指定的单元：<code>systemctl enable [serviceName]</code> <em>(e.g. <code>systemctl enable sshd.service</code>)</em></li>\n<li>停用指定的单元：<code>systemctl disable [serviceName]</code> <em>(e.g. <code>systemctl disable sshd.service</code>)</em></li>\n<li>重新加载指定的单元的配置：<code>systemctl reload [serviceName]</code> <em>(e.g. <code>systemctl reload sshd.service</code>)</em></li>\n<li>重新加载所有已修改过的配置文件：<code>systemctl daemon-reload</code></li>\n</ul>\n<h2 id=\"开机启动\"><a class=\"anchor\" href=\"#开机启动\"></a>开机启动</h2>\n<p>对于那些支持 Systemd 的软件，安装的时候，会自动在 <code>/usr/lib/systemd/system</code> 目录添加一个配置文件。</p>\n<p>如果你想让该软件开机启动，就执行下面的命令（以 <code>sshd.service</code> 为例）。</p>\n<pre><code class=\"highlight bash\">sudo systemctl <span class=\"built_in\">enable</span> sshd.service</code></pre>\n<p>上面的命令相当于在 <code>/etc/systemd/system</code> 目录添加一个符号链接，指向 <code>/usr/lib/systemd/system</code> 里面的 <code>sshd.service</code> 文件。</p>\n<p>这是因为开机时，Systemd 只执行 <code>/etc/systemd/system</code> 目录里面的配置文件。这也意味着，如果把修改后的配置文件放在该目录，就可以达到覆盖原始配置的效果。</p>\n<h2 id=\"unit\"><a class=\"anchor\" href=\"#unit\"></a>Unit<sup class=\"footnote-ref\"><a href=\"#fn3\" id=\"fnref3\">[3]</a></sup></h2>\n<h3 id=\"配置文件\"><a class=\"anchor\" href=\"#配置文件\"></a>配置文件</h3>\n<p>对于那些没有原生支持 Systemd 的软件，可以自行编写配置文件来达到开机自启的目的。</p>\n<blockquote>\n<p>我曾经为 Sakura Frp 编写过一个脚本：<a href=\"https://getfrp.sh\">getfrp.sh</a> <sup>（<a href=\"https://gist.github.com/renbaoshuo/9c351b3e5750a2f6d453d035e0fd071a#file-getfrp-sh-L200-L213\">存档</a> 于 GitHub Gist）</sup> ，里面便是使用了自行编写配置文件的方法。</p>\n</blockquote>\n<p>以 <code>sshd.service</code> 这个配置文件为例子，来分析一下 Systemd 的配置文件：</p>\n<pre><code class=\"highlight ini\"><span class=\"comment\"># /lib/systemd/system/ssh.service</span>\n\n<span class=\"section\">[Unit]</span>\n<span class=\"attr\">Description</span>=OpenBSD Secure Shell server\n<span class=\"attr\">Documentation</span>=man:sshd(<span class=\"number\">8</span>) man:sshd_config(<span class=\"number\">5</span>)\n<span class=\"attr\">After</span>=network.target auditd.service\n<span class=\"attr\">ConditionPathExists</span>=!/etc/ssh/sshd_not_to_be_run\n\n<span class=\"section\">[Service]</span>\n<span class=\"attr\">EnvironmentFile</span>=-/etc/default/ssh\n<span class=\"attr\">ExecStartPre</span>=/usr/sbin/sshd -t\n<span class=\"attr\">ExecStart</span>=/usr/sbin/sshd -D <span class=\"variable\">$SSHD_OPTS</span>\n<span class=\"attr\">ExecReload</span>=/usr/sbin/sshd -t\n<span class=\"attr\">ExecReload</span>=/bin/kill -HUP <span class=\"variable\">$MAINPID</span>\n<span class=\"attr\">KillMode</span>=process\n<span class=\"attr\">Restart</span>=<span class=\"literal\">on</span>-failure\n<span class=\"attr\">RestartPreventExitStatus</span>=<span class=\"number\">255</span>\n<span class=\"attr\">Type</span>=notify\n<span class=\"attr\">RuntimeDirectory</span>=sshd\n<span class=\"attr\">RuntimeDirectoryMode</span>=<span class=\"number\">0755</span>\n\n<span class=\"section\">[Install]</span>\n<span class=\"attr\">WantedBy</span>=multi-user.target\n<span class=\"attr\">Alias</span>=sshd.service</code></pre>\n<p>可以看出这个文件一共有三个部分：<code>[Unit]</code>, <code>[Service]</code> 和 <code>[Install]</code> 。</p>\n<p>配置项通常是可以重复的，但靠后的配置项会取代前面同名的配置项。<br>\n因此，如果你想要将某项的设定值归零，可以在该配置所在部分的结尾添加一个空值项（如 <code>After=</code>），就将该设定归零了。</p>\n<h4 id=\"unit-启动顺序与依赖关系\"><a class=\"anchor\" href=\"#unit-启动顺序与依赖关系\"></a>[Unit]: 启动顺序与依赖关系</h4>\n<p>这个部分主要有以下几个配置项：</p>\n<ul>\n<li><code>Description</code>: 当前服务的简易说明</li>\n<li><code>Documentation</code>: 文档位置（以空格分隔）\n<ul>\n<li>该项可以是网页链接，也可以是 manpages 的名称，亦或是文件路径。</li>\n</ul>\n</li>\n<li><code>Before</code>: 在哪些服务之前启动\n<ul>\n<li>本字段不涉及依赖关系，只是说明了启动顺序</li>\n</ul>\n</li>\n<li><code>After</code>: 在哪些服务之后启动\n<ul>\n<li>本字段不涉及依赖关系，只是说明了启动顺序</li>\n<li>以 <code>sshd.service</code> 中的配置为例，该服务需要在 <code>network.target</code> 和 <code>auditd.service</code> 之后启动</li>\n</ul>\n</li>\n<li><code>Wants</code>: 弱依赖的服务\n<ul>\n<li>若被依赖的服务被停止，这个服务不需要停止</li>\n</ul>\n</li>\n<li><code>Requires</code>: 强依赖的服务\n<ul>\n<li>若被依赖的服务没有启动，则不能启动这个服务</li>\n<li>若被依赖的服务被停止，则这个服务也必须停止</li>\n</ul>\n</li>\n<li><code>Conflicts</code>: 冲突的服务\n<ul>\n<li>如果列出的服务中有一个已经运行，那么就不能启动这个服务</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"service-启动行为\"><a class=\"anchor\" href=\"#service-启动行为\"></a>[Service]: 启动行为</h4>\n<p>这个部分主要有以下几个配置项：</p>\n<ul>\n<li><code>Type</code>: 启动类型。默认值为 <code>simple</code> ，可选值如下：\n<ul>\n<li><code>simple</code>: 使 <code>ExecStart</code> 项启动的项成为主进程</li>\n<li><code>forking</code>: <code>ExecStart</code> 项将会以 <code>fork()</code> 的形式启动，此时父进程将会退出，子进程将成为主进程</li>\n<li><code>oneshot</code>: 类似于 <code>simple</code> ，但只执行一次，Systemd 会等它执行完，才启动其他服务</li>\n<li><code>dbus</code>: 类似于 <code>simple</code> ，但会等待 <code>D-Bus</code> 信号后启动</li>\n<li><code>notify</code>: 类似于 <code>simple</code> ，启动结束后会发出通知信号，然后 Systemd 再启动其他服务</li>\n<li><code>idle</code>: 类似于 <code>simple</code> ，但是要等到其他任务都执行完，才会启动该服务。\n<ul>\n<li>这个选项的其中一种使用场合是为让该服务的输出，不与其他服务的输出相混合</li>\n<li>这个选项的另外一种使用场合是执行只需要再开机的时候执行一次的程序</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>Environment</code>: 指定环境变量</li>\n<li><code>EnvironmentFile</code>: 环境变量配置文件，该文件内部的 <code>key=value</code> 形式的配置可以在当前文件中以 <code>$key</code> 获取</li>\n<li><code>ExecStart</code>: 服务启动时执行的命令</li>\n<li><code>ExecReload</code>: 服务重启时执行的命令</li>\n<li><code>ExecStop</code>: 服务停止时执行的命令</li>\n<li><code>ExecStartPre</code>: 服务启动之前执行的命令</li>\n<li><code>ExecStartPost</code>: 服务启动之后执行的命令</li>\n<li><code>ExecStopPost</code>: 服务停止之后执行的命令</li>\n<li><code>Restart</code>: 服务退出后的重启方式，默认值为 <code>no</code>\n<ul>\n<li><code>no</code>: 进程退出后不会重启</li>\n<li><code>on-success</code>: 当进程正常退出时（退出状态码为 0）重启</li>\n<li><code>on-failure</code>: 当进程非正常退出时（退出状态码不为 0、被信号终止、程序超时）重启</li>\n<li><code>on-abnormal</code>: 当进程被信号终止或程序超时时重启</li>\n<li><code>on-abort</code>: 当收到没有捕捉到的信号终止时重启</li>\n<li><code>on-watchdog</code>: 当进程超时退出时重启</li>\n<li><code>always</code>: 总是重启（不论原因）</li>\n<li>对于守护进程，推荐设为 <code>on-failure</code>。对于那些允许发生错误退出的服务，可以设为 <code>on-abnormal</code>。</li>\n</ul>\n</li>\n<li><code>RemainAfterExit</code>: 退出后是否重新启动\n<ul>\n<li>当设定为 <code>RemainAfterExit=1</code> 时，则当这个服务所属的所有程序都终止之后，此服务会再尝试启动。这对于 <code>Type=oneshot</code> 的服务很有帮助</li>\n</ul>\n</li>\n<li><code>TimeoutSec</code>: 当这个服务在启动或停止时失败进入&quot;强制结束&quot;状态的等待秒数。</li>\n<li><code>KillMode</code>: 定义 Systemd 如何停止这个服务，默认值为 <code>control-group</code>\n<ul>\n<li><code>control-group</code>: 服务停止时关闭此控制组中所有的进程</li>\n<li><code>process</code>: 服务停止时只终止主进程（ExecStart 接的后面那串指令）</li>\n<li><code>mixed</code>: 主进程将收到 <strong>SIGTERM</strong> 信号，子进程收到 <strong>SIGKILL</strong> 信号</li>\n<li><code>none</code>: 没有进程会被杀掉，只是执行服务的 stop 命令</li>\n</ul>\n</li>\n<li><code>RestartSec</code>: 表示 Systemd 重启服务之前，需要等待的秒数（默认是 100ms）</li>\n</ul>\n<p>所有的启动设置之前，都可以加上一个连词号 (<code>-</code>) ，表示 「抑制错误」 ，即发生错误的时候，不影响其他命令的执行。以 <code>sshd.service</code> 为例，文件中的 <code>EnvironmentFile=-/etc/sysconfig/sshd</code>（注意等号后面的那个连词号），表示 <code>/etc/sysconfig/sshd</code> 文件不存在，也不会抛出错误。</p>\n<h4 id=\"install-安装行为\"><a class=\"anchor\" href=\"#install-安装行为\"></a>[Install]: 安装行为</h4>\n<p>这个部分主要有以下几个配置项：</p>\n<ul>\n<li><code>WantedBy</code>: 表示该服务所在的 Target\n<ul>\n<li>一般来说，服务性质的单元都是挂在 <code>multi-user.target</code> 下的</li>\n</ul>\n</li>\n<li><code>Also</code>: 当该服务被启用时需要同时启用的单元</li>\n<li><code>Alias</code>: 指定创建软链接时链接至本单元配置文件的别名文件</li>\n</ul>\n<h3 id=\"模板实例\"><a class=\"anchor\" href=\"#模板实例\"></a>模板实例</h3>\n<p>此处以 <code>getty@.service</code> 文件为例，来分析一下它是如何做到使用一个配置文件启动多个服务的：</p>\n<pre><code class=\"highlight ini\"><span class=\"comment\"># /lib/systemd/system/getty@.service</span>\n<span class=\"comment\">#</span>\n<span class=\"comment\">#  SPDX-License-Identifier: LGPL-2.1+</span>\n<span class=\"comment\">#</span>\n<span class=\"comment\">#  This file is part of systemd.</span>\n<span class=\"comment\">#</span>\n<span class=\"comment\">#  systemd is free software; you can redistribute it and/or modify it</span>\n<span class=\"comment\">#  under the terms of the GNU Lesser General Public License as published by</span>\n<span class=\"comment\">#  the Free Software Foundation; either version 2.1 of the License, or</span>\n<span class=\"comment\">#  (at your option) any later version.</span>\n\n<span class=\"section\">[Unit]</span>\n<span class=\"attr\">Description</span>=Getty <span class=\"literal\">on</span> %I\n<span class=\"attr\">Documentation</span>=man:agetty(<span class=\"number\">8</span>) man:systemd-getty-generator(<span class=\"number\">8</span>)\n<span class=\"attr\">Documentation</span>=http://<span class=\"number\">0</span>pointer.de/blog/projects/serial-console.html\n<span class=\"attr\">After</span>=systemd-user-sessions.service plymouth-quit-wait.service getty-pre.target\n<span class=\"attr\">After</span>=rc-local.service\n\n<span class=\"comment\"># If additional gettys are spawned during boot then we should make</span>\n<span class=\"comment\"># sure that this is synchronized before getty.target, even though</span>\n<span class=\"comment\"># getty.target didn&#x27;t actually pull it in.</span>\n<span class=\"attr\">Before</span>=getty.target\n<span class=\"attr\">IgnoreOnIsolate</span>=<span class=\"literal\">yes</span>\n\n<span class=\"comment\"># IgnoreOnIsolate causes issues with sulogin, if someone isolates</span>\n<span class=\"comment\"># rescue.target or starts rescue.service from multi-user.target or</span>\n<span class=\"comment\"># graphical.target.</span>\n<span class=\"attr\">Conflicts</span>=rescue.service\n<span class=\"attr\">Before</span>=rescue.service\n\n<span class=\"comment\"># On systems without virtual consoles, don&#x27;t start any getty. Note</span>\n<span class=\"comment\"># that serial gettys are covered by serial-getty@.service, not this</span>\n<span class=\"comment\"># unit.</span>\n<span class=\"attr\">ConditionPathExists</span>=/dev/tty0\n\n<span class=\"section\">[Service]</span>\n<span class=\"comment\"># the VT is cleared by TTYVTDisallocate</span>\n<span class=\"comment\"># The &#x27;-o&#x27; option value tells agetty to replace &#x27;login&#x27; arguments with an</span>\n<span class=\"comment\"># option to preserve environment (-p), followed by &#x27;--&#x27; for safety, and then</span>\n<span class=\"comment\"># the entered username.</span>\n<span class=\"attr\">ExecStart</span>=-/sbin/agetty -o <span class=\"string\">&#x27;-p -- \\\\u&#x27;</span> --noclear %I <span class=\"variable\">$TERM</span>\n<span class=\"attr\">Type</span>=idle\n<span class=\"attr\">Restart</span>=always\n<span class=\"attr\">RestartSec</span>=<span class=\"number\">0</span>\n<span class=\"attr\">UtmpIdentifier</span>=%I\n<span class=\"attr\">TTYPath</span>=/dev/%I\n<span class=\"attr\">TTYReset</span>=<span class=\"literal\">yes</span>\n<span class=\"attr\">TTYVHangup</span>=<span class=\"literal\">yes</span>\n<span class=\"attr\">TTYVTDisallocate</span>=<span class=\"literal\">yes</span>\n<span class=\"attr\">KillMode</span>=process\n<span class=\"attr\">IgnoreSIGPIPE</span>=<span class=\"literal\">no</span>\n<span class=\"attr\">SendSIGHUP</span>=<span class=\"literal\">yes</span>\n\n<span class=\"comment\"># Unset locale for the console getty since the console has problems</span>\n<span class=\"comment\"># displaying some internationalized messages.</span>\n<span class=\"attr\">UnsetEnvironment</span>=LANG LANGUAGE LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_MESSAGES LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT LC_IDENTIFICATION\n\n<span class=\"section\">[Install]</span>\n<span class=\"attr\">WantedBy</span>=getty.target\n<span class=\"attr\">DefaultInstance</span>=tty1</code></pre>\n<p>运行 <code>systemctl status getty@tty1.service</code> 命令，可以看到如下图所示的输出：</p>\n<p><img src=\"https://vip1.loli.io/2021/02/11/lhw1BzOUb7TRDrq.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<p>不难发现图中标橙色的字符与上方配置文件中的 <code>%I</code> 相对应，并且配置文件的名称也不是 <code>getty@tty1.service</code> ，而是 <code>getty@.service</code> ，这种配置文件叫做 「模板实例」 。</p>\n<p>启动时只需要在 <code>@</code> 后面添加需要填入 <code>%I</code> 位置的参数即可，如 <code>getty@tty9.service</code> 。</p>\n<h2 id=\"target\"><a class=\"anchor\" href=\"#target\"></a>Target</h2>\n<p>一般来说，常用的 Target 有两个：一个是 <code>multi-user.target</code> ，表示多用户命令行状态；另一个是 <code>graphical.target</code> ，表示图形用户状态（它依赖于 <code>multi-user.target</code>），这一点和 SysVinit 的运行级别很是相似。</p>\n<p>官方提供了一张非常清晰的 Target 依赖关系图：</p>\n<p><img src=\"https://vip2.loli.io/2021/02/11/ubmqlLdiGeCtUg7.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<p>图源：<a href=\"https://www.freedesktop.org/software/systemd/man/bootup.html#System%20Manager%20Bootup\">https://www.freedesktop.org/software/systemd/man/bootup.html#System Manager Bootup</a></p>\n<h3 id=\"配置文件-t2\"><a class=\"anchor\" href=\"#配置文件-t2\"></a>配置文件</h3>\n<p>以 <code>multi-user.target</code> 这个文件为例子，来简要说明一下 Target 的配置文件中的主要项目：</p>\n<pre><code class=\"highlight ini\"><span class=\"comment\"># /lib/systemd/system/multi-user.target</span>\n<span class=\"comment\">#</span>\n<span class=\"comment\">#  SPDX-License-Identifier: LGPL-2.1+</span>\n<span class=\"comment\">#</span>\n<span class=\"comment\">#  This file is part of systemd.</span>\n<span class=\"comment\">#</span>\n<span class=\"comment\">#  systemd is free software; you can redistribute it and/or modify it</span>\n<span class=\"comment\">#  under the terms of the GNU Lesser General Public License as published by</span>\n<span class=\"comment\">#  the Free Software Foundation; either version 2.1 of the License, or</span>\n<span class=\"comment\">#  (at your option) any later version.</span>\n\n<span class=\"section\">[Unit]</span>\n<span class=\"attr\">Description</span>=Multi-User System\n<span class=\"attr\">Documentation</span>=man:systemd.special(<span class=\"number\">7</span>)\n<span class=\"attr\">Requires</span>=basic.target\n<span class=\"attr\">Conflicts</span>=rescue.service rescue.target\n<span class=\"attr\">After</span>=basic.target rescue.service rescue.target\n<span class=\"attr\">AllowIsolate</span>=<span class=\"literal\">yes</span></code></pre>\n<ul>\n<li><code>Requires</code>: 要求于某个 Target 一起运行</li>\n<li><code>Conflicts</code>: 冲突的 Target</li>\n<li><code>After</code>: 在哪些 Target 之后启动</li>\n<li><code>AllowIsolate</code>: 是否允许使用 <code>systemctl isolate</code> 命令切换到这个 Target</li>\n</ul>\n<h2 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\"></a>参考资料</h2>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><a href=\"https://en.wikipedia.org/wiki/Systemd\">Systemd - Wikipedia</a> <sup>（<a href=\"https://web.archive.org/web/20210210150200/https://en.wikipedia.org/wiki/Systemd\">存档</a> 于 <a href=\"https://archive.org\">互联网档案馆</a>）</sup> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p><a href=\"https://manpages.ubuntu.com/manpages/bionic/zh_CN/man1/systemctl.1.html\">Systemd - Ubuntu Manpages</a> <sup>（<a href=\"https://web.archive.org/web/20210210150518/https://manpages.ubuntu.com/manpages/bionic/zh_CN/man1/systemctl.1.html\">存档</a> 于 <a href=\"https://archive.org\">互联网档案馆</a>）</sup> <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn3\" class=\"footnote-item\"><p><a href=\"http://linux.vbird.org/linux_basic/0560daemons.php\">第十七章 认识系统服务(daemons) - 鸟哥的Linux私房菜</a> <sup>（<a href=\"https://web.archive.org/web/20200810204650/http://linux.vbird.org/linux_basic/0560daemons.php\">存档</a> 于 <a href=\"https://archive.org\">互联网档案馆</a>）</sup> <a href=\"#fnref3\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "https://blog.baoshuo.ren/post/tencent-cloud-cvm-dual-ip/",
            "url": "https://blog.baoshuo.ren/post/tencent-cloud-cvm-dual-ip/",
            "title": "给腾讯云服务器免费增加第二个 IP",
            "date_published": "2020-08-20T05:22:47.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\"></a>前言</h2>\n<p>良心云果然是良心云，增加了一个IP四舍五入居然不要钱，不过还是要登进系统配置一下双IP的。</p>\n<span id=\"more\"></span>\n<p><img src=\"https://vip2.loli.io/2020/11/26/rAyvBmDw2bdMP6t.jpg\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<p>和客服的对话</p>\n<h2 id=\"增加网卡-公网ip\"><a class=\"anchor\" href=\"#增加网卡-公网ip\"></a>增加网卡&amp;公网IP</h2>\n<p><img src=\"https://vip2.loli.io/2020/11/26/SWwlbLRaHACnuBz.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<p>点击按钮新建一个弹性网卡并绑定</p>\n<p><img src=\"https://vip1.loli.io/2020/11/26/sJqBfdbv4eRzZFm.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<p>绑定完以后可以在服务器的弹性网卡管理页面看到详情</p>\n<p><img src=\"https://vip1.loli.io/2020/11/26/ivPFgfH69XTCo8Z.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<p>点击新建的弹性网卡，进入管理页面，并记录下这张网卡的<strong>内网IP</strong>，稍后会用到</p>\n<p><img src=\"https://vip1.loli.io/2020/11/26/FAy8U5lpzNtuMTi.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<p>点击绑定按钮，并申请一个弹性公网IP</p>\n<p><img src=\"https://vip2.loli.io/2020/11/26/AbZ4vTwr1UCdz2n.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\">\n<img src=\"https://vip2.loli.io/2020/11/26/2G5jsdTSZrocqwh.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<p>此时弹性公网IP已经绑定成功，并且可以看到已经变为不收取IP资源费的状态了</p>\n<p><img src=\"https://vip1.loli.io/2020/11/26/x8q7I5E2dMSDt4B.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<p>查看主网卡的<strong>内网IP</strong>，并记录下这个IP，稍后会用到</p>\n<h2 id=\"配置服务器的网络设置\"><a class=\"anchor\" href=\"#配置服务器的网络设置\"></a>配置服务器的网络设置</h2>\n<p>使用 <code>ip addr</code> 查看网卡名称，并记录下来</p>\n<p><img src=\"https://vip2.loli.io/2020/11/26/Ofh8CzvnYKPGsH7.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<p>切换到网卡配置文件目录</p>\n<pre><code class=\"highlight bash\"><span class=\"built_in\">cd</span> /etc/sysconfig/network-scripts/</code></pre>\n<p>编辑 <code>ifcfg-eth0</code> 文件，将下方内容修改后填入</p>\n<pre><code class=\"highlight ini\"><span class=\"attr\">DEVICE</span>=<span class=\"string\">&quot;eth0&quot;</span>             <span class=\"comment\"># 弹性网卡名称</span>\n<span class=\"attr\">NM_CONTROLLED</span>=<span class=\"string\">&quot;yes&quot;</span>       <span class=\"comment\"># 是否由 Network Manager 控制该网络接口</span>\n<span class=\"attr\">ONBOOT</span>=<span class=\"string\">&quot;yes&quot;</span>              <span class=\"comment\"># 系统启动时是否激活</span>\n<span class=\"attr\">IPADDR</span>=<span class=\"string\">&quot;172.21.0.10&quot;</span>      <span class=\"comment\"># 弹性网卡上的 IP 地址</span>\n<span class=\"attr\">NETMASK</span>=<span class=\"string\">&quot;255.255.240.0&quot;</span>   <span class=\"comment\"># 子网掩码</span>\n<span class=\"attr\">GATEWAY</span>=<span class=\"string\">&quot;172.21.0.1&quot;</span>      <span class=\"comment\"># 网关</span></code></pre>\n<ul>\n<li>其中 <code>IPADDR</code> 填写主网卡的<strong>内网IP</strong>。</li>\n<li>子网掩码可以使用 <a href=\"https://www.v2ex.com/tools/ipv4\">V2EX 提供的 IPv4 子网查询工具</a> 查询对应的子网。</li>\n<li>网关根据创建网卡时选择的子网而定。</li>\n</ul>\n<p>新建 <code>ifcfg-eth1</code> 文件，将下方内容修改后填入</p>\n<pre><code class=\"highlight ini\"><span class=\"attr\">DEVICE</span>=<span class=\"string\">&quot;eth1&quot;</span>             <span class=\"comment\"># 需配置的弹性网卡名称（此处是新添加的网卡名称）</span>\n<span class=\"attr\">NM_CONTROLLED</span>=<span class=\"string\">&quot;yes&quot;</span>       <span class=\"comment\"># 是否由 Network Manager 控制该网络接口</span>\n<span class=\"attr\">ONBOOT</span>=<span class=\"string\">&quot;yes&quot;</span>              <span class=\"comment\"># 系统启动时是否激活</span>\n<span class=\"attr\">IPADDR</span>=<span class=\"string\">&quot;172.21.0.12&quot;</span>      <span class=\"comment\"># 弹性网卡上的 IP 地址</span>\n<span class=\"attr\">NETMASK</span>=<span class=\"string\">&quot;255.255.240.0&quot;</span>   <span class=\"comment\"># 子网掩码</span>\n<span class=\"comment\"># GATEWAY=&quot;172.21.0.1&quot;    # 网关（若与eth0的网关不同，需要删除注释并修改为正确的网关）</span></code></pre>\n<ul>\n<li>其中 <code>IPADDR</code> 填写新添加网卡的<strong>内网IP</strong>。</li>\n<li>子网掩码可以 <a href=\"https://www.v2ex.com/tools/ipv4\">V2EX 提供的 IPv4 子网查询工具</a> 查询对应的子网。</li>\n<li>网关根据创建网卡时选择的子网而定。</li>\n</ul>\n<p>保存后重启网络服务。</p>\n<pre><code class=\"highlight bash\">service network restart</code></pre>\n<p><img src=\"https://vip1.loli.io/2020/11/26/ReBSM4C9oF2HbVi.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<h2 id=\"配置路由（可选）\"><a class=\"anchor\" href=\"#配置路由（可选）\"></a>配置路由（可选）</h2>\n<blockquote>\n<p>按照上述步骤配置好后，Linux 还是默认都从主网卡发包。\n您可通过策略路由让报文从哪个网卡进，并从该网卡返回。</p>\n</blockquote>\n<h3 id=\"创建路由表\"><a class=\"anchor\" href=\"#创建路由表\"></a>创建路由表</h3>\n<pre><code class=\"highlight bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;10 t1&quot;</span> &gt;&gt; /etc/iproute2/rt_tables\n<span class=\"built_in\">echo</span> <span class=\"string\">&quot;20 t2&quot;</span> &gt;&gt; /etc/iproute2/rt_tables</code></pre>\n<h3 id=\"添加默认路由\"><a class=\"anchor\" href=\"#添加默认路由\"></a>添加默认路由</h3>\n<pre><code class=\"highlight bash\">ip route add default dev eth0 via 172.21.0.1 table 10\nip route add default dev eth1 via 172.21.0.1 table 20</code></pre>\n<blockquote>\n<p>上述两个命令中，172.21.0.1要分别替换成主网卡所属子网的网关，以及辅助网卡所属子网的网关。</p>\n</blockquote>\n<h3 id=\"配置策略路由\"><a class=\"anchor\" href=\"#配置策略路由\"></a>配置策略路由</h3>\n<pre><code class=\"highlight bash\">ip rule add from 172.21.0.10 table 10\nip rule add from 172.21.0.12 table 20</code></pre>\n",
            "tags": [
                "网络",
                "Linux"
            ]
        }
    ]
}