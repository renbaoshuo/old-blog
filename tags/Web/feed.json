{
    "version": "https://jsonfeed.org/version/1",
    "title": "宝硕博客 • All posts by \"web\" tag",
    "description": "宝硕博客 —— Baoshuo (@renbaoshuo) 随便写东西的地方，以技术向博文为主，生活向博文为辅。",
    "home_page_url": "https://blog.baoshuo.ren",
    "items": [
        {
            "id": "https://blog.baoshuo.ren/post/workbox-service-worker/",
            "url": "https://blog.baoshuo.ren/post/workbox-service-worker/",
            "title": "初识 Service Worker —— 使用 Workbox 快速开发 Service Worker",
            "date_published": "2021-02-27T16:02:04.000Z",
            "content_html": "<p>对于优化前端加载性能这个问题，许多人以 http-cache、异步加载、304 状态码、文件压缩、CDN 等方法来解决。<br>\n其实除了这些方法，还有一个比它们都强大的，那就是 Service Worker 。</p>\n<span id=\"more\"></span>\n<p>我们可以使用 Google Chrome 团队的 <a href=\"https://github.com/GoogleChrome/workbox\">Workbox</a> 来实现 Service Worker 的快速开发。</p>\n<h2 id=\"注册-service-worker\"><a class=\"anchor\" href=\"#注册-service-worker\"></a>注册 Service Worker</h2>\n<p>在页面中添加以下内容以注册一个 Service Worker 。</p>\n<pre><code class=\"highlight html\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span>\n<span class=\"javascript\">    <span class=\"comment\">// 检测是否支持 Service Worker</span></span>\n<span class=\"javascript\">    <span class=\"comment\">// 也可使用 navigator.serviceWorker 判断</span></span>\n<span class=\"javascript\">    <span class=\"keyword\">if</span> (<span class=\"string\">&#x27;serviceWorker&#x27;</span> <span class=\"keyword\">in</span> navigator) &#123; </span>\n<span class=\"javascript\">        <span class=\"comment\">// 为了保证首屏渲染性能，在页面 onload 完之后注册 Service Worker</span></span>\n<span class=\"javascript\">        <span class=\"comment\">// 不使用 window.onload 以免冲突   </span></span>\n<span class=\"javascript\">        <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">&#x27;load&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span>\n<span class=\"javascript\">            navigator.serviceWorker.register(<span class=\"string\">&#x27;/sw.js&#x27;</span>);</span>\n<span class=\"javascript\">        &#125;);</span>\n<span class=\"javascript\">    &#125;</span>\n<span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></code></pre>\n<p>当然，在这之前你需要先有一个 Service Worker 的代码 <code>/sw.js</code> 。</p>\n<p>你可以在这个文件中写入以下代码来检测是否成功地注册了 Service Worker 。</p>\n<pre><code class=\"highlight javascript\"><span class=\"built_in\">console</span>.clear();\n<span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Successful registered service worker.&#x27;</span>);</code></pre>\n<p><img src=\"https://vip2.loli.io/2021/02/28/Eu4mVIC2kNrUgiL.png\" alt=\"控制台输出\" loading=\"lazy\" data-action=\"zoom\"><span class=\"image-description\">控制台输出</span></p>\n<h2 id=\"引入-workbox\"><a class=\"anchor\" href=\"#引入-workbox\"></a>引入 Workbox</h2>\n<p>你可以使用 Google 提供的 CDN 来引入 Workbox 。<br>\n只需在 <code>sw.js</code> 的开头写入以下内容即可：</p>\n<pre><code class=\"highlight javascript\">importScripts(<span class=\"string\">&#x27;https://storage.googleapis.com/workbox-cdn/releases/6.1.1/workbox-sw.js&#x27;</span>);</code></pre>\n<p>如果你觉得 Google 的 CDN 不太靠谱的话，可以使用 <code>workbox-cli</code> 将资源存在本地：</p>\n<pre><code class=\"highlight bash\">npm i workbox-cli -g\nworkbox copyLibraries &#123;path/to/workbox/&#125;</code></pre>\n<p>这时需要在 <code>sw.js</code> 的开头将上方写入的内容替换为以下内容即可：</p>\n<pre><code class=\"highlight javascript\">importScripts(<span class=\"string\">&#x27;&#123;path/to&#125;/workbox/workbox-sw.js&#x27;</span>);\nworkbox.setConfig(&#123;\n    <span class=\"attr\">modulePathPrefix</span>: <span class=\"string\">&#x27;&#123;path/to&#125;/workbox/&#x27;</span>\n&#125;);</code></pre>\n<h2 id=\"workbox-策略\"><a class=\"anchor\" href=\"#workbox-策略\"></a>Workbox 策略</h2>\n<h3 id=\"stale-while-revalidate（重新验证时过期）\"><a class=\"anchor\" href=\"#stale-while-revalidate（重新验证时过期）\"></a>Stale While Revalidate（重新验证时过期）</h3>\n<p><img src=\"https://vip1.loli.io/2021/02/28/rx8zafbqPe1JnkX.png\" alt=\"工作流程示意图\" loading=\"lazy\" data-action=\"zoom\"><span class=\"image-description\">工作流程示意图</span></p>\n<p>此策略将对网络请求使用缓存来响应（如果有），并在后台更新缓存。如果未缓存，它将等待网络响应并使用它。<br>\n这是一个相当安全的策略，因为这意味着用户会定期更新其缓存。这种策略的缺点是：它总是从网络上请求资源，较为浪费用户的带宽。</p>\n<pre><code class=\"highlight javascript\">registerRoute(\n    <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(matchString),\n    <span class=\"keyword\">new</span> workbox.strategies.StaleWhileRevalidate()\n);</code></pre>\n<h3 id=\"network-first（网络优先）\"><a class=\"anchor\" href=\"#network-first（网络优先）\"></a>Network First（网络优先）</h3>\n<p><img src=\"https://vip2.loli.io/2021/02/28/9ViWk1ZyU4CuDxE.png\" alt=\"工作流程示意图\" loading=\"lazy\" data-action=\"zoom\"><span class=\"image-description\">工作流程示意图</span></p>\n<p>此策略将尝试首先从网络获得响应。如果收到响应，它将把它传递给浏览器，并将其保存到缓存中。如果网络请求失败，将使用最后一个缓存的响应。</p>\n<pre><code class=\"highlight javascript\">registerRoute(\n    <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(matchString),\n    <span class=\"keyword\">new</span> workbox.strategies.NetworkFirst()\n);</code></pre>\n<h3 id=\"cache-first（缓存优先）\"><a class=\"anchor\" href=\"#cache-first（缓存优先）\"></a>Cache First（缓存优先）</h3>\n<p><img src=\"https://vip1.loli.io/2021/02/28/jkn4Y3mNCRZrSdX.png\" alt=\"工作流程示意图\" loading=\"lazy\" data-action=\"zoom\"><span class=\"image-description\">工作流程示意图</span></p>\n<p>此策略将首先检查缓存中是否有响应，如果有响应，则使用该策略。如果请求不在缓存中，则将使用网络，并将任何有效响应添加到缓存中，然后再传递给浏览器。</p>\n<pre><code class=\"highlight javascript\">registerRoute(\n    <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(matchString),\n    <span class=\"keyword\">new</span> workbox.strategies.CacheFirst()\n);</code></pre>\n<h3 id=\"network-only（仅网络）\"><a class=\"anchor\" href=\"#network-only（仅网络）\"></a>Network Only（仅网络）</h3>\n<p><img src=\"https://vip2.loli.io/2021/02/28/cQYTlvie1dX8hOF.png\" alt=\"工作流程示意图\" loading=\"lazy\" data-action=\"zoom\"><span class=\"image-description\">工作流程示意图</span></p>\n<p>强制响应来自网络。</p>\n<pre><code class=\"highlight javascript\">registerRoute(\n    <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(matchString),\n    <span class=\"keyword\">new</span> workbox.strategies.NetworkOnly()\n);</code></pre>\n<h3 id=\"cache-only（仅缓存）\"><a class=\"anchor\" href=\"#cache-only（仅缓存）\"></a>Cache Only（仅缓存）</h3>\n<p><img src=\"https://vip1.loli.io/2021/02/28/71Sw5tTaBQKl8ri.png\" alt=\"工作流程示意图\" loading=\"lazy\" data-action=\"zoom\"><span class=\"image-description\">工作流程示意图</span></p>\n<p>强制响应来自缓存。</p>\n<pre><code class=\"highlight javascript\">registerRoute(\n    <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(matchString),\n    <span class=\"keyword\">new</span> workbox.strategies.CacheOnly()\n);</code></pre>\n<h3 id=\"策略配置\"><a class=\"anchor\" href=\"#策略配置\"></a>策略配置</h3>\n<p>可以通过定义要使用的插件来自定义路由的行为。</p>\n<pre><code class=\"highlight javascript\"><span class=\"keyword\">new</span> workbox.strategies.StaleWhileRevalidate(&#123;\n    <span class=\"comment\">// Use a custom cache for this route.</span>\n    <span class=\"attr\">cacheName</span>: <span class=\"string\">&#x27;my-cache-name&#x27;</span>,\n\n    <span class=\"comment\">// Add an array of custom plugins (e.g. `ExpirationPlugin`).</span>\n    <span class=\"attr\">plugins</span>: [\n        ...\n    ]\n&#125;);</code></pre>\n<h2 id=\"workbox-中的自定义策略\"><a class=\"anchor\" href=\"#workbox-中的自定义策略\"></a>Workbox 中的自定义策略</h2>\n<p>在某些情况下，您可能希望使用自己的其他策略来响应请求，或者只是通过模板在 Service Worker 中生成请求。<br>\n为此可以提供一个异步返回 <code>Response</code> 对象的函数 <code>handler</code> 。</p>\n<pre><code class=\"highlight javascript\"><span class=\"keyword\">const</span> handler = <span class=\"keyword\">async</span> (&#123; url, event &#125;) =&gt; &#123;\n  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Response(<span class=\"string\">`Custom handler response.`</span>);\n&#125;;\n\nworkbox.routing.registerRoute(\n    <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(matchString),\n    handler\n);</code></pre>\n<p>需要注意的是，如果在 <code>match</code> 回调中返回一个值，它将 <code>handler</code> 作为 <code>params</code> 参数传递到回调中。</p>\n<pre><code class=\"highlight javascript\"><span class=\"keyword\">const</span> match = <span class=\"function\">(<span class=\"params\">&#123; url, event &#125;</span>) =&gt;</span> &#123;\n    <span class=\"keyword\">if</span> (url.pathname === <span class=\"string\">&#x27;/example&#x27;</span>) &#123;\n        <span class=\"keyword\">return</span> &#123;\n            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Workbox&#x27;</span>,\n            <span class=\"attr\">type</span>: <span class=\"string\">&#x27;guide&#x27;</span>,\n        &#125;;\n    &#125;\n&#125;;\n\n<span class=\"keyword\">const</span> handler = <span class=\"keyword\">async</span> (&#123; url, event, params &#125;) =&gt; &#123;\n    <span class=\"comment\">// Response will be &quot;A guide to Workbox&quot;</span>\n    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Response(\n        <span class=\"string\">`A <span class=\"subst\">$&#123;params.type&#125;</span> to <span class=\"subst\">$&#123;params.name&#125;</span>`</span>\n    );\n&#125;;\n\nworkbox.routing.registerRoute(match, handler);</code></pre>\n<p>如果 URL 中的某些信息可以在 match 回调中解析一次并在中使用，则这可能会对 <code>handler</code> 有所帮助。</p>\n<h2 id=\"workbox-实践\"><a class=\"anchor\" href=\"#workbox-实践\"></a>Workbox 实践</h2>\n<p>通常对于大部分项目使用 Workbox 时一般会引入相应的 gulp 或者 webpack 插件，在构建流程中完成对 Service Worker 的注册、将指定 URL 进行 Precache、完成 sw.js 的生成，等等。<br>\n但是对于 Hexo、Jekyll 这些静态站点生成器或者 WordPress、Typecho 这些 CMS，如果不安装相应的插件，就需要自己从头编写一个 <code>sw.js</code>。</p>\n<p>先写一下总的配置：</p>\n<pre><code class=\"highlight javascript\"><span class=\"keyword\">let</span> cacheSuffixVersion = <span class=\"string\">&#x27;-210227&#x27;</span>;  <span class=\"comment\">// 缓存版本号</span>\n<span class=\"keyword\">const</span> maxEntries = <span class=\"number\">100</span>;              <span class=\"comment\">// 最大条目数</span>\n\ncore.setCacheNameDetails(&#123;\n    <span class=\"attr\">prefix</span>: <span class=\"string\">&#x27;baoshuo-blog&#x27;</span>,          <span class=\"comment\">// 前缀</span>\n    <span class=\"attr\">suffix</span>: cacheSuffixVersion       <span class=\"comment\">// 后缀</span>\n&#125;);</code></pre>\n<h3 id=\"google-fonts\"><a class=\"anchor\" href=\"#google-fonts\"></a>Google Fonts</h3>\n<p>Google Fonts 主要使用两个域名：<code>fonts.googleapis.com</code> 和 <code>fonts.gstatic.com</code> ，因此只需在匹配到这两个域名时进行缓存。</p>\n<pre><code class=\"highlight javascript\">workbox.routing.registerRoute(\n    <span class=\"comment\">// 匹配 fonts.googleapis.com 和 fonts.gstatic.com 两个域名</span>\n    <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">&#x27;^https://(?:fonts\\\\.googleapis\\\\.com|fonts\\\\.gstatic\\\\.com)&#x27;</span>),\n    <span class=\"keyword\">new</span> workbox.strategies.StaleWhileRevalidate(&#123;\n        <span class=\"comment\">// cache storage 名称和版本号</span>\n        <span class=\"attr\">cacheName</span>: <span class=\"string\">&#x27;font-cache&#x27;</span> + cacheSuffixVersion,\n        <span class=\"attr\">plugins</span>: [\n            <span class=\"comment\">// 使用 expiration 插件实现缓存条目数目和时间控制</span>\n            <span class=\"keyword\">new</span> workbox.expiration.ExpirationPlugin(&#123;\n                <span class=\"comment\">// 最大保存项目</span>\n                maxEntries,\n                <span class=\"comment\">// 缓存 30 天</span>\n                <span class=\"attr\">maxAgeSeconds</span>: <span class=\"number\">30</span> * <span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span>,\n            &#125;),\n            <span class=\"comment\">// 使用 cacheableResponse 插件缓存状态码为 0 的请求</span>\n            <span class=\"keyword\">new</span> workbox.cacheableResponse.CacheableResponsePlugin(&#123;\n                <span class=\"attr\">statuses</span>: [<span class=\"number\">0</span>, <span class=\"number\">200</span>],\n            &#125;),\n        ]\n    &#125;)\n);</code></pre>\n<h3 id=\"jsdelivr-cdn\"><a class=\"anchor\" href=\"#jsdelivr-cdn\"></a>jsDelivr CDN</h3>\n<p>使用 jsDelivr CDN 时如果指定了库的版本，对应的文件可以称得上是永久不会改变的，所以使用 <code>CacheFirst</code> 来进行缓存。</p>\n<pre><code class=\"highlight javascript\">workbox.routing.registerRoute(\n    <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">&#x27;^https://cdn\\\\.jsdelivr\\\\.net&#x27;</span>),\n    <span class=\"keyword\">new</span> workbox.strategies.CacheFirst(&#123;\n        <span class=\"attr\">cacheName</span>: <span class=\"string\">&#x27;static-immutable&#x27;</span> + cacheSuffixVersion,\n        <span class=\"attr\">fetchOptions</span>: &#123;\n            <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;cors&#x27;</span>,\n            <span class=\"attr\">credentials</span>: <span class=\"string\">&#x27;omit&#x27;</span>\n        &#125;,\n        <span class=\"attr\">plugins</span>: [\n            <span class=\"keyword\">new</span> workbox.expiration.ExpirationPlugin(&#123;\n                <span class=\"attr\">maxAgeSeconds</span>: <span class=\"number\">30</span> * <span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span>,\n                <span class=\"attr\">purgeOnQuotaError</span>: <span class=\"literal\">true</span>\n            &#125;)\n        ]\n    &#125;)\n);</code></pre>\n<h3 id=\"google-analytics\"><a class=\"anchor\" href=\"#google-analytics\"></a>Google Analytics</h3>\n<p>Workbox 有一个 <a href=\"https://developers.google.com/web/tools/workbox/guides/enable-offline-analytics\">Google Analytics 离线统计插件</a>，可惜我用的是 Sukka 大佬编写的<a href=\"https://github.com/SukkaW/cloudflare-workers-async-google-analytics\">非官方 Google Analytics 实现</a>，所以只能添加一个 <code>NetworkOnly</code> 来放弃离线统计。</p>\n<pre><code class=\"highlight javascript\">workbox.routing.registerRoute(\n    <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">&#x27;^https://api\\\\.baoshuo\\\\.ren/cfga/(.*)&#x27;</span>),\n    <span class=\"keyword\">new</span> workbox.strategies.NetworkOnly(&#123;\n        <span class=\"attr\">plugins</span>: [\n            <span class=\"keyword\">new</span> workbox.backgroundSync.BackgroundSyncPlugin(<span class=\"string\">&#x27;Optical_Collect&#x27;</span>, &#123;\n                <span class=\"attr\">maxRetentionTime</span>: <span class=\"number\">12</span> * <span class=\"number\">60</span> <span class=\"comment\">// Retry for max of 12 Hours (specified in minutes)</span>\n            &#125;),\n        ]\n    &#125;)\n);</code></pre>\n<h3 id=\"图片\"><a class=\"anchor\" href=\"#图片\"></a>图片</h3>\n<p>由于我开通了 <a href=\"http://SM.MS\">SM.MS</a> 的 LifeTime Premium VIP ，所以图片当然是要存到这里啦~</p>\n<p><a href=\"http://SM.MS\">SM.MS</a> 的图片域名有这几个：<code>i.loli.net</code>、<code>vip1.loli.net</code>、<code>vip2.loli.net</code>、<code>vip1.loli.io</code>、<code>vip2.loli.io</code>，只需要写一个正则匹配下就好了。</p>\n<p>由于图片链接对应的文件像 jsDelivr 一样也是几乎永久都不会改变的，所以使用 <code>CacheFirst</code> 来进行缓存。</p>\n<pre><code class=\"highlight javascript\">workbox.routing.registerRoute(\n    <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">&#x27;^https://(?:i|vip[0-9])\\\\.loli\\\\.(?:io|net)&#x27;</span>),\n    <span class=\"keyword\">new</span> workbox.strategies.CacheFirst(&#123;\n        <span class=\"attr\">cacheName</span>: <span class=\"string\">&#x27;img-cache&#x27;</span> + cacheSuffixVersion,\n        <span class=\"attr\">plugins</span>: [\n            <span class=\"comment\">// 使用 expiration 插件实现缓存条目数目和时间控制</span>\n            <span class=\"keyword\">new</span> workbox.expiration.ExpirationPlugin(&#123;\n                maxEntries,                          <span class=\"comment\">// 最大保存项目</span>\n                <span class=\"attr\">maxAgeSeconds</span>: <span class=\"number\">30</span> * <span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span>,    <span class=\"comment\">// 缓存 30 天</span>\n            &#125;),\n            <span class=\"comment\">// 使用 cacheableResponse 插件缓存状态码为 0 的请求</span>\n            <span class=\"keyword\">new</span> workbox.cacheableResponse.CacheableResponsePlugin(&#123;\n                <span class=\"attr\">statuses</span>: [<span class=\"number\">0</span>, <span class=\"number\">200</span>],\n            &#125;),\n        ]\n    &#125;)\n);</code></pre>\n<h3 id=\"友情链接\"><a class=\"anchor\" href=\"#友情链接\"></a>友情链接</h3>\n<p>这些文件只是偶尔更新，使用 <code>StaleWhileRevalidate</code> ，可以兼顾速度与版本更新。</p>\n<pre><code class=\"highlight javascript\">workbox.routing.registerRoute(\n    <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">&#x27;^https://friends\\\\.baoshuo\\\\.ren(.*)(png|jpg|jpeg|svg|gif)&#x27;</span>),\n    <span class=\"keyword\">new</span> workbox.strategies.StaleWhileRevalidate(&#123;\n        <span class=\"attr\">cacheName</span>: <span class=\"string\">&#x27;img-cache&#x27;</span> + cacheSuffixVersion,\n        <span class=\"attr\">fetchOptions</span>: &#123;\n            <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;cors&#x27;</span>,\n            <span class=\"attr\">credentials</span>: <span class=\"string\">&#x27;omit&#x27;</span>\n        &#125;\n    &#125;)\n);\nworkbox.routing.registerRoute(\n    <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">&#x27;https://friends\\\\.baoshuo\\\\.ren/links.json&#x27;</span>),\n    <span class=\"keyword\">new</span> workbox.strategies.StaleWhileRevalidate()\n);</code></pre>\n<h3 id=\"disqus-评论\"><a class=\"anchor\" href=\"#disqus-评论\"></a>Disqus 评论</h3>\n<p>DisqusJS 判断访客的 Disqus 可用性是通过检查 <code>shortname.disqus.com/favicon.ico</code> 和 <code>disqus.com/favicon.ico</code> ，显然是不能被缓存的。<br>\nAPI 可以在无网络时使用 <code>NetworkFirst</code> 来达到无网络时也能查看评论的效果。<br>\n另外 Disqus 本身也没有缓存的必要，所以对 <code>*.disqus.com</code> 使用 <code>NetworkOnly</code> 即可。<br>\n但是 <code>*.disquscdn.com</code> 下的头像、JS、CSS 是可以缓存一段时间的，所以使用 <code>CacheFirst</code> 缓存 10 天。</p>\n<pre><code class=\"highlight javascript\"><span class=\"comment\">// API</span>\nworkbox.routing.registerRoute(\n    <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">&#x27;^https://api\\\\.baoshuo\\\\.ren/disqus/(.*)&#x27;</span>),\n    <span class=\"keyword\">new</span> workbox.strategies.NetworkFirst(&#123;\n        <span class=\"attr\">cacheName</span>: <span class=\"string\">&#x27;dsqjs-api&#x27;</span> + cacheSuffixVersion,\n        <span class=\"attr\">fetchOptions</span>: &#123;\n            <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;cors&#x27;</span>,\n            <span class=\"attr\">credentials</span>: <span class=\"string\">&#x27;omit&#x27;</span>\n        &#125;,\n        <span class=\"attr\">networkTimeoutSeconds</span>: <span class=\"number\">3</span>\n    &#125;)\n);\n<span class=\"comment\">// Disqus</span>\nworkbox.routing.registerRoute(\n    <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">&#x27;^https://(.*)disqus\\\\.com&#x27;</span>),\n    <span class=\"keyword\">new</span> workbox.strategies.NetworkOnly()\n);\nworkbox.routing.registerRoute(\n    <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">&#x27;^https://(.*)disquscdn\\\\.com(.*)&#x27;</span>),\n    <span class=\"keyword\">new</span> workbox.strategies.CacheFirst(&#123;\n        <span class=\"attr\">cacheName</span>: <span class=\"string\">&#x27;disqus-cdn-cache&#x27;</span> + cacheSuffixVersion,\n        <span class=\"attr\">plugins</span>: [\n            <span class=\"keyword\">new</span> workbox.expiration.ExpirationPlugin(&#123;\n                <span class=\"attr\">maxAgeSeconds</span>: <span class=\"number\">10</span> * <span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span>,\n            &#125;),\n            <span class=\"keyword\">new</span> workbox.cacheableResponse.CacheableResponsePlugin(&#123;\n                <span class=\"attr\">statuses</span>: [<span class=\"number\">0</span>, <span class=\"number\">200</span>],\n            &#125;),\n        ]\n    &#125;)\n);</code></pre>\n<h3 id=\"后缀匹配\"><a class=\"anchor\" href=\"#后缀匹配\"></a>后缀匹配</h3>\n<p>针对其余没有被域名匹配到的静态文件，通过文件后缀进行匹配并使用 <code>StaleWhileRevalidate</code> ，可以兼顾速度与版本更新。</p>\n<pre><code class=\"highlight javascript\">workbox.routing.registerRoute(\n    <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">&#x27;.*\\.(?:png|jpg|jpeg|svg|gif|webp)&#x27;</span>),\n    <span class=\"keyword\">new</span> workbox.strategies.StaleWhileRevalidate()\n);\nworkbox.routing.registerRoute(\n    <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">&#x27;.*\\.(css|js)&#x27;</span>),\n    <span class=\"keyword\">new</span> workbox.strategies.StaleWhileRevalidate()\n);</code></pre>\n<h3 id=\"默认行为\"><a class=\"anchor\" href=\"#默认行为\"></a>默认行为</h3>\n<p>使用 Workbox 的 defaultHandler 匹配剩下的请求（包括页面自身），一律使用 <code>NetworkFirst</code> ，借助 Workbox 的 <code>runtimeCache</code> 起到加速和离线效果。</p>\n<pre><code class=\"highlight javascript\">workbox.routing.setDefaultHandler(\n    <span class=\"keyword\">new</span> workbox.strategies.NetworkFirst(&#123;\n        <span class=\"attr\">networkTimeoutSeconds</span>: <span class=\"number\">3</span>\n    &#125;)\n);</code></pre>\n<h2 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\"></a>参考资料</h2>\n<p><em>文章头图来自：<a href=\"https://developers.google.com/web/tools/workbox\">https://developers.google.com/web/tools/workbox</a></em></p>\n<p><em><a href=\"#Workbox-%E7%AD%96%E7%95%A5\">Workbox 策略</a> 一节中的配图来自：<a href=\"https://web.dev/offline-cookbook/\">https://web.dev/offline-cookbook/</a></em></p>\n<ul>\n<li><a href=\"https://developers.google.com/web/tools/workbox/\">Workbox - Google Developers</a></li>\n<li><a href=\"https://blog.skk.moe/post/hello-workbox/\">Workbox, not sw-toolbox &amp; sw-precache - Sukka’s Blog</a></li>\n<li><a href=\"https://github.com/GoogleChrome/workbox\">GoogleChrome/workbox - GitHub</a></li>\n<li><a href=\"https://web.dev/offline-cookbook/#serving-suggestions\">The Offline Cookbook - web.dev</a></li>\n</ul>\n",
            "tags": [
                "Web",
                "ServiceWorker",
                "JavaScript"
            ]
        },
        {
            "id": "https://blog.baoshuo.ren/post/about-darkmode/",
            "url": "https://blog.baoshuo.ren/post/about-darkmode/",
            "title": "浅谈网页「深色模式」的实现",
            "date_published": "2021-02-17T15:25:30.000Z",
            "content_html": "<p>随着越来越多的操作系统、浏览器开始支持 Dark Mode 和相应的 <a href=\"https://drafts.csswg.org/mediaqueries-5/#prefers-color-scheme\">Media Queries Level 5</a>，越来越多的网站开始添加深色模式。</p>\n<p>我的博客其实早在 2019 年末就支持了深色模式，但一直没有很好地实现这个功能。于是在 2020 年的那个超长寒假，我把博客系统更换到了 Typecho，并与某位大佬一起实现了一个深色模式插件<sup>（原文链接已丢失）</sup>。正好今年寒假把博客换到了 Hexo 上，趁着主题代码还热乎、能看懂，赶紧来写写我的深色模式是如何实现的。</p>\n<span id=\"more\"></span>\n<p><img src=\"https://vip2.loli.io/2021/02/17/tYEURzvx7LQ4mej.png\" alt=\"现在的深色模式效果\" loading=\"lazy\" data-action=\"zoom\"><span class=\"image-description\">现在的深色模式效果</span></p>\n<h2 id=\"关于深色模式\"><a class=\"anchor\" href=\"#关于深色模式\"></a>关于深色模式</h2>\n<p><img src=\"https://vip2.loli.io/2021/02/17/jXVHb1aAUf5pRhk.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<p>Dark themes reduce the luminance emitted by device screens, while still meeting minimum color contrast ratios. They help improve visual ergonomics by reducing eye strain, adjusting brightness to current lighting conditions, and facilitating screen use in dark environments – all while conserving battery power.<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup></p>\n<blockquote>\n<p><strong>翻译</strong></p>\n<p>深色主题能降低设备屏幕发出的亮度，同时仍然满足最小的颜色对比度。它们有助于改善视觉效果、减少眼睛疲劳，调整亮度以适应当前的照明条件，并有助于在黑暗环境中使用屏幕，同时节省电池电量。</p>\n</blockquote>\n<h2 id=\"界面设计\"><a class=\"anchor\" href=\"#界面设计\"></a>界面设计<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1:1\">[1:1]</a></sup></h2>\n<h3 id=\"颜色\"><a class=\"anchor\" href=\"#颜色\"></a>颜色</h3>\n<p><strong>不要使用 100% 的纯黑</strong></p>\n<p>Google 在 Material Design 的设计指南中对于深色模式列出了一系列设计规范，其中第一条就是 「不要使用 100% 的纯黑」 。</p>\n<p>Google 推荐将深色表面和 100% 白色文字的对比度至少设置为为 15.8:1 （Dark surfaces and 100% white body text have a contrast level of at least 15.8:1）</p>\n<p>为什么呢？因为纯白色会反射所有波长的光线，而纯黑色会吸收所有光线，这是对比度最大的两种颜色，白底黑字时，文字过于刺眼，而黑底白字时，文字又可能难以辨认。如果长时间阅读这样的文字，势必会让眼睛感觉到疲劳，与深色模式开发的初衷背道而驰。</p>\n<p>Google 推荐使用 <code>#121212</code> 来作为深色模式的<strong>主背景色</strong>。</p>\n<img src=\"https://vip2.loli.io/2021/02/17/QOjZ8D2PnW6wtSN.png\" class=\"\" width=\"700\" data-action=\"zoom\">\n<p>A dark theme uses dark grey, rather than black, as the primary surface color for components. Dark grey surfaces can express a wider range of color, elevation, and depth, because it’s easier to see shadows on grey (instead of black).</p>\n<p>Dark grey surfaces also reduce eye strain, as light text on a dark grey surface has less contrast than light text on a black surface.</p>\n<blockquote>\n<p><strong>翻译</strong></p>\n<p>深色主题应使用深灰而不是黑色作为组件的主要表面颜色。深灰色表面可以表示更广泛的颜色，高度和深度范围，因为更容易看到灰色阴影（而不是黑色）。</p>\n<p>深灰色的表面还可以减少眼睛疲劳，因为深灰色表面上的浅色文本的对比度低于黑色表面上的浅色文本。</p>\n</blockquote>\n<p>许多常见应用的深色模式背景色的 H 值都在 200~250 范围内（即蓝色范围），在纯灰色的基础上稍微偏冷一些。不过也有一些例外，比如网易云音乐的背景色有点偏暖，可能和其品牌色有关（网易云音乐的品牌色是暖红色）。</p>\n<hr>\n<p><strong>不要让亮色占据过多面积</strong></p>\n<p>在深色主题中应该尽可能地使用有限的颜色进行强调，并使大部分空间显示出深色表面。</p>\n<img src=\"https://vip2.loli.io/2021/02/17/o1x4jPm92AWECZp.png\" class=\"\" width=\"300\" title=\"正确示例\" data-action=\"zoom\"><span class=\"image-description\">正确示例</span>\n<img src=\"https://vip1.loli.io/2021/02/17/SguCOs4WM5Gqd7I.png\" class=\"\" width=\"300\" title=\"错误示例\" data-action=\"zoom\"><span class=\"image-description\">错误示例</span>\n<hr>\n<p><strong>不要使用过高的色彩饱和度</strong></p>\n<p>在深色模式下，过高的色彩饱和度可能会使文本像下方这样难以辨识（清晰度降低）：</p>\n<p><img src=\"https://vip1.loli.io/2021/02/17/u16JvHsZBgeFYER.png\" alt=\"这张图片中的文本辨识度较低\" loading=\"lazy\" data-action=\"zoom\"><span class=\"image-description\">这张图片中的文本辨识度较低</span></p>\n<p>色彩饱和度过高还可能会导致文本在深色背景上产生光学振动，从而引起眼睛疲劳。</p>\n<p>最佳做法是使用 「去饱和色」 ，这样可以提高清晰度，并减少视觉抖动。</p>\n<p><img src=\"https://vip2.loli.io/2021/02/17/YxOwh46ZFNIC5Rg.png\" alt=\"这张图片中的文本较上方的图片来说文本辨识度提高了许多\" loading=\"lazy\" data-action=\"zoom\"><span class=\"image-description\">这张图片中的文本较上方的图片来说文本辨识度提高了许多</span></p>\n<h3 id=\"层次\"><a class=\"anchor\" href=\"#层次\"></a>层次</h3>\n<p>在浅色模式下，我们通常会使用投影来区分页面内元素的层次，但这种方法在深色模式中如果使用不当，不仅起不到区分页面内元素层次的作用，还会影响整体观感，起到反作用。</p>\n<p><img src=\"https://vip1.loli.io/2021/02/17/O7qzgYK98DGLvCV.png\" alt=\"Google 给出的示例\" loading=\"lazy\" data-action=\"zoom\"><span class=\"image-description\">Google 给出的示例</span></p>\n<hr>\n<p><img src=\"https://vip1.loli.io/2021/02/17/Amac2CMl4bzurYe.png\" alt=\"WWDC 2019 中苹果设计师讲到深色模式的文本\" loading=\"lazy\" data-action=\"zoom\"><span class=\"image-description\">WWDC 2019 中苹果设计师讲到深色模式的文本</span></p>\n<p>Apple 认为在浅色模式下投影能轻松地区分两个视觉元素，但是在深色模式下作用甚微。所以他们建议在深色背景下，对前置元素的使用稍亮的灰色。<sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup></p>\n<hr>\n<p><img src=\"https://vip1.loli.io/2021/02/17/OHZqYmAaQDJ9RBe.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<p>在组件表面<sup>(1)</sup>上放置一个白色半透明的遮罩层<sup>(2)</sup>，就可以体现出深色模式中的层次。</p>\n<h2 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\"></a>代码实现</h2>\n<p>这个主题使用了向 <code>body</code> 添加 <code>.dark</code> 类来实现深色模式。</p>\n<h3 id=\"利用-media-query-简单实现深色模式\"><a class=\"anchor\" href=\"#利用-media-query-简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h3>\n<p>可以直接为深色模式编写独立的样式：</p>\n<pre><code class=\"highlight css\"><span class=\"selector-tag\">body</span> &#123;\n    <span class=\"attribute\">color</span>: <span class=\"number\">#111</span>;\n&#125;\n\n<span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme</span>: dark) &#123;\n    <span class=\"selector-tag\">body</span><span class=\"selector-class\">.dark</span> &#123;\n        <span class=\"attribute\">color</span>: <span class=\"number\">#eee</span>;\n    &#125;\n&#125;</code></pre>\n<p>更进一步地，还可以使用 CSS Variable 来简化代码：</p>\n<pre><code class=\"highlight css\"><span class=\"selector-pseudo\">:root</span> &#123;\n    --text: <span class=\"number\">#111</span>;\n&#125;\n\n<span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme</span>: dark) &#123;\n    <span class=\"selector-pseudo\">:root</span> &#123;\n        --text: <span class=\"number\">#eee</span>;\n    &#125;\n&#125;\n\n<span class=\"selector-tag\">body</span> &#123;\n    <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--text);\n&#125;</code></pre>\n<p>还可以利用 <code>&lt;link&gt;</code> 标签的 Media Query 来有条件地加载文件，节省流量：</p>\n<pre><code class=\"highlight css\"><span class=\"comment\">/* main.css */</span>\n<span class=\"selector-tag\">body</span> &#123;\n    <span class=\"attribute\">color</span>: <span class=\"number\">#111</span>;\n&#125;\n\n<span class=\"comment\">/* dark.css */</span>\n<span class=\"selector-tag\">body</span> &#123;\n    <span class=\"attribute\">color</span>: <span class=\"number\">#eee</span>;\n&#125;</code></pre>\n<p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p>\n<pre><code class=\"highlight html\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;main.css&quot;</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;dark.css&quot;</span> <span class=\"attr\">media</span>=<span class=\"string\">&quot;(prefers-color-scheme: dark)&quot;</span>&gt;</span></code></pre>\n<h3 id=\"使用-media-query-javascript-实现跟随系统-定时切换深色模式\"><a class=\"anchor\" href=\"#使用-media-query-javascript-实现跟随系统-定时切换深色模式\"></a>使用 Media Query + JavaScript 实现跟随系统/定时切换深色模式</h3>\n<pre><code class=\"highlight css\"><span class=\"selector-pseudo\">:root</span> &#123;\n    --text: <span class=\"number\">#111</span>;\n&#125;\n\n<span class=\"selector-class\">.dark</span> &#123;\n    --text: <span class=\"number\">#eee</span>;\n&#125;\n\n<span class=\"selector-tag\">body</span> &#123;\n    <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--text);\n&#125;</code></pre>\n<p>这段 CSS 与先前的并没有什么差别，而且与其相对应的 JavaScript 也很好编写。</p>\n<pre><code class=\"highlight javascript\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">&#x27;DOMContentLoaded&#x27;</span>, <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;\n    <span class=\"keyword\">if</span> ((<span class=\"built_in\">window</span>.matchMedia &amp;&amp; <span class=\"built_in\">window</span>.matchMedia(<span class=\"string\">&#x27;(prefers-color-scheme: dark)&#x27;</span>).matches)\n        || <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getHours() &gt;= <span class=\"number\">19</span> || <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getHours() &lt; <span class=\"number\">7</span>) &#123;\n        <span class=\"built_in\">document</span>.body.classList.add(<span class=\"string\">&#x27;dark&#x27;</span>);\n    &#125;\n&#125;);</code></pre>\n<p>此段代码中开启深色模式的条件有两个：</p>\n<ul>\n<li>系统开启了深色模式</li>\n<li>时间在晚7点~早7点之间</li>\n</ul>\n<p>只要满足上述任意一个条件，深色模式就会被开启。</p>\n<h3 id=\"使用-media-query-toggle-button-实现跟随系统-手动切换深色模式\"><a class=\"anchor\" href=\"#使用-media-query-toggle-button-实现跟随系统-手动切换深色模式\"></a>使用 Media Query + Toggle Button 实现跟随系统/手动切换深色模式<sup class=\"footnote-ref\"><a href=\"#fn3\" id=\"fnref3\">[3]</a></sup></h3>\n<pre><code class=\"highlight css\"><span class=\"selector-pseudo\">:root</span> &#123;\n    --text: <span class=\"number\">#111</span>;\n&#125;\n\n<span class=\"selector-class\">.dark</span> &#123;\n    --text: <span class=\"number\">#eee</span>;\n&#125;\n\n<span class=\"selector-tag\">body</span> &#123;\n    <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--text);\n&#125;</code></pre>\n<p>这段 CSS 与先前的并没有什么差别，下面就是令人头大的 JavaScript 部分了。</p>\n<p>先定义一些常量：</p>\n<pre><code class=\"highlight javascript\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement;\n<span class=\"keyword\">const</span> darkModeClassName = <span class=\"string\">&#x27;dark&#x27;</span>;\n<span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">&#x27;user-color-scheme&#x27;</span>;\n<span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;dark-mode-toggle-button&#x27;</span>);\n<span class=\"keyword\">const</span> validColorModeKeys = &#123; <span class=\"string\">&#x27;dark&#x27;</span>: <span class=\"literal\">true</span>, <span class=\"string\">&#x27;light&#x27;</span>: <span class=\"literal\">true</span> &#125;\n<span class=\"keyword\">const</span> invertDarkModeObj = &#123; <span class=\"string\">&#x27;dark&#x27;</span>: <span class=\"string\">&#x27;light&#x27;</span>, <span class=\"string\">&#x27;light&#x27;</span>: <span class=\"string\">&#x27;dark&#x27;</span> &#125;</code></pre>\n<p>接下来使用 <code>try &#123;&#125; catch (e) &#123;&#125;</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<pre><code class=\"highlight javascript\"><span class=\"keyword\">const</span> setLocalStorage = <span class=\"function\">(<span class=\"params\">key, value</span>) =&gt;</span> &#123;\n    <span class=\"keyword\">try</span> &#123;\n        <span class=\"built_in\">localStorage</span>.setItem(key, value);\n    &#125; <span class=\"keyword\">catch</span> (e) &#123;&#125;\n&#125;\n\n<span class=\"keyword\">const</span> removeLocalStorage = <span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123;\n    <span class=\"keyword\">try</span> &#123;\n        <span class=\"built_in\">localStorage</span>.removeItem(key);\n    &#125; <span class=\"keyword\">catch</span> (e) &#123;&#125;\n&#125;\n\n<span class=\"keyword\">const</span> getLocalStorage = <span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123;\n    <span class=\"keyword\">try</span> &#123;\n        <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(key);\n    &#125; <span class=\"keyword\">catch</span> (e) &#123;\n        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;    <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span>\n    &#125;\n&#125;</code></pre>\n<p>获取当前 <code>prefers-color-scheme</code> 的方法：</p>\n<pre><code class=\"highlight javascript\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> &#123;\n    <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.matchMedia(<span class=\"string\">&#x27;(prefers-color-scheme: dark)&#x27;</span>).matches ? <span class=\"string\">&#x27;dark&#x27;</span> : <span class=\"string\">&#x27;light&#x27;</span>;\n&#125;</code></pre>\n<p>再写一个清除 Class 和 LocalStorage 的函数：</p>\n<pre><code class=\"highlight javascript\"><span class=\"keyword\">const</span> resetRootDarkModeClassAndLocalStorage = <span class=\"function\">() =&gt;</span> &#123;\n    rootElement.classList.remove(darkModeClassName);\n    rootElement.classList.remove(invertDarkModeObj[darkModeClassName]);\n    removeLocalStorage(darkModeStorageKey);\n&#125;</code></pre>\n<p>接下来就是起主要作用的函数了，负责为 <code>&lt;body&gt;</code> 标签增删深色模式的 Class ：</p>\n<pre><code class=\"highlight javascript\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> &#123;\n    <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span>\n    <span class=\"keyword\">const</span> currentSetting = mode || getLocalStorage(darkModeStorageKey);\n\n    <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) &#123;\n        <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span>\n        resetRootDarkModeClassAndLocalStorage();\n    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) &#123;\n        rootElement.classList.add(currentSetting);\n        rootElement.classList.remove(invertDarkModeObj[currentSetting]);\n    &#125; <span class=\"keyword\">else</span> &#123;\n        <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span>\n        <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span>\n        resetRootDarkModeClassAndLocalStorage();\n    &#125;\n&#125;</code></pre>\n<p>还需要一个函数负责获取相反的显示模式，并将其存储到 LocalStorage 中</p>\n<pre><code class=\"highlight javascript\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> &#123;\n    <span class=\"keyword\">let</span> currentSetting = getLocalStorage(darkModeStorageKey);\n\n    <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) &#123;\n        <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span>\n        currentSetting = invertDarkModeObj[currentSetting];\n    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) &#123;\n        <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span>\n        <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span>\n        currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];\n    &#125; <span class=\"keyword\">else</span> &#123;\n        <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span>\n        <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span>\n    &#125;\n    <span class=\"comment\">// 将相反的模式写入 localStorage</span>\n    setLocalStorage(darkModeStorageKey, currentSetting);\n\n    <span class=\"keyword\">return</span> currentSetting;\n&#125;</code></pre>\n<p>相关的函数都定义完了，是时候添加执行了：</p>\n<pre><code class=\"highlight javascript\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span>\napplyCustomDarkModeSettings();</code></pre>\n<pre><code class=\"highlight javascript\"><span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span>\ndarkModeTogglebuttonElement.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;\n    applyCustomDarkModeSettings(toggleCustomDarkMode());\n&#125;);</code></pre>\n<iframe src=\"https://codesandbox.io/embed/shiyong-media-query-toggle-button-shixiangensuixitongshoudongqiehuanshensemoshi-7d60d?autoresize=1&fontsize=16&theme=dark&view=preview\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow: hidden;\" title=\"使用 Media Query + Toggle Button 实现跟随系统/手动切换深色模式\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n<h3 id=\"使用-media-query-toggle-button-javascript-实现跟随系统-定时-手动切换深色模式\"><a class=\"anchor\" href=\"#使用-media-query-toggle-button-javascript-实现跟随系统-定时-手动切换深色模式\"></a>使用 Media Query + Toggle Button + JavaScript 实现跟随系统/定时/手动切换深色模式</h3>\n<p>CSS 和大部分 JavaScript 代码没有变化，此处仅说明有变化的代码。</p>\n<p>在函数 <code>toggleCustomDarkMode()</code> 中添加写入一个时间戳的操作：</p>\n<pre><code class=\"highlight diff\"><span class=\"meta\">@@ -85,19 +114,20 @@</span>\n const toggleCustomDarkMode = () =&gt; &#123;\n     let currentSetting = getLocalStorage(darkModeStorageKey);\n \n     if (validColorModeKeys[currentSetting]) &#123;\n         // 从 localStorage 中读取模式，并取相反的模式\n         currentSetting = invertDarkModeObj[currentSetting];\n     &#125; else if (currentSetting <span class=\"comment\">=== null) &#123;</span>\n         // localStorage 中没有相关值，或者 localStorage 抛了 Error\n         // 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式\n         currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];\n     &#125; else &#123;\n         // 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值\n         return; // 直接 return;\n     &#125;\n     // 将相反的模式写入 localStorage\n     setLocalStorage(darkModeStorageKey, currentSetting);\n<span class=\"addition\">+    setLocalStorage(darkModeTimeKey, +new Date());</span>\n\n     return currentSetting;\n&#125;;</code></pre>\n<p>重新编写入口，用来检测是否符合定时条件：</p>\n<pre><code class=\"highlight javascript\"><span class=\"keyword\">const</span> initDarkMode = <span class=\"function\">(<span class=\"params\">nowTime</span>) =&gt;</span> &#123;\n    <span class=\"keyword\">const</span> lastSunrise = (nowTime.getHours() &lt; <span class=\"number\">7</span> ? <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(nowTime.getFullYear(), nowTime.getMonth(), nowTime.getDate() - <span class=\"number\">1</span>, <span class=\"number\">7</span>) : <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(nowTime.getFullYear(), nowTime.getMonth(), nowTime.getDate(), <span class=\"number\">7</span>)).getTime();    <span class=\"comment\">// 日出</span>\n    <span class=\"keyword\">const</span> lastSunset = (nowTime.getHours() &lt; <span class=\"number\">19</span> ? <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(nowTime.getFullYear(), nowTime.getMonth(), nowTime.getDate() - <span class=\"number\">1</span>, <span class=\"number\">19</span>) : <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(nowTime.getFullYear(), nowTime.getMonth(), nowTime.getDate(), <span class=\"number\">19</span>)).getTime();  <span class=\"comment\">// 日落</span>\n    <span class=\"keyword\">const</span> darkModeTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">parseInt</span>((getLocalStorage(darkModeTimeKey) || <span class=\"string\">&#x27;0&#x27;</span>), <span class=\"number\">10</span>)).getTime();\n    nowTime = nowTime.getTime();\n    <span class=\"keyword\">if</span> (lastSunrise &lt; lastSunset) &#123;\n        <span class=\"comment\">// 日出比日落早表示晚上</span>\n        <span class=\"keyword\">if</span> (lastSunset &lt; darkModeTime) &#123;\n            <span class=\"comment\">// 当晚自行调整过日间/夜间模式</span>\n            applyCustomDarkModeSettings();\n        &#125; <span class=\"keyword\">else</span> &#123;\n            applyCustomDarkModeSettings(darkModeClassName);\n        &#125;\n    &#125; <span class=\"keyword\">else</span> &#123;\n        <span class=\"comment\">// 日出比日落晚表示白天</span>\n        <span class=\"keyword\">if</span> (lastSunrise &lt; darkModeTime) &#123;\n            <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);\n            applyCustomDarkModeSettings();\n        &#125;\n        <span class=\"keyword\">else</span> &#123;\n            <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);\n            applyCustomDarkModeSettings(invertDarkModeObj[darkModeClassName]);\n        &#125;\n    &#125;\n&#125;;\n\ninitDarkMode(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</code></pre>\n<iframe src=\"https://codesandbox.io/embed/shiyong-media-query-toggle-button-javascript-shixiangensuixitongdingshishoudongqiehuanshensemoshi-dyei7?autoresize=1&fontsize=14&theme=dark&view=preview\" style=\"width: 100%; height: 500px; border: 0; border-radius: 4px; overflow: hidden;\" title=\"使用 Media Query + Toggle Button + JavaScript 实现跟随系统/定时/手动切换深色模式\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n<h3 id=\"深色模式下的页面滚动条\"><a class=\"anchor\" href=\"#深色模式下的页面滚动条\"></a>深色模式下的页面滚动条<sup class=\"footnote-ref\"><a href=\"#fn4\" id=\"fnref4\">[4]</a></sup></h3>\n<p>只需在页面的 <code>&lt;head&gt;</code> 中添加一个 <a href=\"https://html.spec.whatwg.org/multipage/semantics.html#meta-color-scheme\"><code>&lt;meta name=&quot;color-scheme&quot;&gt;</code></a> 的标签即可让页面滚动条的样式跟随深色模式变化。</p>\n<pre><code class=\"highlight html\"><span class=\"comment\">&lt;!--</span>\n<span class=\"comment\">  The page supports both light and dark color schemes,</span>\n<span class=\"comment\">  and the page author prefers light.</span>\n<span class=\"comment\">--&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;color-scheme&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;light dark&quot;</span>&gt;</span></code></pre>\n<p>如果你使用类似上一节所示的切换按钮的话，别忘了添加下面的 CSS ：</p>\n<pre><code class=\"highlight css\"><span class=\"comment\">/*</span>\n<span class=\"comment\">  The page supports both light and dark color schemes,</span>\n<span class=\"comment\">  and the page author prefers light.</span>\n<span class=\"comment\">*/</span>\n<span class=\"selector-pseudo\">:root</span> &#123;\n    <span class=\"attribute\">color</span>-scheme: light;\n&#125;\n<span class=\"selector-class\">.dark</span> &#123;\n    <span class=\"attribute\">color</span>-scheme: dark;\n&#125;</code></pre>\n<h2 id=\"disqus-相关\"><a class=\"anchor\" href=\"#disqus-相关\"></a>Disqus 相关</h2>\n<p>如果网页上有 Disqus 评论系统，请添加下方的 CSS 以避免 Disqus 的自动深色模式失效。</p>\n<pre><code class=\"highlight css\"><span class=\"selector-tag\">iframe</span> &#123;\n    <span class=\"attribute\">color</span>-scheme: light;\n&#125;</code></pre>\n<p><em>来源：<a href=\"https://stackoverflow.com/a/65313819/14109955\">Disqus iframe transparency won’t work on Chrome 87 - StackOverflow</a></em></p>\n<h2 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\"></a>参考资料</h2>\n<p><em>文章头图来自：<a href=\"https://material.io/design/color/dark-theme.html\">https://material.io/design/color/dark-theme.html</a></em></p>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><a href=\"https://material.io/design/color/dark-theme.html\">Dark theme - Material Design</a> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a> <a href=\"#fnref1:1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p><a href=\"https://developer.apple.com/videos/play/wwdc2019/808/\">What’s New in iOS Design - WWDC 2019</a> <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn3\" class=\"footnote-item\"><p><a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持 - Sukka’s Blog</a> <a href=\"#fnref3\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn4\" class=\"footnote-item\"><p><a href=\"https://web.dev/color-scheme/\">Improved dark mode default styling with the color-scheme CSS property and the corresponding meta tag - web.dev</a> <a href=\"#fnref4\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "Web",
                "前端"
            ]
        },
        {
            "id": "https://blog.baoshuo.ren/post/handsome-leftbar-layout/",
            "url": "https://blog.baoshuo.ren/post/handsome-leftbar-layout/",
            "title": "【补档】handsome 魔改教程：左侧边栏输出优化",
            "date_published": "2020-04-12T15:31:25.000Z",
            "content_html": "<p>感觉 handsome 自带的左侧边栏显示方法不太合适，于是自己参照了UCW大佬的教程 <a href=\"https://ucw.moe/archives/handsome-aside-category.html\">优化侧栏显示：实现更加美观的分类展示</a> 改了一下。</p>\n<span id=\"more\"></span>\n<h2 id=\"修改方法\"><a class=\"anchor\" href=\"#修改方法\"></a>修改方法</h2>\n<h3 id=\"前置操作\"><a class=\"anchor\" href=\"#前置操作\"></a>前置操作</h3>\n<p>建议引入 <a href=\"https://fontawesome.dashgame.com/\">Font Awesome</a> 图标库，在 <code>主题后台设置 -&gt; 开发者设置 -&gt; 自定义输出 head 头部的 HTML 代码</code> 里面添加下面的代码即可。</p>\n<pre><code class=\"highlight html\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://cdn.bootcss.com/font-awesome/4.7.0/css/font-awesome.min.css&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span></code></pre>\n<p>上面的 <code>Font Awesome</code> 的 css 文件来自 BootCDN 提供，你也可以替换成自己的文件。</p>\n<h3 id=\"改代码\"><a class=\"anchor\" href=\"#改代码\"></a>改代码</h3>\n<p>首先，打开 <code>libs/Content.php</code> ，在蓝线所示的位置：</p>\n<p><img src=\"https://vip2.loli.io/2020/11/26/3J7jpP5W6uqkAwO.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<p>插入下面的代码：</p>\n<pre><code class=\"highlight php\"><span class=\"comment\">/**</span>\n<span class=\"comment\"> *</span>\n<span class=\"comment\"> * <span class=\"doctag\">@param</span> $categories</span>\n<span class=\"comment\"> * <span class=\"doctag\">@return</span> string</span>\n<span class=\"comment\"> */</span>\n<span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">returnAsideCategories</span>(<span class=\"params\"><span class=\"variable\">$categories</span></span>)</span>&#123;\n    <span class=\"variable\">$html</span>    = <span class=\"string\">&quot;&quot;</span>;\n    <span class=\"variable\">$options</span> = mget();\n    <span class=\"variable\">$icons</span>   = <span class=\"keyword\">array</span>(\n        <span class=\"string\">&#x27;default&#x27;</span> =&gt; <span class=\"string\">&#x27;glyphicon glyphicon-tasks&#x27;</span>,\n        <span class=\"string\">&#x27;github&#x27;</span>  =&gt; <span class=\"string\">&#x27;fa fa-github&#x27;</span>\n        <span class=\"comment\">/**</span>\n<span class=\"comment\">         *  格式：  &#x27;分类缩略名&#x27; =&gt; &#x27;图标名称&#x27;,</span>\n<span class=\"comment\">         */</span>\n    );\n    <span class=\"keyword\">while</span>(<span class=\"variable\">$categories</span>-&gt;next()) &#123;\n        <span class=\"keyword\">if</span> (<span class=\"variable\">$categories</span>-&gt;levels === <span class=\"number\">0</span>) &#123;\n            <span class=\"variable\">$children</span> = <span class=\"variable\">$categories</span>-&gt;getAllChildren(<span class=\"variable\">$categories</span>-&gt;mid);\n            <span class=\"keyword\">if</span> (!<span class=\"keyword\">empty</span>(<span class=\"variable\">$children</span>)) &#123;\n                <span class=\"variable\">$html</span> .= <span class=\"string\">&#x27;&lt;li&gt;&lt;a class=&quot;auto&quot;&gt;&lt;span class=&quot;pull-right text-muted&quot;&gt;&lt;i class=&quot;fontello icon-fw fontello-angle-right text&quot;&gt;&lt;/i&gt;&lt;i class=&quot;fontello icon-fw fontello-angle-down text-active&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;span class=&quot;nav-icon&quot;&gt;&lt;i class=&quot;&#x27;</span> . <span class=\"variable\">$icons</span>[<span class=\"variable\">$categories</span>-&gt;slug] . <span class=\"string\">&#x27;&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;span&gt;&#x27;</span> . <span class=\"variable\">$categories</span>-&gt;name . <span class=\"string\">&#x27;&lt;/span&gt;&lt;/a&gt;&#x27;</span>;\n                <span class=\"variable\">$childCategoryHtml</span> =  <span class=\"string\">&#x27;&lt;ul class=&quot;nav nav-sub dk&quot;&gt;&lt;li class=&quot;nav-sub-header&quot;&gt;&lt;a&gt;&lt;span&gt;&#x27;</span> . <span class=\"variable\">$categories</span>-&gt;name . <span class=\"string\">&#x27;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&#x27;</span>;\n                <span class=\"keyword\">foreach</span>(<span class=\"variable\">$children</span> <span class=\"keyword\">as</span> <span class=\"variable\">$mid</span>)&#123;\n                    <span class=\"variable\">$child</span> = <span class=\"variable\">$categories</span>-&gt;getCategory(<span class=\"variable\">$mid</span>);\n                    <span class=\"variable\">$childCategoryHtml</span> .= <span class=\"string\">&#x27;&lt;li&gt;&lt;a href=&quot;&#x27;</span> . <span class=\"variable\">$child</span>[<span class=\"string\">&#x27;permalink&#x27;</span>] . <span class=\"string\">&#x27;&quot;&gt;&lt;b class=&quot;badge pull-right&quot;&gt;&#x27;</span> . <span class=\"variable\">$child</span>[<span class=\"string\">&#x27;count&#x27;</span>] . <span class=\"string\">&#x27;&lt;/b&gt;&lt;i class=&quot;&#x27;</span> . <span class=\"variable\">$icons</span>[<span class=\"variable\">$child</span>[<span class=\"string\">&#x27;slug&#x27;</span>]] . <span class=\"string\">&#x27;&quot;&gt;&lt;/i&gt;&lt;span&gt;&#x27;</span> . <span class=\"variable\">$child</span>[<span class=\"string\">&#x27;name&#x27;</span>] . <span class=\"string\">&#x27;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&#x27;</span>;\n                &#125;\n                <span class=\"variable\">$childCategoryHtml</span> .= <span class=\"string\">&#x27;&lt;/ul&gt;&#x27;</span>;\n                <span class=\"variable\">$html</span> .= <span class=\"variable\">$childCategoryHtml</span>;\n                <span class=\"variable\">$html</span> .= <span class=\"string\">&quot;&lt;/li&gt;&quot;</span>;\n            &#125; <span class=\"keyword\">else</span> &#123;\n                <span class=\"variable\">$html</span> .= <span class=\"string\">&#x27;&lt;li&gt;&lt;a href=&quot;&#x27;</span> . <span class=\"variable\">$categories</span>-&gt;permalink . <span class=\"string\">&#x27;&quot; class=&quot;auto&quot;&gt;&lt;b class=&quot;badge pull-right&quot;&gt;&#x27;</span> . <span class=\"variable\">$categories</span>-&gt;count . <span class=\"string\">&#x27;&lt;/b&gt;&lt;span class=&quot;nav-icon&quot;&gt;&lt;i class=&quot;&#x27;</span>.<span class=\"variable\">$icons</span>[<span class=\"variable\">$categories</span>-&gt;slug].<span class=\"string\">&#x27;&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;span&gt;&#x27;</span> . <span class=\"variable\">$categories</span>-&gt;name . <span class=\"string\">&#x27;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&#x27;</span>;\n            &#125;\n        &#125;\n    &#125;\n    <span class=\"keyword\">return</span> <span class=\"variable\">$html</span>;\n&#125;</code></pre>\n<p>在 <code>component/aside.php</code> 中找到以下代码（大约 <code>131 ~ 160</code> 行），删除。</p>\n<pre><code class=\"highlight php\">              &lt;!--分类category--&gt;\n                <span class=\"meta\">&lt;?php</span>\n                <span class=\"variable\">$class</span> = <span class=\"string\">&quot;&quot;</span>;\n                    <span class=\"keyword\">if</span> (in_array(<span class=\"string\">&quot;openCategory&quot;</span>,<span class=\"keyword\">$this</span>-&gt;options-&gt;featuresetup))&#123;\n                        <span class=\"variable\">$class</span> = <span class=\"string\">&quot;class=\\\\&quot;</span>active\\\\<span class=\"string\">&quot;&quot;</span>;\n                    &#125;\n                    <span class=\"meta\">?&gt;</span>\n              &lt;li <span class=\"meta\">&lt;?php</span> <span class=\"keyword\">echo</span> <span class=\"variable\">$class</span>; <span class=\"meta\">?&gt;</span>&gt;\n                &lt;a <span class=\"class\"><span class=\"keyword\">class</span>=&quot;<span class=\"title\">auto</span>&quot;&gt;</span>\n<span class=\"class\">                  &lt;<span class=\"title\">span</span> <span class=\"title\">class</span>=&quot;<span class=\"title\">pull</span>-<span class=\"title\">right</span> <span class=\"title\">text</span>-<span class=\"title\">muted</span>&quot;&gt;</span>\n<span class=\"class\">                    &lt;<span class=\"title\">i</span> <span class=\"title\">class</span>=&quot;<span class=\"title\">fontello</span> <span class=\"title\">icon</span>-<span class=\"title\">fw</span> <span class=\"title\">fontello</span>-<span class=\"title\">angle</span>-<span class=\"title\">right</span> <span class=\"title\">text</span>&quot;&gt;&lt;/<span class=\"title\">i</span>&gt;</span>\n<span class=\"class\">                    &lt;<span class=\"title\">i</span> <span class=\"title\">class</span>=&quot;<span class=\"title\">fontello</span> <span class=\"title\">icon</span>-<span class=\"title\">fw</span> <span class=\"title\">fontello</span>-<span class=\"title\">angle</span>-<span class=\"title\">down</span> <span class=\"title\">text</span>-<span class=\"title\">active</span>&quot;&gt;&lt;/<span class=\"title\">i</span>&gt;</span>\n<span class=\"class\">                  &lt;/<span class=\"title\">span</span>&gt;</span>\n<span class=\"class\">&lt;!--                  &lt;<span class=\"title\">i</span> <span class=\"title\">class</span>=&quot;<span class=\"title\">glyphicon</span> <span class=\"title\">glyphicon</span>-<span class=\"title\">th</span>&quot;&gt;&lt;/<span class=\"title\">i</span>&gt;--&gt;</span>\n<span class=\"class\">                    &lt;<span class=\"title\">span</span> <span class=\"title\">class</span>=&quot;<span class=\"title\">nav</span>-<span class=\"title\">icon</span>&quot;&gt;&lt;<span class=\"title\">i</span> <span class=\"title\">data</span>-<span class=\"title\">feather</span>=&quot;<span class=\"title\">grid</span>&quot;&gt;&lt;/<span class=\"title\">i</span>&gt;&lt;/<span class=\"title\">span</span>&gt;</span>\n<span class=\"class\"></span>\n<span class=\"class\">                    &lt;<span class=\"title\">span</span>&gt;&lt;?<span class=\"title\">php</span> <span class=\"title\">_me</span>(&quot;分类&quot;) ?&gt;&lt;/<span class=\"title\">span</span>&gt;</span>\n<span class=\"class\">                &lt;/<span class=\"title\">a</span>&gt;</span>\n<span class=\"class\">                &lt;<span class=\"title\">ul</span> <span class=\"title\">class</span>=&quot;<span class=\"title\">nav</span> <span class=\"title\">nav</span>-<span class=\"title\">sub</span> <span class=\"title\">dk</span>&quot;&gt;</span>\n<span class=\"class\">                  &lt;<span class=\"title\">li</span> <span class=\"title\">class</span>=&quot;<span class=\"title\">nav</span>-<span class=\"title\">sub</span>-<span class=\"title\">header</span>&quot;&gt;</span>\n<span class=\"class\">                    &lt;<span class=\"title\">a</span>&gt;</span>\n<span class=\"class\">                      &lt;<span class=\"title\">span</span>&gt;&lt;?<span class=\"title\">php</span> <span class=\"title\">_me</span>(&quot;分类&quot;) ?&gt;&lt;/<span class=\"title\">span</span>&gt;</span>\n<span class=\"class\">                    &lt;/<span class=\"title\">a</span>&gt;</span>\n<span class=\"class\">                  &lt;/<span class=\"title\">li</span>&gt;</span>\n<span class=\"class\">                  &lt;!--循环输出分类--&gt;</span>\n<span class=\"class\">                    &lt;?<span class=\"title\">php</span></span>\n<span class=\"class\">                    $<span class=\"title\">this</span>-&gt;<span class=\"title\">widget</span>(&#x27;<span class=\"title\">Widget_Metas_Category_List</span>&#x27;)-&gt;<span class=\"title\">to</span>($<span class=\"title\">categorys</span>);</span>\n<span class=\"class\">                    <span class=\"title\">echo</span> <span class=\"title\">Content</span>::<span class=\"title\">returnCategories</span>($<span class=\"title\">categorys</span>) ?&gt;</span>\n<span class=\"class\">                &lt;/<span class=\"title\">ul</span>&gt;</span>\n<span class=\"class\">              &lt;/<span class=\"title\">li</span>&gt;</span></code></pre>\n<p>然后在下图蓝线所示的位置（ <code>127</code> 行左右 ）</p>\n<p><img src=\"https://vip2.loli.io/2020/11/26/H1s2CGy9NtWrgdh.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<p>插入以下代码：</p>\n<pre><code class=\"highlight php\">     &lt;!--start--&gt;\n  &lt;li <span class=\"class\"><span class=\"keyword\">class</span>=&quot;<span class=\"title\">line</span> <span class=\"title\">dk</span>&quot;&gt;&lt;/<span class=\"title\">li</span>&gt;</span>\n<span class=\"class\"> </span>\n<span class=\"class\">&lt;!--<span class=\"title\">Components</span>--&gt;</span>\n<span class=\"class\">  &lt;<span class=\"title\">li</span> <span class=\"title\">class</span>=&quot;<span class=\"title\">hidden</span>-<span class=\"title\">folded</span> <span class=\"title\">padder</span> <span class=\"title\">m</span>-<span class=\"title\">t</span> <span class=\"title\">m</span>-<span class=\"title\">b</span>-<span class=\"title\">sm</span> <span class=\"title\">text</span>-<span class=\"title\">muted</span> <span class=\"title\">text</span>-<span class=\"title\">xs</span>&quot;&gt;</span>\n<span class=\"class\">    &lt;<span class=\"title\">span</span>&gt;&lt;?<span class=\"title\">php</span> <span class=\"title\">_me</span>(&quot;分类&quot;) ?&gt;&lt;/<span class=\"title\">span</span>&gt;</span>\n<span class=\"class\">  &lt;/<span class=\"title\">li</span>&gt;</span>\n<span class=\"class\">  &lt;!--分类<span class=\"title\">category</span>--&gt;</span>\n<span class=\"class\">  &lt;!--循环输出分类--&gt;</span>\n<span class=\"class\">  &lt;?<span class=\"title\">php</span></span>\n<span class=\"class\">  $<span class=\"title\">this</span>-&gt;<span class=\"title\">widget</span>(&#x27;<span class=\"title\">Widget_Metas_Category_List</span>&#x27;)-&gt;<span class=\"title\">to</span>($<span class=\"title\">categorys</span>);</span>\n<span class=\"class\">  <span class=\"title\">echo</span> <span class=\"title\">Content</span>::<span class=\"title\">returnAsideCategories</span>($<span class=\"title\">categorys</span>) ?&gt;</span>\n<span class=\"class\">  &lt;!--<span class=\"title\">end</span>--&gt;</span></code></pre>\n<p>然后，刷新你的博客，是不是就有效果了呢？</p>\n<h2 id=\"图标设置\"><a class=\"anchor\" href=\"#图标设置\"></a>图标设置</h2>\n<p>设置方法：在 <code>$icons</code> 的 array 数组中插入 <code>'分类缩略名' =&gt; '图标'</code> 即可。</p>\n<h3 id=\"font-awesome\"><a class=\"anchor\" href=\"#font-awesome\"></a>Font Awesome</h3>\n<p>如果你引入了 <code>Font Awesome</code> 的图标的话，可以到 <a href=\"https://fontawesome.dashgame.com/\">https://fontawesome.dashgame.com/</a> 选择你喜欢的图标使用。</p>\n<h4 id=\"使用方法\"><a class=\"anchor\" href=\"#使用方法\"></a>使用方法</h4>\n<p>在 <a href=\"https://fontawesome.dashgame.com/\">https://fontawesome.dashgame.com/</a> 挑一个图标，在图标的名字前加入 <code>fa fa-</code> 即可。</p>\n<h4 id=\"使用样例\"><a class=\"anchor\" href=\"#使用样例\"></a>使用样例</h4>\n<p>使用 <code>archive</code> 图标时：</p>\n<p><img src=\"https://vip2.loli.io/2020/11/26/POyaCjgLveKJMDE.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<p>对应在 <code>$icons</code> 的 array 数组中插入的代码：</p>\n<pre><code class=\"highlight php\"><span class=\"string\">&#x27;archives&#x27;</span> =&gt; <span class=\"string\">&#x27;fa fa-archive&#x27;</span></code></pre>\n<h3 id=\"fontello\"><a class=\"anchor\" href=\"#fontello\"></a>Fontello</h3>\n<p>handsome 主题自带部分 <code>fontello</code> 图标，具体列表可在 <a href=\"https://auth.ihewro.com/user/docs/#/icons\">handsome 主题文档</a> 查看。</p>\n<h4 id=\"使用方法-t2\"><a class=\"anchor\" href=\"#使用方法-t2\"></a>使用方法</h4>\n<p>在图标的名字前加入 <code>fontello fontello-</code> 即可。</p>\n<h4 id=\"使用样例-t2\"><a class=\"anchor\" href=\"#使用样例-t2\"></a>使用样例</h4>\n<p>与 <code>Font Awesome</code> 相似，在此不多赘述。</p>\n<h3 id=\"feather\"><a class=\"anchor\" href=\"#feather\"></a>Feather</h3>\n<p>handsome 主题自带 <code>feather</code> 的所有图标，在此处使用需要一些变通措施。</p>\n<h4 id=\"使用方法-t3\"><a class=\"anchor\" href=\"#使用方法-t3\"></a>使用方法</h4>\n<p>在 <a href=\"https://feathericons.com/\">https://feathericons.com/</a> 选取好你需要的图标。</p>\n<p>然后在名称前插入 <code>&quot; data-feather=&quot;</code> ，再输入名称即可。</p>\n<h4 id=\"使用样例-t3\"><a class=\"anchor\" href=\"#使用样例-t3\"></a>使用样例</h4>\n<p>以 <code>airplay</code> 为例：</p>\n<p><img src=\"https://vip1.loli.io/2020/11/26/ObX7A1yuHoUj9fk.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<p>输入 <code>'airplay' =&gt; '&quot; data-feather=&quot;airplay'</code> 即可。</p>\n<h3 id=\"其他-svg-格式的图标\"><a class=\"anchor\" href=\"#其他-svg-格式的图标\"></a>其他 SVG 格式的图标</h3>\n<h3 id=\"使用方法-t4\"><a class=\"anchor\" href=\"#使用方法-t4\"></a>使用方法</h3>\n<p>在 svg 的开头加入 <code>&quot;&gt;&lt;/i&gt;</code> ，在结尾加入 <code>&lt;i</code> 即可。</p>\n<h3 id=\"使用样例-t4\"><a class=\"anchor\" href=\"#使用样例-t4\"></a>使用样例</h3>\n<p>下载下来的 <code>svg</code> 文件内容：</p>\n<p><img src=\"https://vip1.loli.io/2020/11/26/ukVefHwLng2PWhb.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<p>将其复制，然后在 <code>$icons</code> 的 array 数组中插入的代码：</p>\n<pre><code class=\"highlight php\"><span class=\"string\">&#x27;airplay&#x27;</span> =&gt; <span class=\"string\">&#x27;&quot;&gt;&lt;/i&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;16&quot; height=&quot;16&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; class=&quot;feather feather-airplay&quot;&gt;&lt;path d=&quot;M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1&quot;/&gt;&lt;polygon points=&quot;12 15 17 21 7 21 12 15&quot;/&gt;&lt;/svg&gt;&lt;i &#x27;</span></code></pre>\n<h2 id=\"后记\"><a class=\"anchor\" href=\"#后记\"></a>后记</h2>\n<h3 id=\"报错解决\"><a class=\"anchor\" href=\"#报错解决\"></a>报错解决</h3>\n<p>报错 <code>syntax error, unexpected 'xxx' (T_CONSTANT_ENCAPSED_STRING), expecting ')'</code> 咋办？</p>\n<p>检查你设置图标时的语法是否正确，正确语法如下：</p>\n<pre><code class=\"highlight php\"><span class=\"variable\">$icons</span> = <span class=\"keyword\">array</span>(\n    <span class=\"string\">&#x27;aaaaaaa&#x27;</span>  =&gt; <span class=\"string\">&#x27;glyphicon glyphicon-xx&#x27;</span>,\n    <span class=\"string\">&#x27;bbbb&#x27;</span>     =&gt; <span class=\"string\">&#x27;glyphicon glyphicon-xxxxxx&#x27;</span>,\n    <span class=\"string\">&#x27;cccccc&#x27;</span>   =&gt; <span class=\"string\">&#x27;fa fa-xxxxx&#x27;</span>,\n    <span class=\"string\">&#x27;dddddddd&#x27;</span> =&gt; <span class=\"string\">&#x27;fa fa-xxxx&#x27;</span>,\n    <span class=\"string\">&#x27;eeeee&#x27;</span>    =&gt; <span class=\"string\">&#x27;glyphicon glyphicon-xxxx&#x27;</span>,\n    <span class=\"string\">&#x27;fff&#x27;</span>      =&gt; <span class=\"string\">&#x27;fa fa-xxxxx&#x27;</span>\n)</code></pre>\n<blockquote>\n<p><strong>注意</strong></p>\n<p><code>array</code> 函数的参数中除了最后一行，每一行末尾都有一个 <code>,</code></p>\n</blockquote>\n",
            "tags": [
                "Web"
            ]
        }
    ]
}