[{"title":"Bilibili 1024 节 CTF Write Up","url":"//post/bilibili-1024-ctf-write-up/","content":"比赛地址： https://security.bilibili.com/sec1024/\nT1：页面的背后是什么？\nF12解决一切问题\n\nT2：真正的秘密只有特殊的设备才能看到\n改下UA就行了，轻松到手\n\n\nT3：密码是啥？\n看了看源码，没啥思路，最后随便试了试 admin root bilibili 什么的，竟然是对的。\n\n用户名 admin\n密码 bilibili\n\n另外，你告诉我什么是 falg ？\n\nT4：对不起，权限不足～\n第一次访问：\n\n第二次访问：\n\n查看源码可以发现有个 API 请求，查看请求数据得到以下信息。\n\nrole里面的东西，贴进谷歌一搜就知道它是 user 的 MD5 。\n和超级管理员相关的名字相信大家都知道，无非就是 admin Administrator root 之类的东西。\n挨个试，最后发现 Administrator 是正确的。\ncurl &quot;http://45.113.201.36/api/ctf/4&quot; --cookie &quot;role=7b7bc2512ee1fedcd76bdc68926d4f7b; session=***;&quot;\n\nT5：别人的秘密\n\n发现有个API，还有个 UID。\n最开始没想到需要从代码里面的&quot;初始UID&quot;开始扫，浪费了我好多时间。\nfor ((i=100336889;$i&lt;9999999999;i=($i+1))); do echo -e &quot;[$i] \\c&quot; &amp;&amp; curl &quot;http://45.113.201.36/api/ctf/5?uid=$&#123;i&#125;&quot; -H &#x27;User-Agent: bilibili Security Browser&#x27; -H &#x27;Cookie: session=*****; role=ee11cbb19052e40b07aac0ca060c23ee&#x27; ; done\n\nT6~T10：结束亦是开始，接下来的旅程，需要少年自己去探索啦～\n先扫了扫端口，发现有个 redis\n\nredis-cli -h 120.92.151.189 -p 6379\n登上去看看，发现了第八题的 flag 。\n\n然后爆破下目录\n\n有个 test.php ，访问下发现是个 JSfuck 加密，丢进浏览器里面解密下\n\n程序员最多的地方，那就肯定是 Github 了。\n然后找到了一个仓库 interesting-1024/end\n有个 end.php\n&lt;?php\n\n//filename end.php\n\n$bilibili = &quot;bilibili1024havefun&quot;;\n\n$str = intval($_GET[&#x27;id&#x27;]);\n$reg = preg_match(&#x27;/\\d/is&#x27;, $_GET[&#x27;id&#x27;]);\n\nif(!is_numeric($_GET[&#x27;id&#x27;]) and $reg !== 1 and $str === 1)&#123;\n    $content = file_get_contents($_GET[&#x27;url&#x27;]);\n    \n    //文件路径猜解\n    if (false)&#123;\n        echo &quot;还差一点点啦～&quot;;\n    &#125;else&#123;\n        echo $flag;\n    &#125;\n&#125;else&#123;\n    echo &quot;你想要的不在这儿～&quot;;\n&#125;\n?&gt;\n然后需要构造出一个 符合 !is_numeric($_GET['id']) and preg_match('/\\d/is', $_GET['id']) !== 1 and intval($_GET['id']) === 1 的请求即可。\n\n可以得到一个图片的链接 http://45.113.201.36/blog/imgs/bilibili_224a634752448def6c0ec064e49fe797_havefun.jpg\n\n这个图片的末尾就是第十个 flag 了（图中标蓝的地方）。\n","categories":["技术"],"tags":["CTF"]},{"title":"搭建 BIRD Looking Glass 速成指北","url":"//post/bird-looking-glass/","content":"BIRD 是 Linux 上常用的一款 BGP 路由软件。bird-lg-go 是 蓝天 使用 Go 语言编写的 Looking Glass 程序，内存占用比原版 bird-lg 更低。它提供了一个网页面板，可以显示各个服务器上的 BIRD 路由软件的状态，以及查询到指定 IP 的路由。\n\n\n项目地址：https://github.com/xddxdd/bird-lg-go\n成品： https://lg.dn42.as141776.net\n\n安装 Docker 和 Docker Compose\n虽然这个程序可以直接运行，但我还是比较喜欢套个 Docker 防止污染环境。\ncurl -sSL https://get.docker.com | sh\npip install docker-compose\n编排 Docker Compose 服务\n在运行 web 的服务器上找个地方（如 /var/bird-lg/），将下面的内容修改后写入 docker-compose.yml 中：\nversion: &#x27;3&#x27;\n\nservices:\n  bird-lg:\n    image: xddxdd/bird-lg-go\n    container_name: bird-lg\n    restart: always\n    environment:\n      - BIRDLG_SERVERS=cn1,eu1              # 节点列表，以逗号分隔\n      - BIRDLG_DOMAIN=dn42.as141776.net     # 节点 endpiont 后缀\n      - BIRDLG_TITLE_BRAND=Looking Glass    # 标签栏上显示的名称\n      - BIRDLG_NAVBAR_BRAND=Looking Glass   # 页面上显示的名称\n      - BIRDLG_WHOIS=whois.lantian.dn42     # Whois 服务器地址\n      - BIRDLG_DNS_INTERFACE=asn.dn42\n    ports:\n      - &quot;5000:5000&quot;\n  bird-lgproxy:\n    image: xddxdd/bird-lgproxy-go\n    container_name: bird-lgproxy\n    restart: always\n    volumes:\n      - &quot;/var/run/bird/bird.ctl:/var/run/bird/bird.ctl&quot;\n    ports:\n      - &quot;8000:8000&quot;\n在各个节点上只需要写入下面内容即可：\nversion: &#x27;3&#x27;\n\nservices:\n  bird-lgproxy:\n    image: xddxdd/bird-lgproxy-go\n    container_name: bird-lgproxy\n    restart: always\n    volumes:\n      - &quot;/var/run/bird/bird.ctl:/var/run/bird/bird.ctl&quot;\n    ports:\n      - &quot;8000:8000&quot;\n之后启动 Docker 容器：\ndocker-compose up -d\n使用 nginx 反代页面\n使用下方的配置启动反向代理即可。\nserver &#123;\n    listen      *:80;\n    listen      [::]:80;\n    server_name lg.dn42.as141776.net;\n\n    # reverse proxy\n    location / &#123;\n        proxy_pass                         http://127.0.0.1:5000;\n        proxy_http_version                 1.1;\n        proxy_cache_bypass                 $http_upgrade;\n\n        # Proxy headers\n        proxy_set_header Upgrade           $http_upgrade;\n        proxy_set_header Host              $host;\n        proxy_set_header X-Real-IP         $remote_addr;\n        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Forwarded-Host  $host;\n        proxy_set_header X-Forwarded-Port  $server_port;\n\n        # Proxy timeouts\n        proxy_connect_timeout              60s;\n        proxy_send_timeout                 60s;\n        proxy_read_timeout                 60s;\n    &#125;\n&#125;\n配置 DNS 解析\nbird-lg-go 的节点 endpiont 生成逻辑是 http://[节点].[endpoint后缀]:8000 ，如 http://eu1.dn42.as141776.net:8000 ，所以只需要去配置对应的解析。\n\n警告\n建议解析到节点的公网 IP 上，以免 DN42 炸掉时 Looking Glass 也一并炸掉。\n\n配置示例：\neu1.dn42.as141776.net.  3600    IN      A       136.243.221.96\ncn1.dn42.as141776.net.  3600    IN      CNAME   home.baoshuo.ren.\n成果\n\n","categories":["网络"],"tags":["DN42","BIRD","BGP"]},{"title":"【随笔】修改 Git 配置加速 clone GitHub 源码","url":"//post/clone-github-repo-faster/","content":"设置代理：\n# socks5协议，1080端口修改成自己的本地代理端口\ngit config --global http.https://github.com.proxy  socks5://127.0.0.1:1080\ngit config --global https.https://github.com.proxy socks5://127.0.0.1:1080\n\n# http协议，7890端口修改成自己的本地代理端口\ngit config --global http.https://github.com.proxy  http://127.0.0.1:7890\ngit config --global https.https://github.com.proxy http://127.0.0.1:7890\n之后运行 git config -l 即可查看代理设置情况。\n清除代理：\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy","categories":["随笔"],"tags":["Git"]},{"title":"【随笔】批量修改 Git 仓库的提交邮箱","url":"//post/change-git-submission-email/","content":"这几天重装了系统，一个不小心提交了好多 author 为 &quot;root&quot;&lt;root@localhost&gt; 的 commit ，于是寻找到了一个修改的方法。\n在仓库根目录下新建一个名为 fix.sh 的 shell 脚本，输入以下内容：\n#!/bin/bash\n \ngit filter-branch --env-filter &#x27;\nan=&quot;$GIT_AUTHOR_NAME&quot;\nam=&quot;$GIT_AUTHOR_EMAIL&quot;\ncn=&quot;$GIT_COMMITTER_NAME&quot;\ncm=&quot;$GIT_COMMITTER_EMAIL&quot;\n \nif [ &quot;$GIT_COMMITTER_EMAIL&quot; = &quot;错误邮箱&quot; ]\nthen\n    cn=&quot;正确名称&quot;\n    cm=&quot;正确邮箱&quot;\nfi\nif [ &quot;$GIT_AUTHOR_EMAIL&quot; = &quot;错误邮箱&quot; ]\nthen\n    an=&quot;正确名称&quot;\n    am=&quot;正确邮箱&quot;\nfi\n\nexport GIT_AUTHOR_NAME=&quot;$an&quot;\nexport GIT_AUTHOR_EMAIL=&quot;$am&quot;\nexport GIT_COMMITTER_NAME=&quot;$cn&quot;\nexport GIT_COMMITTER_EMAIL=&quot;$cm&quot;\n&#x27;\n完成后运行 ./fix.sh 即可。\nPS: 跑完记得删脚本，或者直接把脚本内容改好之后拖进终端\n","categories":["随笔"],"tags":["Git"]},{"title":"初探 DN42 网络","url":"//post/dn42-network/","content":"DN42 全称 Decentralized Network 42（42 号去中心网络），是一个大型、去中心化的 BGP 网络。DN42 的目的是模拟一个互联网。它使用了大量在目前互联网骨干上应用的技术（例如 BGP 和递归 DNS），可以很好地模拟一个真实的网络环境。\n\nDN42 适合以下类别的用户：\n\n想要研究网络技术，练习服务器、路由器等网络设备配置，甚至后续在真实互联网建立 AS 的用户\n拥有真实 AS，但担心自己配置错误广播出错误路由、干掉半个互联网，希望有个地方测试的用户（比如我）\n\nDN42 不适合以下类别的用户：\n\n单纯想要保护隐私、规避网络审查的用户\n在网内消耗大量流量，例如用于解锁流媒体服务的用户\n\n所以，DN42 的使用门槛还是比较高的。这与在真实互联网中一样，你要扮演一个 ISP（互联网服务提供商），注册自己的个人信息，ASN 号码，IPv4 和 IPv6 的地址池，并且使用 BGP 在自己的服务器上广播它们。你还要和其它的用户联系，和他们做 Peering（对等互联），一步步进入完整的 DN42 网络。\nDN42 在 172.20.0.0/14 和 fd00::/8 上运行，而这两个 IP 段都是分配给内网使用的。换句话说，你在 DN42 上怎么折腾，都不会影响到服务器其它的互联网连接。\n你可以通过加入这个 非官方 Telegram 群组 或者 IRC 频道 来寻求帮助。\n注意：DN42 是一个测试网络，所有人都在帮助所有人。即使你不小心搞砸了，也没有人会指责你。\n注册 DN42\n在注册过程中会大量使用到一些 UNIX 工具（如 Git、GnuPG 等），所以最好使用 Linux 或者 macOS 系统完成整个流程，如果你正在使用 Windows 系统，那么可以使用 WSL 。\n首先在 DN42 Git 中注册一个账户，并将 dn42/registry 这个仓库 clone 到本地。\n新建一个名为 [用户名]-[日期, YYYYMMDD]/[自定义名称] 的分支。\ngit checkout -b renbaoshuo-20210403/register\ngit push --set-upstream origin renbaoshuo-20210403/register\n在仓库内新建以下文件：\n\ndata/mntner/[昵称]-MNT\n\nmntner ：Maintainer（维护者），这个账户的名称，与文件名相同。\nadmin-c ：Admin Contact（管理员联系信息），需要指向后续创建的 person 文件，一般为 [昵称]-DN42 。\ntech-c ：Tech Contact（技术员联系信息），需要指向后续创建的 person 文件，一般为 [昵称]-DN42 。\nmnt-by ：Maintain by（由谁维护），指向这个账户本身。\nsource ：固定为 DN42。\nauth ：身份验证信息，接受 SSH 公钥 和 GPG 公钥\n\n你必须选择这两种验证方式中的至少一种，可以前往 官方 Wiki 中的身份认证页面 了解更多信息。\n\n\nremarks ：备注信息，可以不填。\n\n\ndata/person/[昵称]-DN42\n\nperson ：昵称。\ncontact ：你的联系方式，一般是你的邮箱。\nnic-hdl ：NIC handle，指向文件本身，与文件名相同。\nmnt-by ：Maintain by（由谁维护），由谁维护，指向你的 mntner 文件，[昵称]-MNT。\nsource ：固定为 DN42。\n\n\ndata/aut-num/[ASN]\n\naut-num ：AS 号。\n\n在国际互联网上，ASN 范围 4200000000 - 4294967294 是被保留作私下使用（private use）的，DN42 占用的就是其中的一块：4242420000 - 4242423999。只需要在这个区间内挑选一个你喜欢的、没有被他人占用的号码即可。\n如果你有自己的公网 ASN 的话，也可以直接在 DN42 中使用。\n\n\nas-name ：AS 的名称，一般只在 DN42 的一些网络结构示意图中看到。可以设置为 [昵称]-AS 。\ndescr ：AS 简介，一般只在结构图中看到，随意填写。\nadmin-c ：Admin Contact（管理员联系信息），指向你的 person 文件，[昵称]-DN42 。\ntech-c ：Tech Contact（技术员联系信息），指向你的 person 文件，[昵称]-DN42 。\nmnt-by ：Maintain by（由谁维护），由谁维护，指向你的 mntner 文件，[昵称]-MNT 。\nsource ：固定为 DN42 。\n\n\ndata/inetnum/[IPv4 Block]\n\ninetnum ：这个地址块的范围。\ncidr ：这个地址块的范围，与 inetnum 相同，只是以 CIDR 方式表示。\nnetname ：这个地址块的名称。可以设置为 [昵称]-IPV4 。\ndescr ：简介，随意填写。\ncountry ：你的国家代号，填 CN 代表中国大陆。\nadmin-c ：Admin Contact（管理员联系信息），指向你的 person 文件，[昵称]-DN42。\ntech-c ：Tech Contact（技术员联系信息），指向你的 person 文件，[昵称]-DN42。\nmnt-by ：Maintain by（由谁维护），由谁维护，指向你的 mntner 文件，[昵称]-MNT。\nnserver ：IP 地址反向解析的 DNS 服务器。如果你不知道/不需要反向DNS，可以去掉。\nstatus ：固定为 ASSIGNED。\nsource ：固定为 DN42。\nremarks ：备注信息，可以不填。\n\n\ndata/route/[IPv4 Block]\n\nroute ：这个地址块的范围。\ndescr ：简介，随意填写。\norigin ：填写你的 AS 号。\nmnt-by ：Maintain by（由谁维护），由谁维护，指向你的 mntner 文件，[昵称]-MNT。\nsource ：固定为 DN42。\n\n\ndata/inet6num/[IPv6 Block]\n\n与 IPv4 并无太大区别，只需将 inetnum 字段改为 inet6num 即可。\n\n\ndata/route6/[IPv6 Block]\n\n与 IPv4 并无太大区别，只需将 route 字段改为 route6 即可。\n\n\n\n你可以查看我提交的注册信息：Add AS141776 (#673)\n注意：各个项目的名称和值之间有一长串空格。这段空格的长度是不能随意修改的，当然也不能替换成 Tab。名称 + 冒号 + 空格的总长度 必须是 20 个字符。\n创建完成之后，切换到仓库的根目录，执行 git add . 暂存更改。\n你可以使用 git commit -S 使用 GPG 对提交进行签名，或者暂时不对提交进行签名，使用 SSH 公钥进行验证：在 commit 之后执行 git rev-parse HEAD | ssh-keygen -Y sign -f ~/.ssh/id_rsa -n dn42 命令，将输出的信息贴到 Pull Request 里面。\n执行 git push -f 命令，将修改上传到服务器上。\n\n使用黄色高亮标记出的菜单切换到你的分支，然后点击 New Pull Request 新建一个 Pull Request 即可。\n注意：请使用英文发 Pull Request ，否则审核人员会看不懂。\nDN42 WireGuard 使用入门\n安装 WireGuard\napt install wireguard wireguard-tools -y\n系统配置\n打开 Linux 内核的数据包转发功能：\necho &quot;net.ipv4.ip_forward=1&quot; &gt;&gt; /etc/sysctl.conf\necho &quot;net.ipv6.conf.default.forwarding=1&quot; &gt;&gt; /etc/sysctl.conf\necho &quot;net.ipv6.conf.all.forwarding=1&quot; &gt;&gt; /etc/sysctl.conf\nsysctl -p\n关闭 Linux 内核 rp_filter 的严格模式：\necho &quot;net.ipv4.conf.default.rp_filter=0&quot; &gt;&gt; /etc/sysctl.conf\necho &quot;net.ipv4.conf.all.rp_filter=0&quot; &gt;&gt; /etc/sysctl.conf\n关闭 UFW 等帮你配置 iptables 的工具。\n生成公钥和私钥\n先使用 wg genkey 命令生成一个私钥，然后使用 echo &quot;&lt;PUBLIC_KEY&gt;&quot; | wg pubkey 算出所对应的公钥。\n这是 WireGuard 隧道中双方的唯一认证方式，务必将其保管好，不要泄漏。\n添加配置\n新建一个文件：/etc/wireguard/dn42-&lt;PEER_NAME&gt;.conf\n将下方示例中用 &lt;&gt; 括住的内容替换为实际信息，然后写入文件。\n[Interface]\nPrivateKey = &lt;PRIVATE_KEY&gt;\nListenPort = &lt;PORT&gt;\nAddress = &lt;YOUR_IPv4&gt;/32, &lt;YOUR_IPv6&gt;/128\nPostUp = /usr/sbin/ip addr del dev dn42-&lt;PEER_NAME&gt; &lt;YOUR_IPv4&gt;/32 &amp;&amp; /usr/sbin/ip addr add dev dn42-&lt;PEER_NAME&gt; &lt;YOUR_IPv4&gt;/32 peer &lt;PEER_IPv4&gt;/32\nPostUp = /usr/sbin/ip addr del dev dn42-&lt;PEER_NAME&gt; &lt;YOUR_IPv6&gt;/128 &amp;&amp; /usr/sbin/ip addr add dev dn42-&lt;PEER_NAME&gt; &lt;YOUR_IPv6&gt;/128 peer &lt;PEER_IPv6&gt;/128\nTable = off\n\n[Peer]\nPublicKey = &lt;PEER_PUBLIC_KEY&gt;\nEndpoint = &lt;IP/DOMAIN&gt;:&lt;PORT&gt; # 仅当你向对方发起连接时才需要填写此项配置\nAllowedIPs = 0.0.0.0/0,::/0\n然后启动对应的 WireGuard 隧道：\nsystemctl start wg-quick@dn42-&lt;PEER_NAME&gt;\n使用 systemctl status wg-quick@dn42-&lt;PEER_NAME&gt; 查看启动状态。\n\n之后就可以使用 wg 命令查看隧道状态了。\n与他人进行对等互联（Peer）\n安装 BIRD2\napt install bird2 -y\n安装完成后先停止 bird2 的服务：\nsystemctl stop bird\n编写配置文件\n可以在 howto/Bird2 - DN42 Wiki 页面上找到一份示例配置文件。\napt 安装的 bird2 的配置文件一般是 /etc/bird/bird.conf。\n然后下载 ROA 配置文件：\ncurl -sfSLR &#123;-o,-z&#125;/etc/bird/roa_dn42.conf https://dn42.burble.com/roa/dn42_roa_bird2_4.conf\ncurl -sfSLR &#123;-o,-z&#125;/etc/bird/roa_dn42_v6.conf https://dn42.burble.com/roa/dn42_roa_bird2_6.conf\nbirdc configure\nROA 配置文件的自动下载与更新\n添加下面两个 crontab 定时任务：\n*&#x2F;15 * * * * curl -sfSLR &#123;-o,-z&#125;&#x2F;etc&#x2F;bird&#x2F;roa_dn42.conf https:&#x2F;&#x2F;dn42.burble.com&#x2F;roa&#x2F;dn42_roa_bird2_4.conf &amp;&amp; chronic birdc configure\n*&#x2F;15 * * * * curl -sfSLR &#123;-o,-z&#125;&#x2F;etc&#x2F;bird&#x2F;roa_dn42_v6.conf https:&#x2F;&#x2F;dn42.burble.com&#x2F;roa&#x2F;dn42_roa_bird2_6.conf &amp;&amp; chronic birdc configure\n建立对等互联\n在 /etc/bird/peers 目录下新建名为 &lt;PEER_NAME&gt;.conf 的文件，填入以下内容：\nprotocol bgp &lt;NEIGHBOR_NAME&gt; from dnpeers &#123;\n    neighbor &lt;NEIGHBOR_IP&gt; as &lt;NEIGHBOR_ASN&gt;;\n    direct;\n    # 在 IPv4 BGP 中禁用 IPv6 路由传递\n    ipv6 &#123;\n        import none;\n        export none;\n    &#125;;\n&#125;\n\nprotocol bgp &lt;NEIGHBOR_NAME&gt;_v6 from dnpeers &#123;\n    neighbor &lt;NEIGHBOR_IPv6&gt; as &lt;NEIGHBOR_ASN&gt;; # 或 neighbor &lt;NEIGHBOR_LINK_LOCAL_IP&gt; % &#39;dn42-&lt;PEER_NAME&gt;&#39; as &lt;NEIGHBOR_ASN&gt;;\n    direct;\n    # 在 IPv6 BGP 中禁用 IPv4 路由传递\n    ipv4 &#123;\n        import none;\n        export none;\n    &#125;;\n&#125;\n当然，BIRD2 也是支持多协议会话的，只需要像下面这样写就可以同时建立 IPv4 和 IPv6 会话了：\nprotocol bgp &lt;NEIGHBOR_NAME&gt; from dnpeers &#123;\n    neighbor &lt;NEIGHBOR_IPv6&gt; as &lt;NEIGHBOR_ASN&gt;; # 或 neighbor &lt;NEIGHBOR_LINK_LOCAL_IP&gt; % &#39;dn42-&lt;PEER_NAME&gt;&#39; as &lt;NEIGHBOR_ASN&gt;;\n&#125;\n配置完成后就可以开启 bird2 服务了：\nsystemctl start bird\nEnjoy it!\n我的 DN42 网络信息\n\n如果看不到上方的嵌入式页面，请访问 https://as141776.net/dn42.html 。\n参考资料\n\nGetting Started - DN42 Wiki\nGuide for creating a Pull Request - dn42/registry - DN42 Git\nDN42 实验网络介绍及注册教程（2020-10-01 更新） - Lan Tian @ Blog\n\n","categories":["网络"],"tags":["DN42","BGP"]},{"title":"【随笔】下载自己在 SM.MS 图床上的所有图片","url":"//post/download-smms-image/","content":"前提条件：有 SM.MS 图床账号，并且图片存储在该账号下。\n思路：先请求API，获取图片列表。遍历列表，判断本地是否存在该图片，若不存在则下载该图片。\n代码如下。\nimport requests\nimport os\nimport json\nimport pathlib\nimport sys\n\ndef getUploadedImages(token) -&gt; str:\n    url = &quot;https://sm.ms/api/v2/upload_history&quot;\n    headers = &#123;&quot;Authorization&quot;: token&#125;\n    return requests.get(url, headers=headers).text\n\ndata = json.loads(getUploadedImages(sys.argv[1]))\n\nfor img in data[&quot;data&quot;]:\n    path = &quot;./data/&quot; + img[&quot;storename&quot;]\n    if not pathlib.Path(path).is_file():\n        pic = requests.get(img[&quot;url&quot;]).content\n        f = open(path, &quot;wb&quot;)\n        f.write(pic)\n        f.close()\n        del pic\n        print(&quot;Successfully get &quot;+img[&quot;storename&quot;]+&quot; .&quot;)\n    else:\n        print(&quot;&quot;+img[&quot;storename&quot;]+&quot; is already exists.&quot;)\n使用方法：python3 smms-image.py &quot;[your token here]&quot;\n下载下来的图片会存到 ./data/ 目录下（请提前新建）。\n","categories":["随笔"]},{"title":"【补档】handsome 魔改教程：左侧边栏输出优化","url":"//post/handsome-leftbar-layout/","content":"感觉 handsome 自带的左侧边栏显示方法不太合适，于是自己参照了UCW大佬的教程 优化侧栏显示：实现更加美观的分类展示 改了一下。\n\n修改方法\n前置操作\n建议引入 Font Awesome 图标库，在 主题后台设置 -&gt; 开发者设置 -&gt; 自定义输出 head 头部的 HTML 代码 里面添加下面的代码即可。\n&lt;link href=&quot;https://cdn.bootcss.com/font-awesome/4.7.0/css/font-awesome.min.css&quot; rel=&quot;stylesheet&quot;&gt;\n上面的 Font Awesome 的 css 文件来自 BootCDN 提供，你也可以替换成自己的文件。\n改代码\n首先，打开 libs/Content.php ，在蓝线所示的位置：\n\n插入下面的代码：\n/**\n *\n * @param $categories\n * @return string\n */\npublic static function returnAsideCategories($categories)&#123;\n    $html    = &quot;&quot;;\n    $options = mget();\n    $icons   = array(\n        &#x27;default&#x27; =&gt; &#x27;glyphicon glyphicon-tasks&#x27;,\n        &#x27;github&#x27;  =&gt; &#x27;fa fa-github&#x27;\n        /**\n         *  格式：  &#x27;分类缩略名&#x27; =&gt; &#x27;图标名称&#x27;,\n         */\n    );\n    while($categories-&gt;next()) &#123;\n        if ($categories-&gt;levels === 0) &#123;\n            $children = $categories-&gt;getAllChildren($categories-&gt;mid);\n            if (!empty($children)) &#123;\n                $html .= &#x27;&lt;li&gt;&lt;a class=&quot;auto&quot;&gt;&lt;span class=&quot;pull-right text-muted&quot;&gt;&lt;i class=&quot;fontello icon-fw fontello-angle-right text&quot;&gt;&lt;/i&gt;&lt;i class=&quot;fontello icon-fw fontello-angle-down text-active&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;span class=&quot;nav-icon&quot;&gt;&lt;i class=&quot;&#x27; . $icons[$categories-&gt;slug] . &#x27;&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;span&gt;&#x27; . $categories-&gt;name . &#x27;&lt;/span&gt;&lt;/a&gt;&#x27;;\n                $childCategoryHtml =  &#x27;&lt;ul class=&quot;nav nav-sub dk&quot;&gt;&lt;li class=&quot;nav-sub-header&quot;&gt;&lt;a&gt;&lt;span&gt;&#x27; . $categories-&gt;name . &#x27;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&#x27;;\n                foreach($children as $mid)&#123;\n                    $child = $categories-&gt;getCategory($mid);\n                    $childCategoryHtml .= &#x27;&lt;li&gt;&lt;a href=&quot;&#x27; . $child[&#x27;permalink&#x27;] . &#x27;&quot;&gt;&lt;b class=&quot;badge pull-right&quot;&gt;&#x27; . $child[&#x27;count&#x27;] . &#x27;&lt;/b&gt;&lt;i class=&quot;&#x27; . $icons[$child[&#x27;slug&#x27;]] . &#x27;&quot;&gt;&lt;/i&gt;&lt;span&gt;&#x27; . $child[&#x27;name&#x27;] . &#x27;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&#x27;;\n                &#125;\n                $childCategoryHtml .= &#x27;&lt;/ul&gt;&#x27;;\n                $html .= $childCategoryHtml;\n                $html .= &quot;&lt;/li&gt;&quot;;\n            &#125; else &#123;\n                $html .= &#x27;&lt;li&gt;&lt;a href=&quot;&#x27; . $categories-&gt;permalink . &#x27;&quot; class=&quot;auto&quot;&gt;&lt;b class=&quot;badge pull-right&quot;&gt;&#x27; . $categories-&gt;count . &#x27;&lt;/b&gt;&lt;span class=&quot;nav-icon&quot;&gt;&lt;i class=&quot;&#x27;.$icons[$categories-&gt;slug].&#x27;&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;span&gt;&#x27; . $categories-&gt;name . &#x27;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&#x27;;\n            &#125;\n        &#125;\n    &#125;\n    return $html;\n&#125;\n在 component/aside.php 中找到以下代码（大约 131 ~ 160 行），删除。\n              &lt;!--分类category--&gt;\n                &lt;?php\n                $class = &quot;&quot;;\n                    if (in_array(&quot;openCategory&quot;,$this-&gt;options-&gt;featuresetup))&#123;\n                        $class = &quot;class=\\\\&quot;active\\\\&quot;&quot;;\n                    &#125;\n                    ?&gt;\n              &lt;li &lt;?php echo $class; ?&gt;&gt;\n                &lt;a class=&quot;auto&quot;&gt;\n                  &lt;span class=&quot;pull-right text-muted&quot;&gt;\n                    &lt;i class=&quot;fontello icon-fw fontello-angle-right text&quot;&gt;&lt;/i&gt;\n                    &lt;i class=&quot;fontello icon-fw fontello-angle-down text-active&quot;&gt;&lt;/i&gt;\n                  &lt;/span&gt;\n&lt;!--                  &lt;i class=&quot;glyphicon glyphicon-th&quot;&gt;&lt;/i&gt;--&gt;\n                    &lt;span class=&quot;nav-icon&quot;&gt;&lt;i data-feather=&quot;grid&quot;&gt;&lt;/i&gt;&lt;/span&gt;\n\n                    &lt;span&gt;&lt;?php _me(&quot;分类&quot;) ?&gt;&lt;/span&gt;\n                &lt;/a&gt;\n                &lt;ul class=&quot;nav nav-sub dk&quot;&gt;\n                  &lt;li class=&quot;nav-sub-header&quot;&gt;\n                    &lt;a&gt;\n                      &lt;span&gt;&lt;?php _me(&quot;分类&quot;) ?&gt;&lt;/span&gt;\n                    &lt;/a&gt;\n                  &lt;/li&gt;\n                  &lt;!--循环输出分类--&gt;\n                    &lt;?php\n                    $this-&gt;widget(&#x27;Widget_Metas_Category_List&#x27;)-&gt;to($categorys);\n                    echo Content::returnCategories($categorys) ?&gt;\n                &lt;/ul&gt;\n              &lt;/li&gt;\n然后在下图蓝线所示的位置（ 127 行左右 ）\n\n插入以下代码：\n     &lt;!--start--&gt;\n  &lt;li class=&quot;line dk&quot;&gt;&lt;/li&gt;\n \n&lt;!--Components--&gt;\n  &lt;li class=&quot;hidden-folded padder m-t m-b-sm text-muted text-xs&quot;&gt;\n    &lt;span&gt;&lt;?php _me(&quot;分类&quot;) ?&gt;&lt;/span&gt;\n  &lt;/li&gt;\n  &lt;!--分类category--&gt;\n  &lt;!--循环输出分类--&gt;\n  &lt;?php\n  $this-&gt;widget(&#x27;Widget_Metas_Category_List&#x27;)-&gt;to($categorys);\n  echo Content::returnAsideCategories($categorys) ?&gt;\n  &lt;!--end--&gt;\n然后，刷新你的博客，是不是就有效果了呢？\n图标设置\n设置方法：在 $icons 的 array 数组中插入 '分类缩略名' =&gt; '图标' 即可。\nFont Awesome\n如果你引入了 Font Awesome 的图标的话，可以到 https://fontawesome.dashgame.com/ 选择你喜欢的图标使用。\n使用方法\n在 https://fontawesome.dashgame.com/ 挑一个图标，在图标的名字前加入 fa fa- 即可。\n使用样例\n使用 archive 图标时：\n\n对应在 $icons 的 array 数组中插入的代码：\n&#x27;archives&#x27; =&gt; &#x27;fa fa-archive&#x27;\nFontello\nhandsome 主题自带部分 fontello 图标，具体列表可在 handsome 主题文档 查看。\n使用方法\n在图标的名字前加入 fontello fontello- 即可。\n使用样例\n与 Font Awesome 相似，在此不多赘述。\nFeather\nhandsome 主题自带 feather 的所有图标，在此处使用需要一些变通措施。\n使用方法\n在 https://feathericons.com/ 选取好你需要的图标。\n然后在名称前插入 &quot; data-feather=&quot; ，再输入名称即可。\n使用样例\n以 airplay 为例：\n\n输入 'airplay' =&gt; '&quot; data-feather=&quot;airplay' 即可。\n其他 SVG 格式的图标\n使用方法\n在 svg 的开头加入 &quot;&gt;&lt;/i&gt; ，在结尾加入 &lt;i 即可。\n使用样例\n下载下来的 svg 文件内容：\n\n将其复制，然后在 $icons 的 array 数组中插入的代码：\n&#x27;airplay&#x27; =&gt; &#x27;&quot;&gt;&lt;/i&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;16&quot; height=&quot;16&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; class=&quot;feather feather-airplay&quot;&gt;&lt;path d=&quot;M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1&quot;/&gt;&lt;polygon points=&quot;12 15 17 21 7 21 12 15&quot;/&gt;&lt;/svg&gt;&lt;i &#x27;\n后记\n报错解决\n报错 syntax error, unexpected 'xxx' (T_CONSTANT_ENCAPSED_STRING), expecting ')' 咋办？\n检查你设置图标时的语法是否正确，正确语法如下：\n$icons = array(\n    &#x27;aaaaaaa&#x27;  =&gt; &#x27;glyphicon glyphicon-xx&#x27;,\n    &#x27;bbbb&#x27;     =&gt; &#x27;glyphicon glyphicon-xxxxxx&#x27;,\n    &#x27;cccccc&#x27;   =&gt; &#x27;fa fa-xxxxx&#x27;,\n    &#x27;dddddddd&#x27; =&gt; &#x27;fa fa-xxxx&#x27;,\n    &#x27;eeeee&#x27;    =&gt; &#x27;glyphicon glyphicon-xxxx&#x27;,\n    &#x27;fff&#x27;      =&gt; &#x27;fa fa-xxxxx&#x27;\n)\n\n注意\narray 函数的参数中除了最后一行，每一行末尾都有一个 ,\n\n本文为补档文章，原系统中最后一次修改时间：2020年4月12日 23:31:25\n本文代码已经适配 handsome 7.2 版本，可放心使用。\n","categories":["技术"],"tags":["Web"]},{"title":"你好，2021 | 博客迁移记录","url":"//post/hello-2021/","content":"再见，2020。\n\n最近总是觉得博客太慢了，于是乎，我把博客迁移到自己的服务器上面了。\n服务器端操作\n安装 nginx\napt 一把梭，省时又省力。\napt install nginx -y\n配置 nginx\n简简单单配置了一下，没有什么过于复杂的东西。\n在申请 SSL 证书之前，不要写 HTTPS 的配置。\nserver &#123;\n    listen      80;\n    listen      [::]:80;\n    server_name blog.baoshuo.ren;\n\n    # ACME-challenge\n    location ^~ /.well-known/acme-challenge/ &#123;\n        allow all;\n        root /var/www/_letsencrypt;\n    &#125;\n\n    location / &#123;\n        return 301 https://blog.baoshuo.ren$request_uri;\n    &#125;\n&#125;\n申请 SSL 证书\n由于笔者懒得每年换证书，所以就用了 Let’s Encrypt + acme.sh 的组合套装来配置 SSL 。\n当然，ECC 证书也是少不了的。\nacme.sh --issue -d baoshuo.ren -d www.baoshuo.ren -d blog.baoshuo.ren \\\n    -w /var/www/_letsencrypt/ \\\n    --renew-hook &quot;acme.sh --install-cert -d baoshuo.ren \\\n    --key-file /***/baoshuo.ren.key \\\n    --fullchain-file /***/baoshuo.ren.cer \\\n    --reloadcmd \\&quot;service nginx force-reload\\&quot;&quot;\nacme.sh --issue --keylength ec-256 \\\n    -d baoshuo.ren -d www.baoshuo.ren -d blog.baoshuo.ren \\\n    -w /var/www/_letsencrypt/ \\\n    --renew-hook &quot;acme.sh --install-cert -d baoshuo.ren --ecc \\\n    --key-file /***/baoshuo.ren.ecc.key \\\n    --fullchain-file /***/baoshuo.ren.ecc.cer \\\n    --reloadcmd \\&quot;service nginx force-reload\\&quot;&quot;\n申请完成后，将 RSA 和 ECC 证书添加到 nginx 配置中，在配置文件中写入以下内容：\nserver &#123;\n    listen                               443 ssl http2;\n    listen                               [::]:443 ssl http2;\n    server_name                          blog.baoshuo.ren;\n    root                                 /var/www/blog/;\n\n    # SSL\n    ssl_certificate                      /***/baoshuo.ren.cer;\n    ssl_certificate_key                  /***/baoshuo.ren.key;\n    ssl_certificate                      /***/baoshuo.ren.ecc.cer;\n    ssl_certificate_key                  /***/baoshuo.ren.ecc.key;\n    ssl_protocols                        TLSv1.2 TLSv1.3;\n    ssl_ciphers                          ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n\n    # HSTS\n    add_header Strict-Transport-Security &#x27;max-age=31536000&#x27;;\n\n    # logging\n    error_log                            /var/log/nginx/blog.baoshuo.ren.error.log warn;\n\n    # 404 page\n    error_page                           404 /404.html;\n&#125;\n上方使用的 SSL 配置是 Mozilla 推荐的现代化配置[1] ，如果需要更好的兼容性，可以使用 Mozilla 提供的中等安全性配置[2] ：\nssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;\nssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA;\nssl_prefer_server_ciphers on;\n将博客文件同步到服务器上\n在 .github/workflows 目录下创建一个 server.yml 文件，写入以下内容：\nname: Deploy blog to Server\n\non:\n  push:\n    branches: [ master ]\n  workflow_dispatch:\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: Deploy\n        uses: easingthemes/ssh-deploy@v2.1.5\n        env:\n          SSH_PRIVATE_KEY: $&#123;&#123; secrets.SSH_PRIVATE_KEY &#125;&#125;\n          ARGS: &quot;-avz --delete  --exclude &#x27;.git/*&#x27; --exclude &#x27;.github/*&#x27; --exclude &#x27;.gitlab-ci.yml&#x27; --exclude &#x27;.nojekyll&#x27;&quot;\n          REMOTE_HOST: $&#123;&#123; secrets.REMOTE_HOST &#125;&#125;\n          REMOTE_USER: $&#123;&#123; secrets.REMOTE_USER &#125;&#125;\n          TARGET: $&#123;&#123; secrets.TARGET &#125;&#125;\n之后在 https://github.com/&#123;username&#125;/&#123;repo&#125;/settings/secrets/actions 中添加四个 Secrets 。\n\n\n\n名称\n内容\n\n\n\n\nREMOTE_HOST\n服务器 IP 地址\n\n\nREMOTE_USER\n服务器用户名\n\n\nSSH_PRIVATE_KEY\n连接到服务器的 SSH 私钥\n\n\nTARGET\n存放文件的路径\n\n\n\n将博客文件 push 到仓库中，就能在服务器上查看到文件了。\n参考资料\n\n\n\nnginx 1.18.0, modern config, OpenSSL 1.1.1f - Mozilla SSL Configuration Generator ↩︎\n\nnginx 1.18.0, intermediate config, OpenSSL 1.1.1f - Mozilla SSL Configuration Generator ↩︎\n\n\n\n","categories":["技术"],"tags":["折腾"]},{"title":"Linux Systemd 入门","url":"//post/linux-systemd/","content":"Systemd 简介\nSystemd 是 Linux 电脑操作系统之下的一套中央化系统及设置管理程序，包括有守护进程、程序库以及应用软件，由 Lennart Poettering 带头开发。其开发目标是提供更优秀的框架以表示系统服务间的依赖关系，并依此实现系统初始化时服务的并行启动，同时达到降低 Shell 的系统开销的效果，最终代替现在常用的 System V 与 BSD 风格 init 程序。[1]\n\n目前绝大多数的 Linux 发行版都已采用 systemd 代替原来的 System V。\n常用命令列表[2]\n\n列出所有已加载的单元：systemctl list-units\n查看指定的单元的配置：systemctl cat [serviceName] (e.g. systemctl cat sshd.service)\n修改指定单元的配置：systemctl edit [serviceName] (e.g. systemctl edit sshd.service)\n查看指定的单元的运行状态： systemctl status [serviceName|pid] (e.g. systemctl status sshd.service)\n\n如果指定了单元名称，那么显示指定单元的运行时状态信息，以及这些单元最近的日志数据。\n如果指定了 PID ，那么显示指定 PID 所属单元的运行时状态信息，以及这些单元最近的日志数据。\n如果未指定任何单元或 PID ，那么显示整个系统的状态信息， 此时若与 --all 连用，则同时显示所有已加载的单元（可以用 -t 限定单元类型）的状态信息。\n\n\n启动指定的单元：systemctl start [serviceName] (e.g. systemctl start sshd.service)\n\n被指定的单元必须是已经被加载的。\n\n\n重新启动指定的单元：systemctl restart [serviceName] (e.g. systemctl restart sshd.service)\n\n如果指定的单元没有启动，则直接启动它们。\n\n\n停止指定的单元：systemctl stop [serviceName] (e.g. systemctl stop sshd.service)\n启用指定的单元：systemctl enable [serviceName] (e.g. systemctl enable sshd.service)\n停用指定的单元：systemctl disable [serviceName] (e.g. systemctl disable sshd.service)\n重新加载指定的单元的配置：systemctl reload [serviceName] (e.g. systemctl reload sshd.service)\n重新加载所有已修改过的配置文件：systemctl daemon-reload\n\n开机启动\n对于那些支持 Systemd 的软件，安装的时候，会自动在 /usr/lib/systemd/system 目录添加一个配置文件。\n如果你想让该软件开机启动，就执行下面的命令（以 sshd.service 为例）。\nsudo systemctl enable sshd.service\n上面的命令相当于在 /etc/systemd/system 目录添加一个符号链接，指向 /usr/lib/systemd/system 里面的 sshd.service 文件。\n这是因为开机时，Systemd 只执行 /etc/systemd/system 目录里面的配置文件。这也意味着，如果把修改后的配置文件放在该目录，就可以达到覆盖原始配置的效果。\nUnit[3]\n配置文件\n对于那些没有原生支持 Systemd 的软件，可以自行编写配置文件来达到开机自启的目的。\n\n我曾经为 Sakura Frp 编写过一个脚本：getfrp.sh （存档 于 GitHub Gist） ，里面便是使用了自行编写配置文件的方法。\n\n以 sshd.service 这个配置文件为例子，来分析一下 Systemd 的配置文件：\n# /lib/systemd/system/ssh.service\n\n[Unit]\nDescription=OpenBSD Secure Shell server\nDocumentation=man:sshd(8) man:sshd_config(5)\nAfter=network.target auditd.service\nConditionPathExists=!/etc/ssh/sshd_not_to_be_run\n\n[Service]\nEnvironmentFile=-/etc/default/ssh\nExecStartPre=/usr/sbin/sshd -t\nExecStart=/usr/sbin/sshd -D $SSHD_OPTS\nExecReload=/usr/sbin/sshd -t\nExecReload=/bin/kill -HUP $MAINPID\nKillMode=process\nRestart=on-failure\nRestartPreventExitStatus=255\nType=notify\nRuntimeDirectory=sshd\nRuntimeDirectoryMode=0755\n\n[Install]\nWantedBy=multi-user.target\nAlias=sshd.service\n可以看出这个文件一共有三个部分：[Unit], [Service] 和 [Install] 。\n配置项通常是可以重复的，但靠后的配置项会取代前面同名的配置项。\n因此，如果你想要将某项的设定值归零，可以在该配置所在部分的结尾添加一个空值项（如 After=），就将该设定归零了。\n[Unit]: 启动顺序与依赖关系\n这个部分主要有以下几个配置项：\n\nDescription: 当前服务的简易说明\nDocumentation: 文档位置（以空格分隔）\n\n该项可以是网页链接，也可以是 manpages 的名称，亦或是文件路径。\n\n\nBefore: 在哪些服务之前启动\n\n本字段不涉及依赖关系，只是说明了启动顺序\n\n\nAfter: 在哪些服务之后启动\n\n本字段不涉及依赖关系，只是说明了启动顺序\n以 sshd.service 中的配置为例，该服务需要在 network.target 和 auditd.service 之后启动\n\n\nWants: 弱依赖的服务\n\n若被依赖的服务被停止，这个服务不需要停止\n\n\nRequires: 强依赖的服务\n\n若被依赖的服务没有启动，则不能启动这个服务\n若被依赖的服务被停止，则这个服务也必须停止\n\n\nConflicts: 冲突的服务\n\n如果列出的服务中有一个已经运行，那么就不能启动这个服务\n\n\n\n[Service]: 启动行为\n这个部分主要有以下几个配置项：\n\nType: 启动类型。默认值为 simple ，可选值如下：\n\nsimple: 使 ExecStart 项启动的项成为主进程\nforking: ExecStart 项将会以 fork() 的形式启动，此时父进程将会退出，子进程将成为主进程\noneshot: 类似于 simple ，但只执行一次，Systemd 会等它执行完，才启动其他服务\ndbus: 类似于 simple ，但会等待 D-Bus 信号后启动\nnotify: 类似于 simple ，启动结束后会发出通知信号，然后 Systemd 再启动其他服务\nidle: 类似于 simple ，但是要等到其他任务都执行完，才会启动该服务。\n\n这个选项的其中一种使用场合是为让该服务的输出，不与其他服务的输出相混合\n这个选项的另外一种使用场合是执行只需要再开机的时候执行一次的程序\n\n\n\n\nEnvironment: 指定环境变量\nEnvironmentFile: 环境变量配置文件，该文件内部的 key=value 形式的配置可以在当前文件中以 $key 获取\nExecStart: 服务启动时执行的命令\nExecReload: 服务重启时执行的命令\nExecStop: 服务停止时执行的命令\nExecStartPre: 服务启动之前执行的命令\nExecStartPost: 服务启动之后执行的命令\nExecStopPost: 服务停止之后执行的命令\nRestart: 服务退出后的重启方式，默认值为 no\n\nno: 进程退出后不会重启\non-success: 当进程正常退出时（退出状态码为 0）重启\non-failure: 当进程非正常退出时（退出状态码不为 0、被信号终止、程序超时）重启\non-abnormal: 当进程被信号终止或程序超时时重启\non-abort: 当收到没有捕捉到的信号终止时重启\non-watchdog: 当进程超时退出时重启\nalways: 总是重启（不论原因）\n对于守护进程，推荐设为 on-failure。对于那些允许发生错误退出的服务，可以设为 on-abnormal。\n\n\nRemainAfterExit: 退出后是否重新启动\n\n当设定为 RemainAfterExit=1 时，则当这个服务所属的所有程序都终止之后，此服务会再尝试启动。这对于 Type=oneshot 的服务很有帮助\n\n\nTimeoutSec: 当这个服务在启动或停止时失败进入&quot;强制结束&quot;状态的等待秒数。\nKillMode: 定义 Systemd 如何停止这个服务，默认值为 control-group\n\ncontrol-group: 服务停止时关闭此控制组中所有的进程\nprocess: 服务停止时只终止主进程（ExecStart 接的后面那串指令）\nmixed: 主进程将收到 SIGTERM 信号，子进程收到 SIGKILL 信号\nnone: 没有进程会被杀掉，只是执行服务的 stop 命令\n\n\nRestartSec: 表示 Systemd 重启服务之前，需要等待的秒数（默认是 100ms）\n\n所有的启动设置之前，都可以加上一个连词号 (-) ，表示 「抑制错误」 ，即发生错误的时候，不影响其他命令的执行。以 sshd.service 为例，文件中的 EnvironmentFile=-/etc/sysconfig/sshd（注意等号后面的那个连词号），表示 /etc/sysconfig/sshd 文件不存在，也不会抛出错误。\n[Install]: 安装行为\n这个部分主要有以下几个配置项：\n\nWantedBy: 表示该服务所在的 Target\n\n一般来说，服务性质的单元都是挂在 multi-user.target 下的\n\n\nAlso: 当该服务被启用时需要同时启用的单元\nAlias: 指定创建软链接时链接至本单元配置文件的别名文件\n\n模板实例\n此处以 getty@.service 文件为例，来分析一下它是如何做到使用一个配置文件启动多个服务的：\n# /lib/systemd/system/getty@.service\n#\n#  SPDX-License-Identifier: LGPL-2.1+\n#\n#  This file is part of systemd.\n#\n#  systemd is free software; you can redistribute it and/or modify it\n#  under the terms of the GNU Lesser General Public License as published by\n#  the Free Software Foundation; either version 2.1 of the License, or\n#  (at your option) any later version.\n\n[Unit]\nDescription=Getty on %I\nDocumentation=man:agetty(8) man:systemd-getty-generator(8)\nDocumentation=http://0pointer.de/blog/projects/serial-console.html\nAfter=systemd-user-sessions.service plymouth-quit-wait.service getty-pre.target\nAfter=rc-local.service\n\n# If additional gettys are spawned during boot then we should make\n# sure that this is synchronized before getty.target, even though\n# getty.target didn&#x27;t actually pull it in.\nBefore=getty.target\nIgnoreOnIsolate=yes\n\n# IgnoreOnIsolate causes issues with sulogin, if someone isolates\n# rescue.target or starts rescue.service from multi-user.target or\n# graphical.target.\nConflicts=rescue.service\nBefore=rescue.service\n\n# On systems without virtual consoles, don&#x27;t start any getty. Note\n# that serial gettys are covered by serial-getty@.service, not this\n# unit.\nConditionPathExists=/dev/tty0\n\n[Service]\n# the VT is cleared by TTYVTDisallocate\n# The &#x27;-o&#x27; option value tells agetty to replace &#x27;login&#x27; arguments with an\n# option to preserve environment (-p), followed by &#x27;--&#x27; for safety, and then\n# the entered username.\nExecStart=-/sbin/agetty -o &#x27;-p -- \\\\u&#x27; --noclear %I $TERM\nType=idle\nRestart=always\nRestartSec=0\nUtmpIdentifier=%I\nTTYPath=/dev/%I\nTTYReset=yes\nTTYVHangup=yes\nTTYVTDisallocate=yes\nKillMode=process\nIgnoreSIGPIPE=no\nSendSIGHUP=yes\n\n# Unset locale for the console getty since the console has problems\n# displaying some internationalized messages.\nUnsetEnvironment=LANG LANGUAGE LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_MESSAGES LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT LC_IDENTIFICATION\n\n[Install]\nWantedBy=getty.target\nDefaultInstance=tty1\n运行 systemctl status getty@tty1.service 命令，可以看到如下图所示的输出：\n\n不难发现图中标橙色的字符与上方配置文件中的 %I 相对应，并且配置文件的名称也不是 getty@tty1.service ，而是 getty@.service ，这种配置文件叫做 「模板实例」 。\n启动时只需要在 @ 后面添加需要填入 %I 位置的参数即可，如 getty@tty9.service 。\nTarget\n一般来说，常用的 Target 有两个：一个是 multi-user.target ，表示多用户命令行状态；另一个是 graphical.target ，表示图形用户状态（它依赖于 multi-user.target），这一点和 SysVinit 的运行级别很是相似。\n官方提供了一张非常清晰的 Target 依赖关系图：\n\n图源：https://www.freedesktop.org/software/systemd/man/bootup.html#System Manager Bootup\n配置文件\n以 multi-user.target 这个文件为例子，来简要说明一下 Target 的配置文件中的主要项目：\n# /lib/systemd/system/multi-user.target\n#\n#  SPDX-License-Identifier: LGPL-2.1+\n#\n#  This file is part of systemd.\n#\n#  systemd is free software; you can redistribute it and/or modify it\n#  under the terms of the GNU Lesser General Public License as published by\n#  the Free Software Foundation; either version 2.1 of the License, or\n#  (at your option) any later version.\n\n[Unit]\nDescription=Multi-User System\nDocumentation=man:systemd.special(7)\nRequires=basic.target\nConflicts=rescue.service rescue.target\nAfter=basic.target rescue.service rescue.target\nAllowIsolate=yes\n\nRequires: 要求于某个 Target 一起运行\nConflicts: 冲突的 Target\nAfter: 在哪些 Target 之后启动\nAllowIsolate: 是否允许使用 systemctl isolate 命令切换到这个 Target\n\n参考资料\n\n\n\nSystemd - Wikipedia （存档 于 互联网档案馆） ↩︎\n\nSystemd - Ubuntu Manpages （存档 于 互联网档案馆） ↩︎\n\n第十七章 认识系统服务(daemons) - 鸟哥的Linux私房菜 （存档 于 互联网档案馆） ↩︎\n\n\n\n","categories":["技术"],"tags":["Linux"]},{"title":"洛谷爬虫","url":"//post/luogu-spider/","content":"截至目前，洛谷已经有了近两万道题目和四十余万名用户。本代码爬取了一些样本，以供后续（可能）的数据分析。\n\n本次爬取遵守洛谷的 robots.txt 中的要求，不爬取提交记录页面。为了避免影响洛谷的正常运行，脚本只采用单线程进行爬取。\nUser-Agent: *\nDisallow: /record\nDisallow: /recordnew\n爬取题目信息\n题目数据获取\n先使用 curl 获取洛谷的题目页面：\n\n可以看出我们需要的数据都在传入给 decodeURIComponent() 函数的字符串中，正则匹配取出即可。\n下面是代码实现：\n#!/usr/bin/python3\n# coding: utf-8\n\nimport requests\nimport re\nimport json\nfrom urllib.parse import unquote\n\n# 设置请求头\nheaders = &#123;\n    &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36 Spider/0.1&quot;\n&#125;\n\ndef getProblemJSON(pid):\n    return json.loads(unquote(str(re.findall(r&#x27;decodeURIComponent\\(&quot;(.*)&quot;\\)&#x27;, requests.get(url=&quot;https://www.luogu.com.cn/problem/P1000&quot;, headers=headers).text)[0])))\n\ndata = getProblemJSON(&quot;P1000&quot;)\nprint(json.dumps(data[&#x27;currentData&#x27;], sort_keys=True, indent=4))\nUpdate at 2021/02/05:\n添加参数 _contentOnly=1 可以直接获取JSON格式的信息，无需再正则匹配。\n--- a/tools/spider.py\n+++ b/tools/spider.py\n@@ -19,8 +19,7 @@\n def getProblem(pid):\n-    url = f&quot;https://www.luogu.com.cn/problem/&#123;pid&#125;&quot;\n-    redata = re.findall(r&#x27;decodeURIComponent\\(&quot;(.*)&quot;\\)&#x27;,\n-                        requests.get(url, headers=headers).text)\n+    url = f&quot;https://www.luogu.com.cn/problem/&#123;pid&#125;?_contentOnly=1&quot;\n+    redata = requests.get(url, headers=headers).text\n     if len(redata) == 0:\n         return &#123; &quot;code&quot;: 403 &#125;\n     else:\n-        return json.loads(unquote(redata[0]))\n+        return json.loads(redata)\n处理题目数据\n这里只留下 currentData.problem 字段里面的内容即可。\n#!/usr/bin/python3\n# coding: utf-8\n\nimport requests\nimport re\nimport json\nfrom urllib.parse import unquote\n\nf = open(&#x27;problems.json&#x27;, &#x27;w&#x27;)\nres = []\n\nheaders = &#123;\n    &quot;user-agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4331.0 Safari/537.36 spider/0.1&quot;,\n&#125;\n\n\ndef getProblem(pid):\n    return json.loads(requests.get(f&quot;https://www.luogu.com.cn/problem/&#123;pid&#125;?_contentOnly=1&quot;, headers=headers).text)[&#x27;currentData&#x27;]\n\n\nfor i in range(1000, 1010):\n    tmpdict = &#123;&#125;\n    tmpdict[&quot;pid&quot;] = f&quot;P&#123;i&#125;&quot;\n    tmpdict[&quot;data&quot;] = getProblem(f&quot;P&#123;i&#125;&quot;)[&quot;problem&quot;]\n    res.append(tmpdict)\n\n# print(res)\nf.write(json.dumps(res, indent=4).replace(&quot;\\\\t&quot;, &quot;    &quot;))\n最终代码\n#!/usr/bin/python3\n# coding: utf-8\n\nimport requests\nimport json\nimport time\nimport pymongo\n\ndbclient = pymongo.MongoClient(&quot;mongodb://127.0.0.1:27017/&quot;)\nluogudb = dbclient[&quot;luogu&quot;]\ndbcol = luogudb[&quot;problem&quot;]\n\nheaders = &#123;\n    &quot;user-agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4331.0 Safari/537.36 spider/0.1&quot;,\n&#125;\n\n\ndef getProblem(pid):\n    url = f&quot;https://www.luogu.com.cn/problem/&#123;pid&#125;?_contentOnly=1&quot;\n    redata = requests.get(url, headers=headers).text\n    return json.loads(redata)\n\nfor i in range(1000, 7103):\n    pid = f&quot;P&#123;i&#125;&quot;\n    if list(dbcol.find(&#123;&#x27;pid&#x27;: pid&#125;)) == []:\n        tmpdict = &#123;&#125;\n        tmpdict[&quot;pid&quot;] = pid\n        tmpdata = getProblem(pid)\n        if tmpdata[&quot;code&quot;] == 200:\n            tmpdict[&quot;data&quot;] = getProblem(pid)[&quot;currentData&quot;][&quot;problem&quot;]\n            dbcol.insert_one(tmpdict)\n            print(f&quot;Successfully get problem &#123;pid&#125;.&quot;)\n            time.sleep(1)\n        else:\n            print(f&quot;Fail to get problem &#123;pid&#125;.&quot;)\n    else:\n        print(f&quot;Problem &#123;pid&#125; is already exists.&quot;)\n有关于数据库读写的部分请参考下文的 数据库 部分。\n爬取用户信息\n结构与题目爬虫类似，故不再作代码说明。\nimport json\nimport time\nimport pymongo\nimport requests\n\ndbclient = pymongo.MongoClient(&quot;mongodb://127.0.0.1:27017/&quot;)\nluogudb = dbclient[&quot;luogu&quot;]\ndbcol = luogudb[&quot;user&quot;]\n\nheaders = &#123; &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4331.0 Safari/537.36&quot;, &#125;\n\ndef getUser(uid):\n    url = f&quot;https://www.luogu.com.cn/user/&#123;uid&#125;?_contentOnly=1&quot;\n    redata = requests.get(url, headers=headers).text\n    return json.loads(redata)\n\nfor uid in range(1, 2):\n    if list(dbcol.find(&#123;&#x27;uid&#x27;: uid&#125;)) == []:\n        tmpdict = &#123;&#125;\n        tmpdict[&quot;_id&quot;] = uid\n        tmpdict[&quot;uid&quot;] = uid\n        tmpdata = getUser(uid)\n        if tmpdata[&quot;code&quot;] == 200:\n            tmpdict[&quot;data&quot;] = tmpdata[&quot;currentData&quot;][&quot;user&quot;]\n            dbcol.insert_one(tmpdict)\n            print(f&quot;Successfully get user &#123;uid&#125;.&quot;)\n            time.sleep(0.5)\n        else:\n            print(f&quot;Fail to get user &#123;uid&#125;.&quot;)\n            time.sleep(0.5)\n    else:\n        print(f&quot;User &#123;uid&#125; is already exists.&quot;)\n数据库\n搭建数据库\n搭建 MongoDB 数据库只需要在 docker 里面跑一个容器，非常简便。\ndocker run -v /root/data/mongo:/data/db -itd --name mongo -p 27017:27017 mongo\n连接数据库\nclient = pymongo.MongoClient(&quot;mongodb://127.0.0.1:27017/&quot;)\nluogudb = dbclient[&quot;luogu&quot;]\ncol = luogudb[&quot;problem&quot;]\n存储数据\nif list(col.find(&#123;&#x27;pid&#x27; : pid&#125;)) == []:\n    col.insert_one(data)\n    print(&quot;Success.&quot;)\nelse:\n    print(&quot;Already exists.&quot;)\n读取数据\nprint(list(col.find()))\nweb 管理数据库\n再跑一个 mongo-express 就行了。\ndocker run -d --name mongo-express -e ME_CONFIG_MONGODB_SERVER=host.docker.internal -p 8081:8081 mongo-express\n访问 ip:8081 就能看到管理界面了。\n导出数据库\n直接运行下方命令导出为 JSON 格式即可。\nmongoexport -d luogu -c problem -o /data/db/problem.json\n或者点击对应数据库管理界面中的 [JSON] 按钮导出。\n\n成果\n断断续续爬了一个多星期，终于爬完了。\n\n","categories":["技术"]},{"title":"年轻人的第一个 ASN","url":"//post/my-own-asn/","content":"很久之前就有了这样的一个想法：拥有一个自己的 ASN 。2021 年的寒假末尾，我终于找到了一个肯给我这个未成年人申请 ASN 的 LIR 。\n于是这个世界上又多了一个祸害公网的人。\n\n注册 ASN\n我找了某个 LIR 注册的 APNIC 的 ASN ，下号用时 3 个工作日。\n需要提供的信息有这些（带有 [保密] 标签的是非公开信息）：\n\n[保密] 身份证明材料\n主标识\n联系人邮箱\nnoc 邮箱\nabuse 邮箱\n国家\n联系人地址\n联系人姓名\n联系人电话\nASN 的标识\nASN 的全名\nASN 所属国家\n[保密] 两个上游 ASN\n[保密] ASN 将要部署在的物理位置\n\n然后等了 3 个工作日，我的 ASN 申请终于通过审核了（其实在这之前我已经去上学了）。\n需要注意的是 APNIC 每半年会向联系人邮箱发送一封验证邮件，所以邮箱需要保持畅通。\n申请 Vultr BGP 广播功能\n我的 LIR 为我提供了一段 /44 的 IP （而不是 /48）：2406:840:e080::/44 。\n由于某些原因，我选择了使用 Vultr 来进行 IP 的广播，当然 HE 的 BGP 隧道也是可以的。\n点击 https://my.vultr.com/bgp/ 进入 Vultr BGP 广播功能的开通页面。\n\n点击页面中的 Get Started 进入 BGP 开通申请页面。\n\n\n将 I have my own IP space 和 I have my own ASN 设置为 YES\n在 My ASN 处填写 ASN （不含 AS 前缀）\n在 BGP Password 处填写你想要的 BGP 密码\n在 IP Prefixes 处填写你的 IP 前缀（CIDR 格式）\nRoutes we shoule send you 选择 Full Table\n\n然后点击 Setup 即可。\n\n小插曲\n由于我的 LIR 忘记了给我设置 RPKI 记录，导致出现了没有查询到 RPKI 记录的错误。\n\n\n这是一篇 LOA 模板[1]，照抄即可。\nAUTHORIZATION LETTER\n\n[日期, 如 Feb 27, 2021]\n\nTo whom it may concern,\n\nThis letter serves as authorization for [服务商公司名, 如 Vultr] with [ASN, 如 AS2333] to announce the following IP address blocks:\n\n[IP SPACE / ASN / SUBNET]\n[IP SPACE / ASN / SUBNET]\n[...]\n\nAs a representative of the company [公司名称] that is the owner of the subnet and/or ASN, I hereby declare that I&#x27;m authorized to represent and sign for this LOA.\n\nShould you have questions about this request, email me at [邮箱], or call: [电话号码]\n\nFrom,\n\n[姓名]\n[公司名称]\n[职位, 如 Network Administrator]\n[电话号码]\n\n\n提交完毕之后会出现如图所示的界面，点击 Start 即可开始验证进程。\n\n以 asn 141776 的验证为例，选择好接收验证邮件的邮箱，然后点击 Send 即可。\n\n\n点击邮箱里的链接即可（第一个是允许，第二个是拒绝）\n验证成功后的提示\n之后等待客服开通即可。\n由于我是在半夜申请的 Vultr BGP 服务，所以几分钟就开通好了。\n完成后的界面\n之后不要忘记去控制台重启实例哦~\n使用 BIRD 1.6 广播 IP\n目前 BIRD 1.x 和 2.x 同时在维护，二者的区别是 1.x 中 IPv4 和 IPv6 协议是分开的（bird 和 bird6），而 2.x 将两部分代码合并在了一起还引入了更多新功能。\n1.x 和 2.x 两个版本的语法并无差别，只是 2.x 在涉及与路由表相关的操作的时候，需要指定特别的协议（ipv4 或 ipv6）。\nBIRD 2.x 官方文档\n我选用的是 CentOS 7 系统 + BIRD 1.6.8 的组合。\n由于直接使用 yum 安装 bird6 会出现无法找到包的情况，我们需要先通过 yum 安装 epel。\nyum install epel-release -y\n安装 bird\n安装 bird6 ：\nyum install bird6 -y\n配置 bird\n安装完成后先停止 bird 服务：\nsystemctl stop bird6\n由于默认的配置文件注释的内容过多，推荐先删除原有配置文件里面的全部内容。\n使用你喜欢的编辑器编辑 /etc/bird6.conf ，填入如下方所示的配置：\nrouter id [实例的 IPv4 地址];\n\ndefine OWNIP = [实例的 IPv6 地址];\ndefine OWNAS = [ASN, 不含 AS 前缀];\n\nprotocol device &#123;\n    scan time 20;\n&#125;\n\nprotocol static &#123;\n    route [要广播的 IP 地址, CIDR 格式] via OWNIP;\n&#125;\n\nprotocol bgp vultr &#123;\n    local as OWNAS;\n    source address OWNIP;\n    import none;\n    export all;\n    graceful restart on;\n    multihop 2;\n    neighbor 2001:19f0:ffff::1 as 64515;\n    password &quot;[你设置的 BGP 密码]&quot;;\n&#125;\n之后保存配置文件，启动广播。\nsystemctl start bird6\n成果\n可以使用 birdc6 show route 和 birdc6 show proto all 命令查看状态。\n添加虚拟网卡\n接下来需要创建一个虚拟网卡并设置一个 IP [2]：\nip link add dev baoshuo1 type dummy\nip link set baoshuo1 up\nip addr add dev baoshuo1 2406:840:e080::1/128\n在 /etc/bird6.conf 的末尾添加以下内容：\nprotocol direct &#123;\n    interface &quot;baoshuo*&quot;;\n    import all;\n&#125;\n之后使用 systemctl reload bird6 命令重载 bird 即可。\n使用 BIRD2 广播 IP\n安装 BIRD2\n由于直接使用 yum 安装 bird6 会出现无法找到包的情况，我们需要先通过 yum 安装 epel。\nyum install epel-release -y\n安装 bird2 ：\nyum install bird2 -y\n配置 BIRD2\nBIRD2 的配置文件在 /etc/bird.conf 目录下。\nrouter id [实例的 IPv4 地址];\n\ndefine OWNIP = [实例的 IPv6 地址];\ndefine OWNAS = [ASN, 不含 AS 前缀];\n\nprotocol device &#123;\n    scan time 20;\n&#125;\n\nprotocol static &#123;\n    ipv6;\n    route [要广播的 IP 地址, CIDR 格式] via OWNIP;\n&#125;\n\nprotocol bgp lsy &#123;\n    local as OWNAS;\n    source address OWNIP;\n    import none;\n    export all;\n    graceful restart on;\n    multihop 2;\n    neighbor 2001:19f0:ffff::1 as 64515;\n    password &quot;[你设置的 BGP 密码]&quot;;\n&#125;\n\nprotocol direct &#123;\n    interface &quot;baoshuo*&quot;;\n    ipv6 &#123;\n        import all;\n    &#125;;\n&#125;\n由于我的需求比较简陋，所以配置文件并无较大改动。\n成果\n拆分 IP 段\n由于我一下子用不了那么多 IP，所以我决定拆分一下。\n如果不涉及 whois 信息的修改操作，那么只需要修改一下 bird 的配置分开广播即可。\nAPNIC 修改 whois 信息的流程可以参考 https://www.apnic.net/manage-ip/using-whois/updating-whois/objects/email-updates/ 。\nPeer\n首先编写一个模板，像下面这样：\n# /etc/bird6.conf\ntemplate bgp peers6 &#123;\n    local OWNIP as OWNAS;\n    path metric 1;\n    import keep filtered;\n    import filter &#123;\n        print &quot;WARNING: no import filter set, all routes will be rejected.&quot;;\n        reject;\n    &#125;;\n    export filter &#123;\n        print &quot;WARNING: no export filter set, all routes will be rejected.&quot;;\n        reject;\n    &#125;;\n    import limit 1000 action block;\n    export limit 1000 action block;\n&#125;\n\ninclude &quot;/etc/bird/peers6/*&quot;;\n如果需要 Peer ，就在 /etc/bird/peers6/ 目录下新建一个任意名称配置文件，如下所示（需要自行替换尖角括号括住的内容）：\n# /etc/bird/peers6/&lt;PEER_NAME&gt;.conf\nprotocol bgp &lt;PEER_NAME&gt; from peers6 &#123;\n    neighbor &lt;PEER_IP&gt; as &lt;PEER_ASN&gt;;\n    import all;\n    export filter myexport;\n&#125;\n和 LSC.MOE 的 Peer\n术语解释\n\nLIR: 本地互联网注册机构\nRIR: 区域互联网注册机构 （维基百科）\nASN: 自治系统编号（维基百科）\nBGP: 边界网关协议（维基百科）\nBIRD: 一个功能齐全的动态 IP 路由守护程序（官方网站）\n\n参考资料\n\n\n\nExample Letter of Authorization for BGP Announcements - Vultr Docs ↩︎\n\nIP 广播 : CentOS 7 使用 bird6 广播 IPv6 - LiCEO ↩︎\n\n\n\n","categories":["网络"],"tags":["BGP"]},{"title":"使用树莓派+nginx搭建 rtmp 直播服务","url":"//post/raspberry-pi-rtmp-live/","content":"国庆在家闲着没啥事，把一直在角落里吃灰的树莓派 4B 拿出来捣鼓了几下。\n\n使用 nginx 模块：nginx-rtmp-module\n安装 nginx &amp; nginx-rtmp-module\napt, yes!\napt update\napt upgrade -y\napt install nginx libnginx-mod-rtmp -y\n访问服务器 IP ，出现如下图所示网页即代表安装成功。\n\n修改 nginx 配置\n打开 /etc/nginx/nginx.conf ，在末尾处插入下面的配置\nrtmp &#123;\n    server &#123;\n        listen     1935;              # 服务端口\n        chunk_size 4096;              # 数据传输块的大小\n\n        application vod &#123;\n            play /opt/video;          # 视频文件存放位置。\n        &#125;\n\n        application rtmplive &#123;\n            live            on;        # 开启直播\n            max_connections 64;        # 为 rtmp 引擎设置最大连接数。默认为 off\n        &#125;\n\n        application live &#123;\n            live                on;              # 开启直播\n            hls                 on;              # 这个参数把直播服务器改造成实时回放服务器。\n            wait_key            on;              # 对视频切片进行保护，这样就不会产生马赛克了。\n            hls_path            /opt/video/hls;  # 切片视频文件存放位置。\n            hls_fragment        10s;             # 设置HLS片段长度。\n            hls_max_fragment    10s;             # 设置HLS片段最大长度。\n            hls_playlist_length 30s;             # 设置HLS播放列表长度。\n            hls_continuous      on;              # 连续模式。\n            hls_cleanup         on;              # 对多余的切片进行删除。\n            hls_nested          on;              # 嵌套模式。\n        &#125;\n    &#125;\n&#125;\n打开默认站点配置文件 /etc/nginx/sites-available/default ，在 server 部分的末尾添加以下内容\nlocation /live &#123;\n    types &#123;\n        application/vnd.apple.mpegurl m3u8;\n        video/mp2t                    ts;\n    &#125;\n\n    autoindex on;\n    alias     /opt/video/hls;\n\n    expires -1;\n\n    add_header &#x27;Cache-Control&#x27;                    &#x27;no-cache&#x27;;\n    add_header &#x27;Access-Control-Allow-Origin&#x27;      &#x27;*&#x27;;\n    add_header &#x27;Access-Control-Allow-Credentials&#x27; &#x27;true&#x27;;\n    add_header &#x27;Access-Control-Allow-Methods&#x27;     &#x27;GET, POST, OPTIONS&#x27;;\n    add_header &#x27;Access-Control-Allow-Headers&#x27;     &#x27;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&#x27;;\n&#125;\nlocation /stat &#123;\n    rtmp_stat all;\n    # rtmp_stat_stylesheet stat.xsl;\n&#125;\n插入完以后配置文件会变成下面的样子\n--- /etc/nginx/sites-available/default\n+++ /etc/nginx/sites-available/default\n@@ -1,14 +1,36 @@\n server &#123;\n     listen 80 default_server;\n     listen [::]:80 default_server;\n\n     root /var/www/html;\n\n     index index.html index.htm index.nginx-debian.html;\n\n     server_name _;\n\n     location / &#123;\n         try_files $uri $uri/ =404;\n     &#125;\n+\n+    location /live &#123;\n+        types &#123;\n+            application/vnd.apple.mpegurl m3u8;\n+            video/mp2t                    ts;\n+        &#125;\n+\n+        autoindex on;\n+        alias     /opt/video/hls;\n+\n+        expires -1;\n+\n+        add_header &#x27;Cache-Control&#x27;                    &#x27;no-cache&#x27;;\n+        add_header &#x27;Access-Control-Allow-Origin&#x27;      &#x27;*&#x27;;\n+        add_header &#x27;Access-Control-Allow-Credentials&#x27; &#x27;true&#x27;;\n+        add_header &#x27;Access-Control-Allow-Methods&#x27;     &#x27;GET, POST, OPTIONS&#x27;;\n+        add_header &#x27;Access-Control-Allow-Headers&#x27;     &#x27;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&#x27;;\n+    &#125;\n+    location /stat &#123;\n+        rtmp_stat all;\n+        # rtmp_stat_stylesheet stat.xsl;\n+    &#125;\n &#125;\n修改完成后使用 nginx -t 测试配置文件是否正确\nnginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /etc/nginx/nginx.conf test is successful\n当出现成功提示时，使用 nginx -s reload 平滑重启 nginx。\n重启成功后使用 netstat -lnp 查看 tcp/1935 端口是否开启。\n\n使用 OBS 连接直播服务器\n打开 OBS ，在 设置 -&gt; 推流 中配置以下内容\n\n\n\n项目\n值\n\n\n\n\n服务\n自定义...\n\n\n服务器\nrtmp://$&#123;ip&#125;/live\n\n\n串流密钥\n$&#123;key&#125;\n\n\n\n其中，$&#123;ip&#125; 和 $&#123;key&#125; 设置为你需要的值即可。\n回到主界面，点击 开始推流 进行推流。\n使用客户端拉取直播流\n\n在 PotPlayer QQ影音 等播放器中选择 打开-&gt;打开URL 。\n\n输入 http://$&#123;ip&#125;/live/$&#123;key&#125;/index.m3u8 ，点击确定。\n\n此时可以就看到直播画面了。\n网页端播放\n页面中只有一个播放器，其他功能请自行实现。\n&lt;html&gt;\n\n&lt;head&gt;\n    &lt;title&gt;Live Player&lt;/title&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div id=&quot;dplayer&quot;&gt;&lt;/div&gt;\n    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/hls.js@0.14.13/dist/hls.min.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/dplayer@1.26.0/dist/DPlayer.min.js&quot;&gt;&lt;/script&gt;\n    &lt;script&gt;\n        const dp = new DPlayer(&#123;\n            container: document.getElementById(&#x27;dplayer&#x27;),\n            live: true,\n            video: &#123;\n                url: &#x27;http://$&#123;ip&#125;/live/$&#123;key&#125;/index.m3u8&#x27;,\n                type: &#x27;hls&#x27;,\n            &#125;,\n        &#125;);\n    &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n\n后记\n如果没有在外直播的需求，不要将 rtmp 端口映射至公网，这可能会带来一些不必要的麻烦。\n参考资料\n","categories":["技术"],"tags":["折腾"]},{"title":"配置 nginx 只允许 Cloudflare 的 IP 回源","url":"//post/nginx-cloudflare-ip-only/","content":"配置好 Cloudflare 后，建议禁止非 Cloudflare IP 访问源站来防止一些不好的事情发生。\n\n配置\n在站点配置文件中增加以下内容[1] :\n# Cloudflare (IPv4 - https://www.cloudflare.com/ips-v4)\nallow 173.245.48.0/20;\nallow 103.21.244.0/22;\nallow 103.22.200.0/22;\nallow 103.31.4.0/22;\nallow 141.101.64.0/18;\nallow 108.162.192.0/18;\nallow 190.93.240.0/20;\nallow 188.114.96.0/20;\nallow 197.234.240.0/22;\nallow 198.41.128.0/17;\nallow 162.158.0.0/15;\nallow 104.16.0.0/12;\nallow 172.64.0.0/13;\nallow 131.0.72.0/22;\nallow 36.27.212.0/24;\nallow 123.129.232.0/24;\n\n# Cloudflare (IPv6 - https://www.cloudflare.com/ips-v6)\nallow 2400:cb00::/32;\nallow 2405:8100::/32;\nallow 2405:b500::/32;\nallow 2606:4700::/32;\nallow 2803:f800::/32;\nallow 2c0f:f248::/32;\nallow 2a06:98c0::/29;\n\n# Others\ndeny all;\n后记\n这个配置文件可以自己生成。\n参考资料\n\n\n\nCloudflare IP Ranges (Last updated: February 21, 2019) ↩︎\n\n\n\n","categories":["技术"],"tags":["网络"]},{"title":"线段树学习笔记","url":"//post/segment-tree/","content":"线段树（Segment Tree）是一种用来维护区间的数据结构。\n\n与树状数组相比，线段树可以实现时间复杂度在 O(log⁡n)O(\\log n)O(logn) 级别的区间修改，还可以同时支持多种操作（加、乘、最值等）。\n操作列表\n\n上传（pushup）\n建树（build）\n下放懒标记（pushdown）\n区间查询（query）\n区间修改（modify）\n\n通用操作\n存储线段树\n线段树是一个典型的二叉树，因此我们可以使用一个数组来存储线段树。\n分析：很容易就知道线段树的深度为 ⌈log⁡n⌉\\lceil\\log n\\rceil⌈logn⌉ ，可得线段树的节点个数为 2⌈log⁡n⌉+1−12^{\\left\\lceil\\log{n}\\right\\rceil+1}-12⌈logn⌉+1−1，粗略估计开大小为 4n4n4n 的数组即可（可以使用位运算写成 n &lt;&lt; 2）。\nstruct node &#123;\n    int l, r;\n    long long s, d;\n\n    node() &#123;\n        l = r = s = d = 0;\n    &#125;\n    node(int _l, int _r) &#123;\n        l = _l;\n        r = _r;\n        s = d = 0;\n    &#125;\n&#125; tr[100005 &lt;&lt; 2];\n\n\n\n变量名\n用途\n\n\n\n\nl\n区间的左端点\n\n\nr\n区间的右端点\n\n\ns\n区间和\n\n\nd\n懒标记\n\n\n\n上传（pushup）\n之所以把上传放在建树前面说，是因为建树的时候要用到它。\n/**\n * 上传信息\n * @param u 父节点下标\n */\ninline void pushup(int u) &#123;\n    tr[u].s = tr[u &lt;&lt; 1].s + tr[u &lt;&lt; 1 | 1].s;\n&#125;\n将两个子节点所代表的区间的和相加即为父区间的和。\n建树（build）\n/**\n * 建立线段树\n * @param u 根节点下标\n * @param l 左端点\n * @param r 右端点\n */\nvoid build(int u, int l, int r) &#123;\n    tr[u] = node(l, r);\n    if (l == r) &#123;\n        tr[u].s = a[l];\n        return;\n    &#125;\n    int mid = l + r &gt;&gt; 1;\n    build(u &lt;&lt; 1, l, mid);\n    build(u &lt;&lt; 1 | 1, mid + 1, r);\n    pushup(u);\n&#125;\n先初始化当前区间，接下来分两种情况：\n\n若当前区间长度等于 1  (l=r)1\\ \\ (l = r)1  (l=r) ，则直接将当前区间的区间和赋值为 a[l] 即可。\n若当前区间长度大于 1  (l&lt;r)1\\ \\ (l &lt; r)1  (l&lt;r) ，则将区间平均分成两部分（即从 ⌊(l+r)/2⌋\\lfloor(l+r)/2\\rfloor⌊(l+r)/2⌋ 处断开分为两个区间，可写作 l + r &gt;&gt; 1），继续向下递归建立左右子树即可。\n\n需要注意的是两个子区间没有交集，因此左子树的左端点是 lll 、右端点是 midmidmid ，右子树的左端点是 mid+1mid+1mid+1 、右端点是 rrr 。\n区间查询（query）\n/**\n * 区间查询\n * @param u 父节点\n * @param l 左端点\n * @param r 右端点\n */\nlong long query(int u, int l, int r) &#123;\n    if (tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) &#123;  // 被包含直接返回当前区间和\n        return tr[u].s;\n    &#125;\n    int mid = tr[u].l + tr[u].r &gt;&gt; 1;\n    long long s = 0;\n    pushdown(u);                                // 下放懒标记\n    if (l &lt;= mid) s += query(u &lt;&lt; 1, l, r);     // 和左侧有交集\n    if (r &gt; mid) s += query(u &lt;&lt; 1 | 1, l, r);  // 和右侧有交集\n    return s;\n&#125;\n\n如果这个区间被包含，直接返回该区间的和。\n如果和左儿子区间有交集，则继续向左儿子区间递归查询。\n如果和右儿子区间有交集，则继续向右儿子区间递归查询。\n\n需要注意的是在递归查询左右儿子区间之前要先下放懒标记（pushdown），否则会出问题。\n区间加\n本部分以 洛谷 P3372 【模板】线段树 1 为例子来简述一下线段树区间加的实现。\n下放懒标记（pushdown）\n/**\n * 下放懒标记\n * @param u 父节点下标\n */\ninline void pushdown(int u) &#123;\n    if (!tr[u].d) return;\n    // 处理左子树\n    tr[u &lt;&lt; 1].d += tr[u].d;\n    tr[u &lt;&lt; 1].s += (tr[u &lt;&lt; 1].r - tr[u &lt;&lt; 1].l + 1) * tr[u].d;\n    // 处理右子树\n    tr[u &lt;&lt; 1 | 1].d += tr[u].d;\n    tr[u &lt;&lt; 1 | 1].s += (tr[u &lt;&lt; 1 | 1].r - tr[u &lt;&lt; 1 | 1].l + 1) * tr[u].d;\n    // 清除懒标记\n    tr[u].d = 0;\n&#125;\n这部分代码其实很简单。\n将左、右子树的懒标记加上父节点的懒标记，区间和加上 (r−l+1)×d(r - l + 1)\\times d(r−l+1)×d （r,lr, lr,l 分别表示儿子区间的左、右端点，ddd表示父节点的懒标记），最后清空父节点的懒标记即可。\n区间修改（modify）\n/**\n * 区间修改\n * @param u 父节点下标\n * @param l 左端点\n * @param r 右端点\n * @param d 增加的值\n */\nvoid modify(int u, int l, int r, int d) &#123;\n    if (tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) &#123;  // 被包含直接修改\n        tr[u].d += d;\n        tr[u].s += (tr[u].r - tr[u].l + 1) * d;\n        return;\n    &#125;\n    int mid = tr[u].l + tr[u].r &gt;&gt; 1;\n    pushdown(u);                               // 下放懒标记\n    if (l &lt;= mid) modify(u &lt;&lt; 1, l, r, d);     // 和左侧有交集\n    if (r &gt; mid) modify(u &lt;&lt; 1 | 1, l, r, d);  // 和右侧有交集\n    pushup(u);                                 // 上传新信息\n&#125;\n区间修改和区间查询的实现相似。\n\n如果当前区间被包含，直接添加懒标记并修改区间和。\n如果和左儿子区间有交集，则继续向左儿子区间递归修改。\n如果和右儿子区间有交集，则继续向右儿子区间递归修改。\n\n需要注意的是在递归修改左右儿子区间之前要先下放懒标记（pushdown），修改完成以后要上传新信息（pushup），否则会出问题。\n区间加、乘\n本部分以 洛谷 P3373 【模板】线段树 2 为例子来简述一下线段树区间加、乘的实现。\n在编写之前，结构体中需要先添加一个乘法的懒标记 x ，并将其赋初值为 111 ，修改之后的结构体如下所示。\nstruct node &#123;\n    int l, r;\n    long long s, d, x;\n\n    node() &#123;\n        l = r = s = d = 0;\n        x = 1;\n    &#125;\n    node(int _l, int _r) &#123;\n        l = _l, r = _r;\n        s = d = 0;\n        x = 1;\n    &#125;\n&#125; tr[100005 &lt;&lt; 2];\n下放懒标记（pushdown）\n/**\n * 下放懒标记\n * @param u 父节点下标\n * @attention 先乘后加\n */\nvoid pushdown(int u) &#123;\n    // 左子树\n    tr[u &lt;&lt; 1].s = ((tr[u &lt;&lt; 1].s * tr[u].x) + (tr[u &lt;&lt; 1].r - tr[u &lt;&lt; 1].l + 1) * tr[u].d) % p;\n    tr[u &lt;&lt; 1].x = tr[u &lt;&lt; 1].x * tr[u].x % p;\n    tr[u &lt;&lt; 1].d = (tr[u &lt;&lt; 1].d * tr[u].x + tr[u].d) % p;\n    // 右子树\n    tr[u &lt;&lt; 1 | 1].s = ((tr[u &lt;&lt; 1 | 1].s * tr[u].x) + (tr[u &lt;&lt; 1 | 1].r - tr[u &lt;&lt; 1 | 1].l + 1) * tr[u].d) % p;\n    tr[u &lt;&lt; 1 | 1].x = tr[u &lt;&lt; 1 | 1].x * tr[u].x % p;\n    tr[u &lt;&lt; 1 | 1].d = (tr[u &lt;&lt; 1 | 1].d * tr[u].x + tr[u].d) % p;\n    // 清除懒标记\n    tr[u].d = 0;\n    tr[u].x = 1;\n&#125;\n此处遵循先乘后加的原则，先修改区间和，再修改乘法懒标记，最后修改加法懒标记，不要忘记  mod  p\\bmod\\ pmod p。\n注意：此处清除懒标记的时候，乘法懒标记应修改为 111 。\n区间修改（modify）\n/**\n * 区间修改\n * @details 修改区间 [l, r] 中的每一个数\n * @param u 父节点下标\n * @param l 左端点\n * @param r 右端点\n * @param x 乘上的数\n * @param d 增加的值\n */\nvoid modify(int u, int l, int r, long long x, long long d) &#123;\n    // 被包含直接修改\n    if (tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) &#123;\n        tr[u].s = ((tr[u].s * x) + (tr[u].r - tr[u].l + 1) * d) % p;\n        tr[u].x = tr[u].x * x % p;\n        tr[u].d = (tr[u].d * x + d) % p;\n        return;\n    &#125;\n    int mid = tr[u].l + tr[u].r &gt;&gt; 1;\n    pushdown(u);                                  // 下放懒标记\n    if (l &lt;= mid) modify(u &lt;&lt; 1, l, r, x, d);     // 和左侧有交集\n    if (r &gt; mid) modify(u &lt;&lt; 1 | 1, l, r, x, d);  // 和右侧有交集\n    pushup(u);                                    // 上传新信息\n&#125;\n大体上和加法的修改函数一样，而在修改时与下放懒标记做法相同，遵循先乘后加的原则。\n调用的时候若只需要使用乘法部分，加数设置为 000 即可。若只需要使用加法部分，乘数设置为 111 即可。\n全部代码\n到这里基本操作就说完了，下面是全部的 AC 代码。\n区间加\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\n/**\n * 线段树节点\n */\nstruct node &#123;\n    int l, r;\n    long long s, d;\n\n    node() &#123;\n        l = r = s = d = 0;\n    &#125;\n    node(int _l, int _r) &#123;\n        l = _l;\n        r = _r;\n        s = d = 0;\n    &#125;\n&#125; tr[100005 &lt;&lt; 2];\nint n, m, op, x, y, k, a[100005];\n\n/**\n * 上传区间和\n * @param u 父节点下标\n */\nvoid pushup(int u) &#123;\n    tr[u].s = tr[u &lt;&lt; 1].s + tr[u &lt;&lt; 1 | 1].s;\n&#125;\n\n/**\n * 下放懒标记\n * @param u 父节点下标\n */\nvoid pushdown(int u) &#123;\n    if (!tr[u].d) return;\n    // 处理左子树\n    tr[u &lt;&lt; 1].d += tr[u].d;\n    tr[u &lt;&lt; 1].s += (tr[u &lt;&lt; 1].r - tr[u &lt;&lt; 1].l + 1) * tr[u].d;\n    // 处理右子树\n    tr[u &lt;&lt; 1 | 1].d += tr[u].d;\n    tr[u &lt;&lt; 1 | 1].s += (tr[u &lt;&lt; 1 | 1].r - tr[u &lt;&lt; 1 | 1].l + 1) * tr[u].d;\n    // 清除懒标记\n    tr[u].d = 0;\n&#125;\n\n/**\n * 建立线段树\n * @param u 根节点下标\n * @param l 左端点\n * @param r 右端点\n */\nvoid build(int u, int l, int r) &#123;\n    tr[u] = node(l, r);\n    if (l == r) &#123;\n        tr[u].s = a[l];\n        return;\n    &#125;\n    int mid = l + r &gt;&gt; 1;\n    build(u &lt;&lt; 1, l, mid);\n    build(u &lt;&lt; 1 | 1, mid + 1, r);\n    pushup(u);\n&#125;\n\n/**\n * 区间修改\n * @param u 父节点下标\n * @param l 左端点\n * @param r 右端点\n * @param d 增加的值\n */\nvoid modify(int u, int l, int r, int d) &#123;\n    if (tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) &#123;  // 被包含直接修改\n        tr[u].d += d;\n        tr[u].s += (tr[u].r - tr[u].l + 1) * d;\n        return;\n    &#125;\n    int mid = tr[u].l + tr[u].r &gt;&gt; 1;\n    pushdown(u);                               // 下放懒标记\n    if (l &lt;= mid) modify(u &lt;&lt; 1, l, r, d);     // 和左侧有交集\n    if (r &gt; mid) modify(u &lt;&lt; 1 | 1, l, r, d);  // 和右侧有交集\n    pushup(u);                                 // 上传新信息\n&#125;\n\n/**\n * 区间查询\n * @param u 父节点\n * @param l 左端点\n * @param r 右端点\n */\nlong long query(int u, int l, int r) &#123;\n    if (tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) &#123;  // 被包含直接返回\n        return tr[u].s;\n    &#125;\n    int mid = tr[u].l + tr[u].r &gt;&gt; 1;\n    long long s = 0;\n    pushdown(u);                                // 下放懒标记\n    if (l &lt;= mid) s += query(u &lt;&lt; 1, l, r);     // 和左侧有交集\n    if (r &gt; mid) s += query(u &lt;&lt; 1 | 1, l, r);  // 和右侧有交集\n    return s;\n&#125;\n\nint main() &#123;\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= n; i++) &#123;\n        cin &gt;&gt; a[i];\n    &#125;\n    build(1, 1, n);\n    for (int i = 0; i &lt; m; i++) &#123;\n        cin &gt;&gt; op &gt;&gt; x &gt;&gt; y;\n        if (op == 1) &#123;\n            cin &gt;&gt; k;\n            modify(1, x, y, k);\n        &#125;\n        else if (op == 2) &#123;\n            cout &lt;&lt; query(1, x, y) &lt;&lt; endl;\n        &#125;\n    &#125;\n    return 0;\n&#125;\n区间加、乘\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nstruct node &#123;\n    int l, r;\n    long long s, d, x;\n\n    node() &#123;\n        l = r = s = d = 0;\n        x = 1;\n    &#125;\n    node(int _l, int _r) &#123;\n        l = _l, r = _r;\n        s = d = 0;\n        x = 1;\n    &#125;\n&#125; tr[100005 &lt;&lt; 2];\nint n, m, p, op, x, y;\nlong long k, a[100005];\n\n/**\n * 上传信息\n * @param u 父节点下标\n */\nvoid pushup(int u) &#123;\n    tr[u].s = (tr[u &lt;&lt; 1].s + tr[u &lt;&lt; 1 | 1].s) % p;\n&#125;\n\n/**\n * 下放懒标记\n * @param u 父节点下标\n * @attention 先乘后加\n */\nvoid pushdown(int u) &#123;\n    // 左子树\n    tr[u &lt;&lt; 1].s = ((tr[u &lt;&lt; 1].s * tr[u].x) + (tr[u &lt;&lt; 1].r - tr[u &lt;&lt; 1].l + 1) * tr[u].d) % p;\n    tr[u &lt;&lt; 1].x = tr[u &lt;&lt; 1].x * tr[u].x % p;\n    tr[u &lt;&lt; 1].d = (tr[u &lt;&lt; 1].d * tr[u].x + tr[u].d) % p;\n    // 右子树\n    tr[u &lt;&lt; 1 | 1].s = ((tr[u &lt;&lt; 1 | 1].s * tr[u].x) + (tr[u &lt;&lt; 1 | 1].r - tr[u &lt;&lt; 1 | 1].l + 1) * tr[u].d) % p;\n    tr[u &lt;&lt; 1 | 1].x = tr[u &lt;&lt; 1 | 1].x * tr[u].x % p;\n    tr[u &lt;&lt; 1 | 1].d = (tr[u &lt;&lt; 1 | 1].d * tr[u].x + tr[u].d) % p;\n    // 清除懒标记\n    tr[u].d = 0;\n    tr[u].x = 1;\n&#125;\n\n/**\n * 建立线段树\n * @param u 根节点下标\n * @param l 左端点\n * @param r 右端点\n */\nvoid build(int u, int l, int r) &#123;\n    tr[u] = node(l, r);\n    if (l == r) &#123;\n        tr[u].s = a[l] % p;\n        return;\n    &#125;\n    int mid = l + r &gt;&gt; 1;\n    build(u &lt;&lt; 1, l, mid);\n    build(u &lt;&lt; 1 | 1, mid + 1, r);\n    pushup(u);\n&#125;\n\n/**\n * 区间修改\n * @details 将区间 [l, r] 中的每一个数加上 d\n * @param u 父节点下标\n * @param l 左端点\n * @param r 右端点\n * @param x 乘上的数\n * @param d 增加的值\n */\nvoid modify(int u, int l, int r, long long x, long long d) &#123;\n    // 被包含直接修改\n    if (tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) &#123;\n        tr[u].s = ((tr[u].s * x) + (tr[u].r - tr[u].l + 1) * d) % p;\n        tr[u].x = tr[u].x * x % p;\n        tr[u].d = (tr[u].d * x + d) % p;\n        return;\n    &#125;\n    int mid = tr[u].l + tr[u].r &gt;&gt; 1;\n    pushdown(u);                                  // 下放懒标记\n    if (l &lt;= mid) modify(u &lt;&lt; 1, l, r, x, d);     // 和左侧有交集\n    if (r &gt; mid) modify(u &lt;&lt; 1 | 1, l, r, x, d);  // 和右侧有交集\n    pushup(u);                                    // 上传新信息\n&#125;\n\n/**\n * 区间查询\n * @param u \n * @param l \n * @param r \n * @return int \n */\nlong long query(int u, int l, int r) &#123;\n    if (tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) &#123;  // 被包含直接返回\n        return tr[u].s;\n    &#125;\n    int mid = tr[u].l + tr[u].r &gt;&gt; 1;\n    long long s = 0;\n    pushdown(u);                                         // 下放懒标记\n    if (l &lt;= mid) s = query(u &lt;&lt; 1, l, r);               // 和左侧有交集\n    if (r &gt; mid) s = (s + query(u &lt;&lt; 1 | 1, l, r)) % p;  // 和右侧有交集\n    return s;\n&#125;\n\nint main() &#123;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; p;\n    for (int i = 1; i &lt;= n; i++) &#123;\n        cin &gt;&gt; a[i];\n    &#125;\n    build(1, 1, n);\n    while (m--) &#123;\n        cin &gt;&gt; op &gt;&gt; x &gt;&gt; y;\n        if (op == 1) &#123;\n            cin &gt;&gt; k;\n            modify(1, x, y, k, 0);\n        &#125;\n        else if (op == 2) &#123;\n            cin &gt;&gt; k;\n            modify(1, x, y, 1, k);\n        &#125;\n        else if (op == 3) &#123;\n            cout &lt;&lt; query(1, x, y) % p &lt;&lt; endl;\n        &#125;\n    &#125;\n    return 0;\n&#125;","categories":["OI"],"tags":["笔记"]},{"title":"CSP-J 2020 题解","url":"//post/solution-csp-j-2020/","content":"优秀的拆分\n前置知识：位运算。\n题面\n题目描述\n一般来说，一个正整数可以拆分成若干个正整数的和。\n例如，1=11=11=1，10=1+2+3+410=1+2+3+410=1+2+3+4 等。对于正整数 nnn 的一种特定拆分，我们称它为&quot;优秀的&quot;，当且仅当在这种拆分下，nnn 被分解为了若干个不同的 222 的正整数次幂。注意，一个数 xxx 能被表示成 222 的正整数次幂，当且仅当 xxx 能通过正整数个 222 相乘在一起得到。\n例如，10=8+2=23+2110=8+2=2^3+2^110=8+2=23+21 是一个优秀的拆分。但是，7=4+2+1=22+21+207=4+2+1=2^2+2^1+2^07=4+2+1=22+21+20 就不是一个优秀的拆分，因为 111 不是 222 的正整数次幂。\n现在，给定正整数 nnn，你需要判断这个数的所有拆分中，是否存在优秀的拆分。若存在，请你给出具体的拆分方案。\n输入输出格式\n输入格式\n输入只有一行，一个整数 nnn，代表需要判断的数。\n输出格式\n如果这个数的所有拆分中，存在优秀的拆分。那么，你需要从大到小输出这个拆分中的每一个数，相邻两个数之间用一个空格隔开。可以证明，在规定了拆分数字的顺序后，该拆分方案是唯一的。\n若不存在优秀的拆分，输出 -1。\n思路\n首先，如果 nnn 是奇数，那么肯定不可能拆分成若干个不同的 222 的正整数次幂。\n以 111111 的拆分结果 11=23+21+2011=2^3+2^1+2^011=23+21+20 为例，可以看到结果里面存在一个 222 的 000 次幂。\n所以当 nnn 是奇数时不存在优秀的拆分，输出 −1-1−1 即可。\nif (n &amp; 1) &#123;\n    cout &lt;&lt; -1 &lt;&lt; endl;\n&#125;\n将 111 左移 nnn 位（1&lt;&lt;n）和 2n2^n2n 是等效的。同理，将 111 右移 nnn 位（1&gt;&gt;n）等同于 1÷2n1\\div 2^n1÷2n 。取 xxx 的二进制第 iii 位可以写成 x &gt;&gt; i &amp; 1 。\n我们观察一下 101010 转换成二进制后的结果：(1010)2(1010)_2(1010)2​，再将它转换成十进制的式子列出来：\n(1010)2=1×23+0×22+1×21+0×20=23+21=8+2=10\\begin{aligned}\n(1010)_2 &amp; = 1 \\times 2^3 + 0\\times 2^2 + 1 \\times 2^1 + 0 \\times 2^0 \\\\\n&amp; = 2^3 + 2^1 \\\\\n&amp; = 8 + 2 \\\\\n&amp; = 10\n\\end{aligned}\n(1010)2​​=1×23+0×22+1×21+0×20=23+21=8+2=10​\n再看下数据范围，24次幂就足够了。\nfor (int i = 24; i &gt; 0; i--) &#123;\n    if (n &gt;&gt; i &amp; 1) &#123;\n        cout &lt;&lt; (1 &lt;&lt; i) &lt;&lt; &#x27; &#x27;;\n    &#125;\n&#125;\n代码\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nint main() &#123;\n    int n;\n    cin &gt;&gt; n;\n    if (n &amp; 1) &#123;\n        cout &lt;&lt; -1 &lt;&lt; endl;\n    &#125;\n    else &#123;\n        for (int i = 24; i &gt; 0; i--) &#123;\n            if (n &gt;&gt; i &amp; 1) &#123;\n                cout &lt;&lt; (1 &lt;&lt; i) &lt;&lt; &#x27; &#x27;;\n            &#125;\n        &#125;\n    &#125;\n    return 0;\n&#125;\n直播获奖\n题面\n题目描述\nNOI2130 即将举行。为了增加观赏性，CCF 决定逐一评出每个选手的成绩，并直播即时的获奖分数线。本次竞赛的获奖率为 w%w\\%w%，即当前排名前 w%w\\%w% 的选手的最低成绩就是即时的分数线。\n更具体地，若当前已评出了 ppp 个选手的成绩，则当前计划获奖人数为 max⁡(1,⌊p∗w%⌋)\\max(1, \\lfloor p * w \\%\\rfloor)max(1,⌊p∗w%⌋)，其中 www 是获奖百分比，⌊x⌋\\lfloor x \\rfloor⌊x⌋ 表示对 xxx 向下取整，max⁡(x,y)\\max(x,y)max(x,y) 表示 xxx 和 yyy 中较大的数。如有选手成绩相同，则所有成绩并列的选手都能获奖，因此实际获奖人数可能比计划中多。\n作为评测组的技术人员，请你帮 CCF 写一个直播程序。\n输入输出格式\n输入格式\n第一行有两个整数 n,wn, wn,w。分别代表选手总数与获奖率。\n第二行有 nnn 个整数，依次代表逐一评出的选手成绩。\n输出格式\n只有一行，包含 nnn 个非负整数，依次代表选手成绩逐一评出后，即时的获奖分数线。相邻两个整数间用一个空格分隔。\n思路\n每读入一个数，使用二分插入到 vector 中，然后按照题意输出即可。\n注意：scorescorescore 数组内成绩是由小到大排列的，所以输出的时候要使用 score.size() - max(1, i * w / 100) 作为下标。\n代码\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nint main() &#123;\n    int n, w, t;\n    vector&lt;int&gt; score;\n    cin &gt;&gt; n &gt;&gt; w;\n    for (int i = 1; i &lt;= n; i++) &#123;\n        cin &gt;&gt; t;\n        score.insert(lower_bound(score.begin(), score.end(), t), t);\n        cout &lt;&lt; score[score.size() - max(1, i * w / 100)] &lt;&lt; &#x27; &#x27;;\n    &#125;\n    return 0;\n&#125;\n方格取数\n题面\n题目描述\n设有 n×mn \\times mn×m 的方格图，每个方格中都有一个整数。现有一只小熊，想从图的左上角走到右下角，每一步只能向上、向下或向右走一格，并且不能重复经过已经走过的方格，也不能走出边界。小熊会取走所有经过的方格中的整数，求它能取到的整数之和的最大值。\n输入输出格式\n输入格式\n第一行有两个整数 n,mn, mn,m。\n接下来 nnn 行每行 mmm 个整数，依次代表每个方格中的整数。\n输出格式\n一个整数，表示小熊能取到的整数之和的最大值。\n思路\n设 Fi,j,0F_{i,j,0}Fi,j,0​ 表示从一个格子上方走到该格子的路径最大和，Fi,j,1F_{i,j,1}Fi,j,1​ 表示从一个格子下方走到该格子的路径最大和。\n若搜到以前搜过的状态则直接返回搜过的最大和（也就是 FFF 中的值），否则继续搜索到达该格时的最大和。\n代码\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nint       n, m;\nlong long w[1005][1005], f[1005][1005][2];\n\nlong long dfs(int x, int y, int from) &#123;\n    if (x &lt; 1 || x &gt; n || y &lt; 1 || y &gt; m) &#123;\n        return -0x3f3f3f3f;\n    &#125;\n    if (f[x][y][from] != -0x3f3f3f3f) &#123;\n        return f[x][y][from];\n    &#125;\n    if (from == 0) &#123;\n        f[x][y][from] = max(&#123;dfs(x + 1, y, 0), dfs(x, y - 1, 0), dfs(x, y - 1, 1)&#125;) + w[x][y];\n    &#125;\n    else &#123;\n        f[x][y][from] = max(&#123;dfs(x - 1, y, 1), dfs(x, y - 1, 0), dfs(x, y - 1, 1)&#125;) + w[x][y];\n    &#125;\n    return f[x][y][from];\n&#125;\n\nint main() &#123;\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= n; i++) &#123;\n        for (int j = 1; j &lt;= m; j++) &#123;\n            cin &gt;&gt; w[i][j];\n            f[i][j][0] = f[i][j][1] = -0x3f3f3f3f;\n        &#125;\n    &#125;\n    f[1][1][0] = f[1][1][1] = w[1][1];\n    cout &lt;&lt; dfs(n, m, 1) &lt;&lt; endl;\n    return 0;\n&#125;\n","categories":["OI"],"tags":["题解"]},{"title":"洛谷 - P1200 [USACO1.1] 你的飞碟在这儿 Your Ride Is Here","url":"//post/solution-luogu-p1200/","content":"题面\n难度：入门\n标签：数论，数学 字符串 USACO\n题目描述\n众所周知，在每一个彗星后都有一只 UFO。这些 UFO 时常来收集地球上的忠诚支持者。不幸的是，他们的飞碟每次出行都只能带上一组支持者。因此，他们要用一种聪明的方案让这些小组提前知道谁会被彗星带走。他们为每个彗星起了一个名字，通过这些名字来决定这个小组是不是被带走的那个特定的小组（你认为是谁给这些彗星取的名字呢？）。关于如何搭配的细节会在下面告诉你；你的任务是写一个程序，通过小组名和彗星名来决定这个小组是否能被那颗彗星后面的 UFO 带走。\n小组名和彗星名都以下列方式转换成一个数字：最终的数字就是名字中所有字母的积，其中 AAA 是 111 ， ZZZ 是 262626 。例如，USACO\\text{USACO}USACO 小组就是 21×19×1×3×15=1795521 \\times 19 \\times 1 \\times 3 \\times 15=1795521×19×1×3×15=17955 。如果小组的数字  mod 47\\bmod 47mod47 等于彗星的数字  mod 47\\bmod 47mod47 ，你就得告诉这个小组需要准备好被带走！（记住 a mod ba \\bmod bamodb 是 aaa 除以 bbb 的余数；34 mod 10=434 \\bmod 10 = 434mod10=4）\n写出一个程序，读入彗星名和小组名并算出用上面的方案能否将两个名字搭配起来，如果能搭配，就输出 GO，否则输出 STAY。小组名和彗星名均是没有空格或标点的一串大写字母（不超过 666 个字母）。\n输入格式\n第 1 行：一个长度为 111 到 666 的大写字母串，表示彗星的名字。\n第 2 行：一个长度为 111 到 666 的大写字母串，表示队伍的名字。\n输出格式\n无。\n输入输出样例\n输入 #1\nCOMETQ\nHVNGAT\n输出 #1\nGO\n输入 #2\nABSTAR\nUSACO\n输出 #2\nSTAY\n思路\n按照题意计算即可。\n代码\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nint main() &#123;\n    int us = 1, zs = 1;\n    string a, b;\n    getline(cin, a);\n    getline(cin, b);\n    for (int i = 0; i &lt; 7; i++) &#123;\n        if (a[i] &lt;= 0) break;\n        else us *= a[i] - 64;\n    &#125;\n    for (int i = 0; i &lt; 7; i++) &#123;\n        if (b[i] &lt;= 0) break;\n        else zs *= b[i] - &#x27;@&#x27;;\n    &#125;\n    us %= 47;\n    zs %= 47;\n    if (us == zs) cout &lt;&lt; &quot;GO&quot; &lt;&lt; endl;\n    else cout &lt;&lt; &quot;STAY&quot; &lt;&lt; endl;\n    return 0;\n&#125;\n后记\n\nUpdate1：2019-07-10\nUpdate2：2020-10-12\n\n优化代码\n弃用不安全的 gets 函数。\n\n\n\n","categories":["OI"],"tags":["题解","洛谷"]},{"title":"洛谷 - P1724 东风谷早苗","url":"//post/solution-luogu-p1724/","content":"题面\n难度：普及-\n标签：模拟 字符串\n题目描述\n在幻想乡，东风谷早苗是以高达控闻名的高中生宅巫女。某一天，早苗终于入手了最新款的钢达姆模型。作为最新的钢达姆，当然有了与以往不同的功能了，那就是它能够自动行走。\n早苗的新模型可以按照输入的命令进行移动，命令包含 E S W N 四种，分别对应四个不同的方向，依次为东、南、西、北。执行某个命令时，它会向着对应方向移动一个单位。作为新型机器人，模型自然不会只单单执行一个命令，它可以执行命令串。对于输入的命令串，每一秒它会按照命令行动一次。而执行完命令串最后一个命令后，会自动从头开始循环。在 000 秒时早苗将钢达姆放置在了 (0,0)(0,0)(0,0) 的位置，并且输入了命令串。\n\n向东移动，坐标改变改变为 (x+1, y)(x+1,\\ y)(x+1, y)\n向南移动，坐标改变改变为 (x, y−1)(x,\\ y-1)(x, y−1)\n向西移动，坐标改变改变为 (x−1, y)(x-1,\\ y)(x−1, y)\n向北移动，坐标改变改变为 (x, y+1)(x,\\ y+1)(x, y+1)\n\n现在她想要知道 TTT 秒后钢达姆所在的位置坐标。\n输入格式\n第1行：一个字符串，表示早苗输入的命令串，保证至少有 1 个命令。\n第2行：一个正整数 TTT 。\n输出格式\n第1行：两个整数，表示 TTT 秒时，钢达姆的坐标。\n输入输出样例\n输入 #1\nNSWWNSNEEWN\n12\n输出 #1\n-1 3\n思路\n60分\n按照题意模拟即可\n100分\n由于题目数据范围过大，单纯模拟无法通过此题，所以需要寻找一些规律。\n\n而执行完命令串最后一个命令后，会自动从头开始循环。\n\n通过仔细读题可以发现，在运行中命令串可能会被执行多次，因此可以先算出命令串被执行了几次，再模拟出最终结果。\n代码\n60分\n纯暴力做法\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nint main() &#123;\n    int    x = 0, y = 0, t = 0, i = 0;\n    string s;\n    cin &gt;&gt; s &gt;&gt; t;\n    while (t--) &#123;\n        if (i &gt;= s.size()) &#123;\n            i = 0;\n        &#125;\n        switch (s[i]) &#123;\n            case &#x27;E&#x27;: x++; break;\n            case &#x27;S&#x27;: y--; break;\n            case &#x27;W&#x27;: x--; break;\n            case &#x27;N&#x27;: y++; break;\n        &#125;\n        i++;\n    &#125;\n    cout &lt;&lt; x &lt;&lt; &#x27; &#x27; &lt;&lt; y &lt;&lt; endl;\n    return 0;\n&#125;\n100分\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\n\nint main() &#123;\n    int    x = 0, y = 0, t = 0;\n    string s;\n    cin &gt;&gt; s &gt;&gt; t;\n    for (int i = 0; i &lt; s.size(); i++) &#123;\n        switch (s[i]) &#123;\n            case &#x27;E&#x27;: x++; break;\n            case &#x27;S&#x27;: y--; break;\n            case &#x27;W&#x27;: x--; break;\n            case &#x27;N&#x27;: y++; break;\n        &#125;\n    &#125;\n    x *= (int)(t / s.size());\n    y *= (int)(t / s.size());\n    for (int i = 0; i &lt; t % s.size(); i++) &#123;\n        switch (s[i]) &#123;\n            case &#x27;E&#x27;: x++; break;\n            case &#x27;S&#x27;: y--; break;\n            case &#x27;W&#x27;: x--; break;\n            case &#x27;N&#x27;: y++; break;\n        &#125;\n    &#125;\n    cout &lt;&lt; x &lt;&lt; &#x27; &#x27; &lt;&lt; y &lt;&lt; endl;\n    return 0;\n&#125;","categories":["OI"],"tags":["题解","洛谷"]},{"title":"洛谷 - P2412 查单词","url":"//post/solution-luogu-p2412/","content":"难度：普及/提高-\n标签：字符串 搜索 线段树 洛谷原创\n题面\n题目描述\n蒟蒻 HansBug 在一本英语书里面找到了一个单词表，包含 nnn 个单词（每个单词内包含大小写字母）。现在他想要找出某一段连续的单词内字典序最大的单词。\n输入格式\n第一行包含两个正整数 n,mn, mn,m ，分别表示单词个数和询问个数。\n接下来 nnn 行每行包含一个字符串，仅包含大小写字母，长度不超过 151515 ，表示一个单词。\n再接下来 mmm 行每行包含两个整数 x,yx, yx,y ，表示求从第 xxx 到第 yyy 个单词中字典序最大的单词。\n输出格式\n输出包含 mmm 行，每行为一个字符串，分别依次对应前面 mmm 个询问的结果。\n输入输出样例\n输入样例 #1\n5 5\nabsi\nhansbug\nlzn\nkkk\nyyy\n1 5\n1 1\n1 2\n2 3\n4 4\n输出样例 #1\nyyy\nabsi\nhansbug\nlzn\nkkk\n样例说明 #1\n第一次操作：在 {absi, hansbug, lzn, kkk, yyy}\\text{\\{absi,\\ hansbug,\\ lzn,\\ kkk,\\ yyy\\}}{absi, hansbug, lzn, kkk, yyy}中找出字典序最大的，故为 yyy\\text{yyy}yyy；\n第二次操作：在 {absi}\\text{\\{absi\\}}{absi} 中找出字典序最大的，故为 absi\\text{absi}absi；\n第三次操作：在 {absi,hansbug}\\text{\\{absi,hansbug\\}}{absi,hansbug} 中找出字典序最大的，故为 hansbug\\text{hansbug}hansbug；\n第四次操作：在 {hansbug,lzn}\\text{\\{hansbug,lzn\\}}{hansbug,lzn} 中找出字典序最大的，故为 lzn\\text{lzn}lzn；\n第五次操作：在 {kkk}\\text{\\{kkk\\}}{kkk} 中找出字典序最大的，故为 kkk\\text{kkk}kkk 。\n数据规模与约定\n该题目单词字典序比对过程中大小写不敏感，但是输出必须输出原单词。\n对于 30%30\\%30% 的数据， n≤10,m≤10n \\leq 10, m \\leq 10n≤10,m≤10 ；\n对于 70%70\\%70% 的数据， n≤50000,m≤50000n \\leq 50000, m \\leq 50000n≤50000,m≤50000 ；\n对于 100%100\\%100% 的数据， n≤50000,m≤300000n \\leq 50000, m \\leq 300000n≤50000,m≤300000 。\n思路\n题目大意：输出区间字典序最大的字符串，比对过程中大小写不敏感，但是输出必须输出原单词。\n由题可得设计出的程序需要支持区间查询的操作，进而想到使用线段树（可以参考这篇博文：线段树学习笔记）。\n这里有一个坑点（踩坑记录 R52371435）：C++ 中字符顺序是按照 ASCII 码来比较的，如 A &lt; B &lt; a\\text{A &lt; B &lt; a}A &lt; B &lt; a ，所以需要统一转换为大写或小写，转换后可以使用 std::map 存储字符对应关系。\n之后按照正常线段树操作编写程序即可。\n代码\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nstruct node &#123;\n    int l, r;\n    string s;\n\n    node() &#123;\n        l = r = 0;\n        s = &quot;&quot;;\n    &#125;\n    node(int _l, int _r) &#123;\n        l = _l;\n        r = _r;\n        s = &quot;&quot;;\n    &#125;\n&#125; tr[50005 &lt;&lt; 2];\nint n, m, x, y;\nstring a[50005], b[50005];\nmap&lt;string, string&gt; m1;\n\nvoid pushup(int u) &#123;\n    tr[u].s = max(tr[u &lt;&lt; 1].s, tr[u &lt;&lt; 1 | 1].s);\n&#125;\n\nvoid build(int u, int l, int r) &#123;\n    tr[u] = node(l, r);\n    if (l == r) &#123;\n        tr[u].s = a[l];\n        return;\n    &#125;\n    int mid = l + r &gt;&gt; 1;\n    build(u &lt;&lt; 1, l, mid);\n    build(u &lt;&lt; 1 | 1, mid + 1, r);\n    pushup(u);\n&#125;\n\nstring query(int u, int l, int r) &#123;\n    if (l &lt;= tr[u].l &amp;&amp; tr[u].r &lt;= r) &#123;\n        return tr[u].s;\n    &#125;\n    int mid = tr[u].l + tr[u].r &gt;&gt; 1;\n    string s;\n    if (l &lt;= mid) s = max(s, query(u &lt;&lt; 1, l, r));\n    if (r &gt; mid) s = max(s, query(u &lt;&lt; 1 | 1, l, r));\n    return s;\n&#125;\n\nint main() &#123;\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= n; i++) &#123;\n        cin &gt;&gt; b[i];\n        for (char c : b[i]) &#123;\n            a[i].push_back(tolower(c));\n        &#125;\n        m1[a[i]] = b[i];\n    &#125;\n    build(1, 1, n);\n    for (int i = 0; i &lt; m; i++) &#123;\n        cin &gt;&gt; x &gt;&gt; y;\n        cout &lt;&lt; m1[query(1, x, y)] &lt;&lt; endl;\n    &#125;\n    return 0;\n&#125;\n评测记录 R52376877 - 洛谷\n","categories":["OI"],"tags":["题解","洛谷"]},{"title":"洛谷 - P2234 [HNOI2002]营业额统计","url":"//post/solution-luogu-p2234/","content":"题面\n难度：提高+/省选-\n标签：SBT Splay 概率论,统计 各省省选 湖南 2002\n题目描述\nTiger 最近被公司升任为营业部经理，他上任后接受公司交给的第一项任务便是统计并分析公司成立以来的营业情况。\nTiger 拿出了公司的账本，账本上记录了公司成立以来每天的营业额。分析营业情况是一项相当复杂的工作。由于节假日，大减价或者是其他情况的时候，营业额会出现一定的波动，当然一定的波动是能够接受的，但是在某些时候营业额突变得很高或是很低，这就证明公司此时的经营状况出现了问题。经济管理学上定义了一种最小波动值来衡量这种情况：当最小波动值越大时，就说明营业情况越不稳定。\n而分析整个公司的从成立到现在营业情况是否稳定，只需要把每一天的最小波动值加起来就可以了。你的任务就是编写一个程序帮助 Tiger 来计算这一个值。\n第一天的最小波动值为第一天的营业额。\n该天的最小波动值=min⁡(∣该天以前某一天的营业额−该天营业额∣)\\text{该天的最小波动值}=\\min(|\\text{该天以前某一天的营业额} - \\text{该天营业额}|)该天的最小波动值=min(∣该天以前某一天的营业额−该天营业额∣) 。\n输入格式\n第一行为正整数 nnn（n≤32767n \\leq 32767n≤32767） ，表示该公司从成立一直到现在的天数，接下来的 nnn 行每行有一个整数 aia_iai​ (∣ai∣≤1000000|a_i| \\leq 1000000∣ai​∣≤1000000) ，表示第 iii 天公司的营业额，可能存在负数。\n输出格式\n一个正整数，表示 ∑每一天的最小波动值\\sum{\\text{每一天的最小波动值}}∑每一天的最小波动值 ，数据保证结果小于 2312^{31}231 。\n输入输出样例\n输入样例 #1\n6\n5\n1\n2\n5\n4\n6\n输出样例 #1\n12\n样例说明 #1\n 5+∣1−5∣+∣2−1∣+∣5−5∣+∣4−5∣+∣6−5∣= 5+4+1+0+1+1= 12\\begin{aligned}\n&amp;\\ 5+|1-5|+|2-1|+|5-5|+|4-5|+|6-5|\\\\\n=&amp;\\ 5+4+1+0+1+1\\\\\n=&amp;\\ 12\n\\end{aligned}\n==​ 5+∣1−5∣+∣2−1∣+∣5−5∣+∣4−5∣+∣6−5∣ 5+4+1+0+1+1 12​\n思路\n由 该天的最小波动值=min⁡(∣该天以前某一天的营业额−该天营业额∣)\\text{该天的最小波动值} = \\min(|\\text{该天以前某一天的营业额} - \\text{该天营业额}|)该天的最小波动值=min(∣该天以前某一天的营业额−该天营业额∣) 可以判断出当前波动值与前面有关，设当天营业额为 xxx ，则需要查找到某一天营业额 yyy 满足 ∣y−x∣|y-x|∣y−x∣ 最小。\n接着想到二分查找，使用 STL 库函数 lower_bound[1] 和 upper_bound[2] 即可完成。\n二分查找需要保证数组有序，所以边读入边处理既能保证数组有序，又可以简单地查询出该天的最小波动值。\n为了防止越界，开始前先向 a 中 push_back 一个满足要求的&quot;极小值&quot; −1061109568-1061109568−1061109568 。\n时间复杂度： O(nlog⁡2n)O(n \\log_2 n)O(nlog2​n) 。\n代码\n提交详情：R44587104\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nint main() &#123;\n    int n, x, sum = 0;\n    vector&lt;int&gt; a;\n    cin &gt;&gt; n &gt;&gt; x;\n    a.push_back(0xc0c0c0c0);\n    a.push_back(x);\n    sum += x;\n    for (int i = 2; i &lt;= n; i++) &#123;\n        cin &gt;&gt; x;\n        int t1 = *--lower_bound(a.begin(), a.end(), x);\n        int t2 = *lower_bound(a.begin(), a.end(), x);\n        if (t1 == 0xc0c0c0c0) &#123;\n            sum += abs(t2 - x);\n        &#125; else &#123;\n            sum += min(abs(t1 - x), abs(t2 - x));\n        &#125;\n        a.insert(upper_bound(a.begin(), a.end(), x), x);\n    &#125;\n    cout &lt;&lt; sum &lt;&lt; endl;\n    return 0;\n&#125;\n参考资料\n\n\n\nstd::lower_bound - cppreference ↩︎\n\nstd::upper_bound - cppreference ↩︎\n\n\n\n","categories":["OI"],"tags":["题解","洛谷"]},{"title":"洛谷 - P5660 数字游戏","url":"//post/solution-luogu-p5660/","content":"题面\n难度：入门\n标签：字符串 NOIP 普及组 2019\n题目描述\n小 K 同学向小 P 同学发送了一个长度为 8 的 01 字符串来玩数字游戏，小 P 同学想要知道字符串中究竟有多少个 111。\n注意：01 字符串为每一个字符是 0 或者 1 的字符串，如&quot;101&quot;（不含双引号）为一个长度为 3 的 01 字符串。\n输入格式\n输入文件只有一行，一个长度为 8 的 01 字符串 s。\n输出格式\n输出文件只有一行，包含一个整数，即 01 字符串中字符 1 的个数。\n输入输出样例\n输入 #1\n00010100\n输出 #1\n2\n输入 #2\n11111111\n输出 #2\n8\n说明\n【输入输出样例 1 说明】\n该 01 字符串中有 2 个字符 1。\n【输入输出样例 2 说明】\n该 01 字符串中有 8 个字符 1。\n【数据规模与约定】\n\n对于 2020%20 的数据，保证输入的字符全部为 000。\n对于 100100%100 的数据，输入只可能包含字符 000 和字符 111，字符串长度固定为 888。\n\n做法一\n思路\n按字符统计给出的 01 字符串中字符 1 的个数。\n代码\n#include&lt;bits/stdc++.h&gt;\n \nusing namespace std;\n \nint main() &#123;\n    char c;\n    int ans = 0;\n    for(int i = 0 ; i &lt; 8 ; i++) &#123;\n        scanf(&quot;%c&quot;, &amp;c);\n        if(c == &#x27;1&#x27;) ans++;\n    &#125;\n    printf(&quot;%d\\n&quot;, ans);\n    return 0;\n&#125;\n做法二\n思路\n还是按字符统计给出的 01 字符串中字符 1 的个数，只不过是换了个方法统计而已。\n代码\n#include&lt;bits/stdc++.h&gt;\n \nusing namespace std;\n \nint main() &#123;\n    char c;\n    int ans = 0;\n    for(int i = 0 ; i &lt; 8 ; i++) &#123;\n        ans += getchar() - &#x27;0&#x27;;\n    &#125;\n    printf(&quot;%d\\n&quot;, ans);\n    return 0;\n&#125;\n神秘代码： =zhu1YI1JIAN1cha6\n","categories":["OI"],"tags":["题解","洛谷"]},{"title":"洛谷 - P3879 [TJOI2010] 阅读理解","url":"//post/solution-luogu-p3879/","content":"题面\n难度：提高+/省选-\n标签：字符串 哈希 概率论,统计 字典树,Trie树 各省省选 天津 高性能 2010\n题目描述\n英语老师留了 NNN 篇阅读理解作业，但是每篇英文短文都有很多生词需要查字典，为了节约时间，现在要做个统计，算一算某些生词都在哪几篇短文中出现过。\n输入格式\n第一行为整数 NNN ，表示短文篇数，其中每篇短文只含空格和小写字母。\n按下来的 NNN 行，每行描述一篇短文。每行的开头是一个整数 LLL ，表示这篇短文由 LLL 个单词组成。接下来是 LLL 个单词，单词之间用一个空格分隔。\n然后为一个整数 MMM ，表示要做几次询问。后面有 MMM 行，每行表示一个要统计的生词。\n输出格式\n对于每个生词输出一行，统计其在哪几篇短文中出现过，并按从小到大输出短文的序号，序号不应有重复，序号之间用一个空格隔开（注意第一个序号的前面和最后一个序号的后面不应有空格）。如果该单词一直没出现过，则输出一个空行。\n输入输出样例\n输入 #1\n3\n9 you are a good boy ha ha o yeah\n13 o my god you like bleach naruto one piece and so do i\n11 but i do not think you will get all the points\n5\nyou\ni\no\nall\nnaruto\n输出 #1\n1 2 3\n2 3\n1 2\n3\n2\n说明\n对于 30%30\\%30% 的数据， 1≤M≤1031\\le M\\le 10^31≤M≤103 。\n对于 100%100\\%100% 的数据，1≤M≤1041\\le M\\le 10^41≤M≤104，1≤N≤1031\\le N\\le 10^31≤N≤103 。\n每篇短文长度（含相邻单词之间的空格）≤5×103\\le 5\\times 10^3≤5×103 字符，每个单词长度 ≤20\\le 20≤20 字符。\n每个测试点时限 222 秒。\n思路\n开一个 map 来存单词与文章之间的对应关系，使用 set 去重。\n每次检索的时候先使用 m.count(s)[1] 判断是否存在该单词（防止创建无用元素浪费内存），如果不存在就输出空行。\n一些坑点：\n\n输出时行尾如果有多余空格会 WA 。\n判断是否为末尾的前一个数时不能用 it + 1 != m[s].end() ，应该用 it != --m[s].end() ，否则会报错 no match for 'operator+' (operand types are 'std::set&lt;int&gt;::iterator' &#123;aka 'std::_Rb_tree_const_iterator&lt;int&gt;'&#125; and 'int')。\n\n速度优化\n\n可以将 map 替换为 unordered_map ，速度快了许多（1057ms -&gt; 593ms）\n在 cppreference.com 上可以查到： unordered_map 的时间复杂度平均情况下为常数，最坏情况下则与大小成线性[2][3]；map 的时间复杂度与容器大小成对数[4][5]。\n可以使用更快的输入输出方式，如 scanf printf 或自己的快读快写。\n\n代码\n也可在 GitHub 上查看最新更新。\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nint main() &#123;\n    int n, l;\n    string s;\n    map&lt;string, set&lt;int&gt;&gt; m;\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++) &#123;\n        cin &gt;&gt; l;\n        for (int j = 0; j &lt; l; j++) &#123;\n            cin &gt;&gt; s;\n            m[s].insert(i);\n        &#125;\n    &#125;\n    cin &gt;&gt; n;\n    for (int i = 0; i &lt; n; i++) &#123;\n        cin &gt;&gt; s;\n        if (!m.count(s)) &#123;\n            cout &lt;&lt; endl;\n        &#125;\n        else &#123;\n            for (set&lt;int&gt;::iterator it = m[s].begin(); it != --m[s].end(); it++) &#123;\n                cout &lt;&lt; *it &lt;&lt; &#x27; &#x27;;\n            &#125;\n            cout &lt;&lt; *--m[s].end() &lt;&lt; endl;\n        &#125;\n    &#125;\n    return 0;\n&#125;\n参考资料\n[1] std::map&lt;Key,T,Compare,Allocator&gt;::count - cppreference\n[2] std::unordered_map&lt;Key,T,Hash,KeyEqual,Allocator&gt;::operator[] - cppreference\n[3] std::unordered_map&lt;Key,T,Hash,KeyEqual,Allocator&gt;::count - cppreference\n[4] std::map&lt;Key,T,Compare,Allocator&gt;::operator[] - cppreference\n[5] std::map&lt;Key,T,Compare,Allocator&gt;::count - cppreference\n","categories":["OI"],"tags":["题解","洛谷"]},{"title":"洛谷 - P4994 终于结束的起点","url":"//post/solution-luogu-p4994/","content":"题面\n难度：普及-\n标签：递推 枚举，暴力 斐波那契\n题目描述\n广为人知的斐波拉契数列 fib(n)\\mathrm{fib}(n)fib(n) 是这么计算的：\nfib(n)={0,n=01,n=1fib(n−1)+fib(n−2),n&gt;1fib(n) =\n\\left\n    \\{\n    \\begin{array}{lc}\n    0, &amp;n=0 \\\\\n    1, &amp;n=1 \\\\\n    fib(n-1)+fib(n-2), &amp;n&gt;1\n    \\end{array}\n\\right.\nfib(n)=⎩⎪⎨⎪⎧​0,1,fib(n−1)+fib(n−2),​n=0n=1n&gt;1​\n也就是 0,1,1,2,3,5,8,13,…0, 1, 1, 2, 3, 5, 8, 13, \\ldots0,1,1,2,3,5,8,13,…，每一项都是前两项之和。\n小 F 发现，如果把斐波拉契数列的每一项对任意大于 111 的正整数 MMM 取模的时候，数列都会产生循环。\n当然，小 F 很快就明白了，因为 (fib(n−1) mod M\\mathrm{fib}(n - 1) \\bmod Mfib(n−1)modM) 和 (fib(n−2) mod M)\\mathrm{fib}(n - 2) \\bmod M)fib(n−2)modM) 最多只有 M2M ^ 2M2 种取值，所以在 M2M  ^ 2M2 次计算后一定出现过循环。\n甚至更一般地，我们可以证明，无论取什么模数 MMM，最终模 MMM 下的斐波拉契数列都会是 0,1,⋯ ,0,1,⋯0, 1, \\cdots, 0, 1, \\cdots0,1,⋯,0,1,⋯。\n现在，给你一个模数 MMM，请你求出最小的 n&gt;0n &gt; 0n&gt;0，使得 fib(n) mod M=0,fib(n+1) mod M=1\\mathrm{fib}(n) \\bmod M = 0, \\mathrm{fib}(n + 1) \\bmod M = 1fib(n)modM=0,fib(n+1)modM=1。\n输入格式\n输入一行一个正整数 MMM 。\n输出格式\n输出一行一个正整数 nnn 。\n输入输出样例\n输入 #1\n2\n输出 #1\n3\n输入 #2\n6\n输出 #2\n24\n思路\n暴力+优化 = AC\n代码\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nlong long a[10000000];\n\nlong long dfib(long long x, long long m) &#123;\n    if (a[x] != -1) &#123;\n        return a[x];\n    &#125;\n    if (x == 0) &#123;\n        a[x] = 0 % m;\n        return 0;\n    &#125;\n    if (x == 1) &#123;\n        a[x] = 1 % m;\n        return 1;\n    &#125;\n    a[x] = (dfib(x - 1, m) + dfib(x - 2, m)) % m;\n    return a[x];\n&#125;\n\nint main() &#123;\n    long long m;\n    memset(a, 0xff, sizeof(a));\n    cin &gt;&gt; m;\n    for (int i = 2; i &lt; m * m; i++) &#123;\n        if (dfib(i, m) == 0 &amp;&amp; dfib(i + 1, m) == 1) &#123;\n            cout &lt;&lt; i &lt;&lt; endl;\n            break;\n        &#125;\n    &#125;\n    return 0;\n&#125;","categories":["OI"],"tags":["题解","洛谷"]},{"title":"洛谷 - P5738 歌唱比赛","url":"//post/solution-luogu-p5738/","content":"题面\n题目描述\nn(n≤100)n(n\\le 100)n(n≤100) 名同学参加歌唱比赛，并接受 m(m≤20)m(m\\le 20)m(m≤20) 名评委的评分，评分范围是 0 到 10 分。这名同学的得分就是这些评委给分中去掉一个最高分，去掉一个最低分，剩下 m−2m-2m−2 个评分的平均数。请问得分最高的同学分数是多少？评分保留 2 位小数。\n输入格式\n无\n输出格式\n无\n输入输出样例\n输入#1\n7 6\n4 7 2 6 10 7\n0 5 0 10 3 10\n2 6 8 4 3 6\n6 3 6 7 5 8\n5 9 3 3 8 1\n5 9 9 3 2 0\n5 8 0 4 1 10\n输出#1\n6.00\n思路\n首先定义一个结构体，里面存放各个评委给出的分数、总分数和平均分。\n然后写一个初始化函数：\nnode() &#123;\n    memset(this-&gt;score, 0x00, sizeof(this-&gt;score));\n    all = sum = 0.00;\n&#125;\n再写一个处理函数：\nvoid t(int m) &#123;\n    for (int i = 0; i &lt; m; i++) &#123;\n        cin &gt;&gt; score[i];\n    &#125;\n    std::sort(score, score + m);\n    for (int i = 1; i + 1 &lt; m; i++) &#123;\n        sum += score[i];\n    &#125;\n    all = sum / (m - 2.00);\n&#125;\n这个处理函数分为了三部分：读入、排序和按题目要求计算平均分。\n代码\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nstruct node &#123;\n    int    score[22];\n    double sum, all;\n\n    node() &#123;\n        memset(this-&gt;score, 0x00, sizeof(this-&gt;score));\n        all = sum = 0.00;\n    &#125;\n\n    void t(int m) &#123;\n        for (int i = 0; i &lt; m; i++) &#123;\n            cin &gt;&gt; score[i];\n        &#125;\n        std::sort(score, score + m);\n        for (int i = 1; i + 1 &lt; m; i++) &#123;\n            sum += score[i];\n        &#125;\n        all = sum / (m - 2.00);\n    &#125;\n&#125;;\n\nbool cmp(node a, node b) &#123;\n    return a.all &gt; b.all;\n&#125;\n\nint main() &#123;\n    int  n, m;\n    node student[105];\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 0; i &lt; n; i++) &#123;\n        student[i].t(m);\n    &#125;\n    sort(student, student + n, cmp);\n    printf(&quot;%.2lf&quot;, student[0].all);\n    return 0;\n&#125;","categories":["OI"],"tags":["题解","洛谷"]},{"title":"NOIP 2020 游记 & 题解","url":"//post/solution-noip-2020/","content":"没想到初中生也能参加 NOIP 。\n\n\n题解\n\n游记\n没啥好写的。\n\n▲  youwike\\text{y\\color{red}{ouwike}}youwike 在考前立的 flagflagflag\n可惜 youwike\\text{y\\color{red}{ouwike}}youwike 最后还是没上二百。\n周五下午的火车，赶到秦皇岛，晚上写了几个板子就开始颓废，一直颓废到12点。\n中间还开了会，发了选手胸牌、讲了一些注意事项。\n\n▲ 选手胸牌长这样\n\n▲ 早上还照了一张合照\n比完赛拿上行李就坐火车回石家庄了。\n题解：排水系统（water）\n题目描述\n对于一个城市来说，排水系统是极其重要的一个部分。\n有一天，小 C 拿到了某座城市排水系统的设计图。排水系统由 nnn 个排水结点（它们从 1∼n1 \\sim n1∼n 编号）和若干个单向排水管道构成。每一个排水结点有若干个管道用于汇集其他排水结点的污水（简称为该结点的汇集管道），也有若干个管道向其他的排水结点排出污水（简称为该结点的排出管道）。\n排水系统的结点中有 mmm 个污水接收口，它们的编号分别为 1,2,…,m1, 2, \\ldots , m1,2,…,m，污水只能从这些接收口流入排水系统，并且这些结点没有汇集管道。排水系统中还有若干个最终排水口，它们将污水运送到污水处理厂，没有排出管道的结点便可视为一个最终排水口。\n现在各个污水接收口分别都接收了 111 吨污水，污水进入每个结点后，会均等地从当前结点的每一个排出管道流向其他排水结点，而最终排水口将把污水排出系统。\n现在小 C 想知道，在该城市的排水系统中，每个最终排水口会排出多少污水。该城市的排水系统设计科学，管道不会形成回路，即不会发生污水形成环流的情况。\n输入格式\n第一个两个用单个空格分隔的整数 n,mn, mn,m。分别表示排水结点数与接收口数量。\n接下来 nnn 行，第 iii 行用于描述结点 iii 的所有排出管道。其中每行第一个整数 did_idi​ 表示其排出管道的数量，接下来 did_idi​ 个用单个空格分隔的整数 a1,a2,…,adia_1, a_2, \\ldots , a_{d_i}a1​,a2​,…,adi​​ 依次表示管道的目标排水结点。\n保证不会出现两条起始结点与目标结点均相同的管道。\n输出格式\n输出若干行，按照编号从小到大的顺序，给出每个最终排水口排出的污水体积。其中体积使用分数形式进行输出，即每行输出两个用单个空格分隔的整数 ppp，qqq，表示排出的污水体积为 pq\\frac{p}{q}qp​。要求 ppp 与 qqq 互素，q=1q = 1q=1 时也需要输出 qqq。\n输入输出样例\n输入\n5 1\n3 2 3 5\n2 4 5\n2 5 4\n0\n0\n输出\n1 3\n2 3\n解释\n111 号结点是接收口，4,54, 54,5 号结点没有排出管道，因此是最终排水口。\n111 吨污水流入 111 号结点后，均等地流向 2,3,52, 3, 52,3,5 号结点，三个结点各流入 13\\frac{1}{3}31​ 吨污水。\n222 号结点流入的 13\\frac{1}{3}31​ 吨污水将均等地流向 4,54, 54,5 号结点，两结点各流入 16\\frac{1}{6}61​ 吨污水。\n333 号结点流入的 13\\frac{1}{3}31​ 吨污水将均等地流向 4,54, 54,5 号结点，两结点各流入 16\\frac{1}{6}61​ 吨污水。\n最终，444 号结点排出 16+16=13\\frac{1}{6} + \\frac{1}{6} = \\frac{1}{3}61​+61​=31​ 吨污水，555 号结点排出 13+16+16=23\\frac{1}{3} + \\frac{1}{6} + \\frac{1}{6} = \\frac{2}{3}31​+61​+61​=32​ 吨污水。\n数据范围\n\n\n\n测试点编号\nn≤n \\len≤\nm≤m \\lem≤\n\n\n\n\n1∼31 \\sim 31∼3\n101010\n111\n\n\n4∼64 \\sim 64∼6\n103{10}^3103\n111\n\n\n7∼87 \\sim 87∼8\n105{10}^5105\n111\n\n\n9∼109 \\sim 109∼10\n105{10}^5105\n101010\n\n\n\n对于全部的测试点，保证 1≤n≤1051 \\le n \\le {10}^51≤n≤105，1≤m≤101 \\le m \\le 101≤m≤10，0≤di≤50 \\le d_i \\le 50≤di​≤5。\n数据保证，污水在从一个接收口流向一个最终排水口的过程中，不会经过超过 101010 个中间排水结点（即接收口和最终排水口不算在内）。\n思路\n从 1∼m1 \\sim m1∼m 节点开始向下搜索，如果搜到没有排水口的节点就更新节点的 ansansans 。\nP7113 Sample1\n▲ 样例1的搜索过程\n需要注意的分子和分母需要单独存，不能使用浮点型存储，否则会有精度问题。\n在均分的时候只需要将分母除以节点数即可，如下方所示：\n23÷4=23×14=23×4=212=16\\begin{aligned}\n&amp;\\frac{2}{3} \\div 4 \\\\\n=&amp; \\frac{2}{3} \\times \\frac{1}{4} \\\\\n=&amp; \\frac{2}{3 \\times 4}\\\\ \n=&amp; \\frac{2}{12}\n=&amp; \\frac{1}{6}\n\\end{aligned}\n===​32​÷432​×41​3×42​122​=​61​​\n在相加的时候可以这样做：\n23+34=2×43×4+3×33×4=2×4+3×43×4=2012=53\\begin{aligned}\n&amp;\\frac{2}{3} + \\frac{3}{4} \\\\\n=&amp; \\frac{2 \\times 4}{3 \\times 4} + \\frac{3\\times 3}{3 \\times 4}\\\\ \n=&amp; \\frac{2 \\times 4 + 3 \\times 4}{3\\times 4}\\\\\n=&amp; \\frac{20}{12}\\\\\n=&amp; \\frac{5}{3}\n\\end{aligned}\n====​32​+43​3×42×4​+3×43×3​3×42×4+3×4​1220​35​​\n赛场AC用时：1小时。\n别忘了开 long long 。\n代码\n\n考场代码：OI题库100分，洛谷90分，官方数据80分\n#include&lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nint n, m, d, t;\nvector&lt;int&gt; u[100005];\npair&lt;long long, long long&gt; ans[100005];\n\nlong long gcd(long long a, long long b) &#123;\n    if(b == 0) return a;\n    return gcd(b, a%b);\n&#125;\n\nvoid dfs(int x, long long first, long long second) &#123;\n    if(u[x].empty()) &#123;\n        if(ans[x].first &amp;&amp; ans[x].second) &#123;\n            if(ans[x].second == second) &#123;\n                ans[x].first += first;\n                long long tmp = gcd(ans[x].first, ans[x].second);\n                ans[x].first /= tmp;\n                ans[x].second /= tmp;\n            &#125;\n            else &#123;\n                first *= ans[x].second;\n                ans[x].first *= second;\n                ans[x].first += first;\n                ans[x].second *= second;\n                long long tmp = gcd(ans[x].first, ans[x].second);\n                ans[x].first /= tmp;\n                ans[x].second /= tmp;\n            &#125;\n        &#125;\n        else &#123;\n            ans[x].first = first;\n            ans[x].second = second;\n        &#125;\n        return;\n    &#125;\n    int s = u[x].size();\n    second *= s;\n    for(int i = 0 ; i &lt; s; i++) &#123;\n        dfs(u[x][i], first, second);\n    &#125;\n&#125;\n\nint main() &#123;\n    cin &gt;&gt; n &gt;&gt; m;\n    for(int i = 1 ; i &lt;= n ; i++) &#123;\n        cin &gt;&gt; d;\n        for(int j = 1 ; j &lt;= d ; j++) &#123;\n            cin &gt;&gt; t;\n            u[i].push_back(t);\n        &#125;\n    &#125;\n    for(int i = 1 ; i &lt;= m ; i++) &#123;\n        dfs(i, 1, 1);\n    &#125;\n    for(int i = 1 ; i &lt;= n ; i++) &#123;\n        if(u[i].empty()) &#123;\n            cout &lt;&lt; ans[i].first &lt;&lt; &#x27; &#x27; &lt;&lt; ans[i].second &lt;&lt; endl;\n        &#125;\n    &#125;\n    return 0;\n&#125;\n\n\n\nAC代码\n考后第二天就用 __int128 水过了这道题（懒得打高精）。\n使用流输出 __int128 的时候还糊了个输出函数（因为没内置）。\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nint n, m, d, t;\nvector&lt;int&gt; u[100005];\npair&lt;__int128, __int128&gt; ans[100005];\n\nostream&amp; operator&lt;&lt;(ostream &amp;__ostream, __int128 __n) &#123;\n    string __o;\n    while (__n) &#123;\n        __o.push_back(__n%10+&#x27;0&#x27;);\n        __n /= 10;\n    &#125;\n    reverse(__o.begin(), __o.end());\n    return __ostream &lt;&lt; __o;\n&#125;\n\n__int128 gcd(__int128 a, __int128 b) &#123;\n    if (b == 0) return a;\n    return gcd(b, a % b);\n&#125;\n\nvoid dfs(int x, __int128 first, __int128 second) &#123;\n    if (u[x].empty()) &#123;\n        if (ans[x].first &amp;&amp; ans[x].second) &#123;\n            if (ans[x].second == second) &#123;\n                ans[x].first += first;\n                __int128 tmp = gcd(ans[x].first, ans[x].second);\n                ans[x].first /= tmp;\n                ans[x].second /= tmp;\n            &#125;\n            else &#123;\n                first *= ans[x].second;\n                ans[x].first *= second;\n                ans[x].first += first;\n                ans[x].second *= second;\n                __int128 tmp = gcd(ans[x].first, ans[x].second);\n                ans[x].first /= tmp;\n                ans[x].second /= tmp;\n            &#125;\n        &#125;\n        else &#123;\n            ans[x].first = first;\n            ans[x].second = second;\n        &#125;\n        return;\n    &#125;\n    int s = u[x].size();\n    second *= s;\n    for (int i = 0; i &lt; s; i++) &#123;\n        dfs(u[x][i], first, second);\n    &#125;\n&#125;\n\nint main() &#123;\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= n; i++) &#123;\n        cin &gt;&gt; d;\n        for (int j = 1; j &lt;= d; j++) &#123;\n            cin &gt;&gt; t;\n            u[i].push_back(t);\n        &#125;\n    &#125;\n    for (int i = 1; i &lt;= m; i++) &#123;\n        dfs(i, 1, 1);\n    &#125;\n    for (int i = 1; i &lt;= n; i++) &#123;\n        if (u[i].empty()) &#123;\n            cout &lt;&lt; ans[i].first &lt;&lt; &#x27; &#x27; &lt;&lt; ans[i].second &lt;&lt; endl;\n        &#125;\n    &#125;\n    return 0;\n&#125;\n\n","categories":["OI"],"tags":["题解","游记"]},{"title":"S2OJ - 438. bamboo","url":"//post/solution-s2oj-438/","content":"题目链接：438. bamboo - S2OJ\n难度：暂无评定\n题面\n题目描述\n话说茅山道士散功重修已足足九九八十一天，这天子时，月上中天，道观前清辉点点。\n只听得訇然一声，闭关之处整个炸裂开来，烟雾散尽后，只见茅山道士纤尘不染地立于瓦砾之中，抬头望月，面上一片悲悯之色，喃喃道：「孽缘啊……」\n果不其然，一名黑衣剑客从旁窜出，剑尖遥遥指向茅山道士，大喝道：「茅山妖道，我已在此等你多时，多年来的恩恩怨怨，就此了断吧！」\n言不及毕，左手捏了一个剑诀，便欺身上前，直攻茅山下盘。\n茅山道士看着黑衣剑客有些稚嫩的剑法，眼中掠过复杂的神色：「不如我们换个地方吧，你若能追得上我，我再和你大战一场！」\n说完向后纵身一跃，就此隐入竹林之中不知所踪。\n黑衣剑客知道茅山是个念旧的人，这次必然是要到竹林中的一处隐秘所在。但黑衣剑客的轻功并不高明，每次只能从一棵竹子顶端跳到水平距离不超过 rrr ，高度差不超过 ddd 的另一棵竹子顶端，所花的时间为两个顶点间的直线距离除以 vvv。\n你能帮助黑衣剑客以最快的速度追上茅山道士么？\n输入格式\n第一行是四个整数 nnn、rrr、ddd、vvv，表示竹子的数目、最大水平跳跃距离、最大竖直跳跃距离以及黑衣剑客飞行的速度。\n接下来 nnn 行每行三个整数 xxx、yyy、hhh，表示每棵竹子的坐标及高度，高度大于 000 。\n你可以假定起点在 111 ，终点在 nnn 。同一坐标可能有不同竹子。\n输出格式\n输出一行为从 111 到 nnn 的最短时间。保留小数点后三位输出。如果无法到达终点则输出 No Solution 。\n输入输出样例\n输入样例 #1\n3 3 4 4\n0 0 1\n0 3 5\n3 3 1\n输出样例 #1\n2.500\n数据规模与约定\n输入的所有数据均为不超过 100010001000 的非负整数。\n思路\n要点总结\n\n本题实质是求加权无向图的最短路径。\n本题主要代码均与速度无关，因此程序只需在输出时计算时间。\n需要先计算各个互相可达的点之间的路程，再求从 111 号竹子到 nnn 号竹子的最短路径。\n\n计算可达性与路程\n由题知计算可达性需要两个条件：\n\n水平距离不超过 rrr\n高度差不超过 ddd\n\n\nd=(Δx)2+(Δy)2=(x1−x2)2+(y1−y2)2d = \\sqrt{(\\Delta x)^2 + (\\Delta y)^2} = \\sqrt{(x_1 - x_2)^2 + (y_1 - y_2)^2}\nd=(Δx)2+(Δy)2​=(x1​−x2​)2+(y1​−y2​)2​\n可以根据 同一平面上两点间的距离公式 写出求同一平面上两点间的距离的函数：\n// 求同一平面上两点间的距离\ndouble dis2d(int x1, int y1, int x2, int y2) &#123;\n    return sqrt(pow(x1 - x2, 2) + pow(y1 - y2, 2));\n&#125;\n然后判断黑衣剑客是否能跳到那棵竹子上：\nif (dis2d(a[i].x, a[i].y, a[j].x, a[j].y) &lt;= r &amp;&amp; abs(a[i].z - a[j].z) &lt;= d)\n判断条件为 s水平≤rs_{\\text{水平}} \\leq rs水平​≤r 且 s垂直≤ds_{\\text{垂直}} \\leq ds垂直​≤d 。\n\nd=(Δx)2+(Δy)2+(Δz)2=(x1−x2)2+(y1−y2)2+(z1−z2)2d = \\sqrt{(\\Delta x)^2 + (\\Delta y)^2 + (\\Delta z)^2} = \\sqrt{(x_1 - x_2)^2 + (y_1 - y_2)^2 + (z_1 - z_2)^2}\nd=(Δx)2+(Δy)2+(Δz)2​=(x1​−x2​)2+(y1​−y2​)2+(z1​−z2​)2​\n同样也可以根据 三维空间中两点间的距离公式 写出求三维空间中两点间的距离的函数：\n// 求三维空间中两点间的距离\ndouble dis3d(int x1, int y1, int z1, int x2, int y2, int z2) &#123;\n    return sqrt(pow(x1 - x2, 2) + pow(y1 - y2, 2) + pow(z1 - z2, 2));\n&#125;\n然后直接向邻接表中存入数据即可。\ndouble dis = dis3d(a[i].x, a[i].y, a[i].z, a[j].x, a[j].y, a[j].z);\nf[i][j] = dis;\nf[j][i] = dis;\n求解最短路\n由于时限比较宽松，所以此处选用代码难度较低的 Floyd 算法。\n首先需要初始化，初始化需要放在路程计算前。\nfor (int i = 1; i &lt;= n; i++) &#123;\n    for (int j = 1; j &lt;= n; j++) &#123;\n        f[i][j] = i == j ? 0 : 0x3f3f3f3f;\n    &#125;\n&#125;\n之后使用 Floyd 算法求解最短路即可：\nfor (int k = 1; k &lt;= n; k++) &#123;\n    for (int i = 1; i &lt;= n; i++) &#123;\n        for (int j = 1; j &lt;= n; j++) &#123;\n            f[i][j] = min(f[i][j], f[i][k] + f[k][j]);\n        &#125;\n    &#125;\n&#125;\n最后输出从 111 到 nnn 的最短路径长度时需要特判无解的情况并输出 No Solution 。\n代码\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\ndouble dis2d(int x1, int y1, int x2, int y2) &#123;\n    return sqrt(pow(x1 - x2, 2) + pow(y1 - y2, 2));\n&#125;\n\ndouble dis3d(int x1, int y1, int z1, int x2, int y2, int z2) &#123;\n    return sqrt(pow(x1 - x2, 2) + pow(y1 - y2, 2) + pow(z1 - z2, 2));\n&#125;\n\nint main() &#123;\n    int n, r, d, v;\n    double s = 9999999.00, f[1005][1005];\n    struct &#123;\n        int x, y, z;\n    &#125; a[1005];\n    cin &gt;&gt; n &gt;&gt; r &gt;&gt; d &gt;&gt; v;\n    for (int i = 1; i &lt;= n; i++) &#123;\n        cin &gt;&gt; a[i].x &gt;&gt; a[i].y &gt;&gt; a[i].z;\n    &#125;\n    for (int i = 1; i &lt;= n; i++) &#123;\n        for (int j = 1; j &lt;= n; j++) &#123;\n                f[i][j] = i == j ? 0 : 0x3f3f3f3f;\n        &#125;\n    &#125;\n    for (int i = 1; i &lt;= n; i++) &#123;\n        for (int j = 1; j &lt;= n; j++) &#123;\n            if (dis2d(a[i].x, a[i].y, a[j].x, a[j].y) &lt;= r &amp;&amp; abs(a[i].z - a[j].z) &lt;= d) &#123;\n                double dis = dis3d(a[i].x, a[i].y, a[i].z, a[j].x, a[j].y, a[j].z);\n                f[i][j] = dis;\n                f[j][i] = dis;\n            &#125;\n        &#125;\n    &#125;\n    for (int k = 1; k &lt;= n; k++) &#123;\n        for (int i = 1; i &lt;= n; i++) &#123;\n            for (int j = 1; j &lt;= n; j++) &#123;\n                f[i][j] = min(f[i][j], f[i][k] + f[k][j]);\n            &#125;\n        &#125;\n    &#125;\n    if(f[1][n] == 0x3f3f3f3f) &#123;\n        cout &lt;&lt; &quot;No Solution&quot; &lt;&lt; endl;\n    &#125; else &#123;\n        cout &lt;&lt; fixed &lt;&lt; setprecision(3) &lt;&lt; f[1][n] / v &lt;&lt; endl;\n    &#125;\n    return 0;\n&#125;\n提交记录 #12492 - S2OJ\n","categories":["OI"],"tags":["题解","S2OJ"]},{"title":"牛客网 - 7606. 2020牛客NOIP赛前集训营-普及组（第二场）","url":"//post/solution-nowcoder-contest-7606/","content":"A-面试\n提交记录：45258014\n思路\n统计 A B C D 四个字母的出现次数。\nfor(int i = 0 ; i &lt; 4 ; i++) &#123;\n    if(s[i] == &#x27;A&#x27;) cnta++;\n    else if(s[i] == &#x27;B&#x27;) cntb++;\n    else if(s[i] == &#x27;C&#x27;) cntc++;\n    else if(s[i] == &#x27;D&#x27;) cntd++;\n&#125;\n根据题目中所描述的内容：\n\n如果面试者在四轮中有一次发挥被评为 D，或者两次发挥被评为 C，就不会通过面试。如果面试者没有一次被评为 D，并且有三个或以上的 A，则会获得 special offer。其余情况会获得普通 offer。\n\n可以写出如下代码\nif(cntd || cntc &gt;= 2) &#123;\n    cout &lt;&lt; &quot;failed&quot; &lt;&lt; endl;\n&#125;\nelse if(!cntd &amp;&amp; cnta &gt;= 3) &#123;\n    cout &lt;&lt; &quot;sp offer&quot; &lt;&lt; endl;\n&#125;\nelse &#123;\n    cout &lt;&lt; &quot;offer&quot; &lt;&lt; endl;\n&#125;\n代码\n#include&lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nint main() &#123;\n    int t, cnta, cntb, cntc, cntd;\n    string s;\n    cin &gt;&gt; t;\n    while(t--) &#123;\n        cnta = cntb  = cntc = cntd = 0;\n        cin &gt;&gt; s;\n        for(int i = 0 ; i &lt; 4 ; i++) &#123;\n            if(s[i] == &#x27;A&#x27;) cnta++;\n            else if(s[i] == &#x27;B&#x27;) cntb++;\n            else if(s[i] == &#x27;C&#x27;) cntc++;\n            else if(s[i] == &#x27;D&#x27;) cntd++;\n        &#125;\n        if(cntd || cntc &gt;= 2) &#123;\n            cout &lt;&lt; &quot;failed&quot; &lt;&lt; endl;\n        &#125;\n        else if(!cntd &amp;&amp; cnta &gt;= 3) &#123;\n            cout &lt;&lt; &quot;sp offer&quot; &lt;&lt; endl;\n        &#125;\n        else &#123;\n            cout &lt;&lt; &quot;offer&quot; &lt;&lt; endl;\n        &#125;\n    &#125;\n    return 0;\n&#125;\nB-纸牌游戏\n提交记录：45267496\n代码\n#include&lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nint main() &#123;\n    int n, a[100010];\n    cin &gt;&gt; n;\n    for(int i = 0 ; i &lt; n ; i++) &#123;\n        cin &gt;&gt; a[i];\n    &#125;\n    sort(a, a+n);\n    for(int i = 0 ; i &lt; n ; i++) &#123;\n        if(a[i] &gt;= n-i-1) &#123;\n            cout &lt;&lt; n-i &lt;&lt; endl;\n            return 0;\n        &#125;\n    &#125;\n    return 0;\n&#125;\n参考资料\n\n7606B 纸牌游戏题解 - wzkdh的牛客博客\n\nC-涨薪\n提交记录： 45259535\n思路\n分析\n\n当 m≥2m \\geq 2m≥2 时，会有 n−(x+y)n-(x+y)n−(x+y) 名员工被辞退，需要计算以下内容：\n\n{ai×3m(0≤i&lt;x)ai×2m(x≤i&lt;x+y)\\left\\{\\begin{array}{lc}a_i\\times 3^m&amp;(0\\leq i&lt;x)\\\\\na_i\\times 2^m&amp;(x \\leq i &lt; x+y)\n\\end{array}\\right.\n{ai​×3mai​×2m​(0≤i&lt;x)(x≤i&lt;x+y)​\n\n当 m=1m = 1m=1 时，没有员工被开除，需要计算以下内容：\n\n{ai×3(0≤i&lt;x)ai×2(x≤i&lt;x+y)ai(x+y≤i&lt;n)\\left\\{\\begin{array}{lc}a_i\\times 3&amp;(0\\leq i&lt;x)\\\\\na_i\\times 2&amp;(x \\leq i &lt; x+y)\\\\\na_i&amp;(x+y \\leq i &lt; n)\n\\end{array}\\right.\n⎩⎪⎨⎪⎧​ai​×3ai​×2ai​​(0≤i&lt;x)(x≤i&lt;x+y)(x+y≤i&lt;n)​\n如果纯暴力的话复杂度是 O(nm)O(nm)O(nm) 所以用快速幂优化下，就变成了 O(nlog⁡m)O(n \\log m)O(nlogm) 的复杂度。\n代码模板\n快速幂板子（带mod版本）：\nlong long binpow(long long a, long long b, long long mod) &#123;\n    a %= mod;\n    long long res = 1;\n    while (b &gt; 0) &#123;\n        if (b &amp; 1)\n            res = res * a % mod;\n        a = a * a % mod;\n        b &gt;&gt;= 1;\n    &#125;\n    return res;\n&#125;\n代码\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nconst int mod = 1e9 + 7;\n\nbool cmp(int a, int  b) &#123;\n    return a &gt; b;\n&#125;\n\nlong long binpow(long long a, long long b) &#123;\n    a %= mod;\n    long long res = 1;\n    while (b &gt; 0) &#123;\n        if (b &amp; 1)\n            res = res * a % mod;\n        a = a * a % mod;\n        b &gt;&gt;= 1;\n    &#125;\n    return res;\n&#125;\n\nint main() &#123;\n    long long n, m, x, y, a[100005], ans = 0;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; x &gt;&gt; y;\n    for (int i = 0; i &lt; n; i++) &#123;\n        cin &gt;&gt; a[i];\n    &#125;\n    sort(a, a + n, cmp);\n    for (int j = 0; j &lt; x; j++) &#123;\n        a[j] *= binpow(3, m);\n    &#125;\n    for (int j = x; j &lt; x + y; j++) &#123;\n        a[j] *= binpow(2, m);\n    &#125;\n    for (int i = 0; i &lt; x + y; i++) &#123;\n        ans += a[i];\n        ans %= mod;\n    &#125;\n    if (m &lt; 2) &#123;\n        for (int i = x + y; i &lt; n; i++) &#123;\n            ans += a[i];\n            ans %= mod;\n        &#125;\n    &#125;\n    cout &lt;&lt; ans &lt;&lt; endl;\n    return 0;\n&#125;\n参考资料\n\n模意义下取幂 - 快速幂 - OI Wiki\n\nD-变换\n这道题没做出来，比赛结束后官方题解没看懂，待填坑。\n","categories":["OI"],"tags":["题解","牛客网"]},{"title":"S2OJ - #217 QQ空间的说说","url":"//post/solution-s2oj-217/","content":"题面\n题目链接：S2OJ - #217 QQ空间的说说\n难度：暂无评定\n题目背景\nYou-Know-Who\\text{You-Know-Who}You-Know-Who 是一名有时候很菜的 OIer\\text{OIer}OIer，有时候会颓废去刷 QQ\\text{QQ}QQ 空间。\n一天，他看到了这样的一条说说《最近很火的ABO性别测试。我是男O，你们呢？》。内容是这样的：\n请根据你的回答选择下一道题：\n\n1.拥有属于自己的电脑的时候，你会精心挑选？\na.显示屏 - 2   b.键盘 - 3   c.鼠标 - 4\n\n2.通常你会什么时候开始换夏装？\na.按日历节气来换 - 3   b.春天快结束的时候 - 5   c.热的不得不换衣服的时候 - 4\n\n3.自己一个人的时候，你的坐姿是？\na.双腿并拢在一起 - 6   b.双腿叉开 - 4   c.翘二郎腿 - 5\n\n4.遇到自己喜欢的人你会？\na.等待对方向自己告白 - 5   b.单恋对方 - 6   c.第一时间主动告白 - 7\n\n5.你最喜欢什么材料的衣服？\na.丝绸 - 6   b.纱料 - 7   c.布料 - 8\n\n6.自己做饭后，通常厨房什么样子？\na.乱得惨不忍睹 - 7   b.非常整洁干净 - 8   c.有一点点凌乱 - 9\n\n7.你觉得历史战争电视剧对于你来说？\na.特别帅 - 8   b.很无语 - 9   c.特别有吸引力 - 10\n\n8.每次出门的时候，你最注意的是？\na.自己是不是带了想带的东西 - 9   b.自己的味道 - 10   c.自己的发型和着装 - B\n\n9.你认为工作套装和西服给你的感觉是？\na.庄重的服饰 - D   b.过于拘谨的服饰 - E    c.美丽的服饰 - A\n\n10.如果为自己的房子选颜色的话你会选？\na.红色 - B   b.白色 - C   c.紫色 - D\n\nA型 -&gt; 女性omega（强女性）   B型 -&gt; 男性omega（弱女性）   C型 -&gt; 中性beta   D型 -&gt; 女性alpha（弱男性）   E型 -&gt; 男性alpha（强男性）\n反正 You-Know-Who\\text{You-Know-Who}You-Know-Who 才不会相信这些假假的东西，于是他每次都是随机地选择一个选项，然后跳到对应的题目，继续随机地选择，直到选择出一个测试结果为止。\n题目描述\n我们形式化地定义一下这样类型的测试：\n\n测试总共有 nnn 道题；\n第 iii 题有 mim_imi​ 个选项；\n第 iii 题的第 jjj 个选项，要么是一个数字 xxx\n要么是一个大写英文字母 α\\alphaα，表示你如果选择了这个选项，你将得到测试结果 α\\alphaα，结束测试。\n\nSteaunk\\text{Steaunk}Steaunk 想知道对于一个给定的形如上面描述的测试，如果 You-Know-Who\\text{You-Know-Who}You-Know-Who 一开始从第一道题开始作答，每次都是等概率随机地选择其中一个选项，然后执行对应的操作，直到得到一个大写英文字母 α\\alphaα 表示的测试结果，结束测试，那么对于 A∼ZA \\sim ZA∼Z 中的每一个测试结果被选中的概率是多少？\n输入格式\n第一行共一个正整数 nnn，表示题目的数量。\n接下来有 nnn 行，每行第一个正整数 mim_imi​ 表示第 iii 道题有 mim_imi​ 个选项；\n接着有 mim_imi​ 个由空格分开的字符串，表示选项；\n这个字符串要么可以表示为一个正整数 xxx，满足 i &lt; x \\le n，表示选择这个选项你会跳转到第 xxx 题继续作答；\n要么是一个大写英文字母 α\\alphaα，表示选择这个选项，你得到测试结果 α\\alphaα，结束测试。\n输出格式\n一行共 262626 个非负整数，分别表示 A∼ZA \\sim ZA∼Z 型被选中的概率，模 998244353998244353998244353 后的值。\n提示：(x,p)=1,xp−1≡1(modp)(x,p) = 1,x^{p-1} \\equiv 1 \\pmod p(x,p)=1,xp−1≡1(modp)。\n输入输出样例\n输入样例#1\n3\n2 2 3\n1 A\n1 B\n输出样例#1\n499122177 499122177 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n样例说明#1\n显然 You-Know-Who\\text{You-Know-Who}You-Know-Who 有 12\\frac{1}{2}21​ 的概率得到测试结果 AAA，12\\frac{1}{2}21​ 的概率得到测试结果 BBB，测试结果 C∼ZC\\sim ZC∼Z 都不可能得到。\n数据规模与约定\n对于 100%100\\%100% 的数据：n≤5×106,∑i=1nmi≤107n \\le 5 \\times 10^6, \\sum_{i=1}^{n} m_i \\le 10^7n≤5×106,∑i=1n​mi​≤107\n时间限制：2s2 \\text{s}2s\n空间限制：256MB256 \\text{MB}256MB\n思路\n记从第 111 题开始作答，跳转到某一题目 xxx 的概率为 P(x)P(x)P(x)，跳转到某一答案 α\\alphaα 的概率为 P(α)P(\\alpha)P(α)。\n很容易可以得出一个初始条件 P(1)=1P(1) = 1P(1)=1。\n所求的答案即为 P(A),P(B),P(C),…,P(Z)P(A), P(B), P(C), \\ldots, P(Z)P(A),P(B),P(C),…,P(Z) 。\n如果对于题目 iii ，设它能跳转到题目或答案 x1,x2,x3,…,xmix_1, x_2, x_3, \\ldots, x_{m_i}x1​,x2​,x3​,…,xmi​​，那么可以推出一个递推式：P(xj)←P(xj)+p(i)miP(x_j) \\gets P(x_j) + \\large{\\frac{p(i)}{m_i}}P(xj​)←P(xj​)+mi​p(i)​ ，之后按照该式递推即可。\n坑点：概率\\text{概率}概率 和 各点到达次数到达次数总和\\large{\\frac{\\text{各点到达次数}}{\\text{到达次数总和}}}到达次数总和各点到达次数​ 是不一样的，要把出发点概率乘上选项的数量，并分配到每一个终点（考场上我因为不知道这个写炸了）。\n代码\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nconst int mod = 998244353;\n\nint n, m, t, p[5000050], inv[10000005];\n\nint read() &#123;\n    int res = 0;\n    char ch = getchar();\n    while (!isdigit(ch) &amp;&amp; !isalpha(ch)) &#123;\n        ch = getchar();\n    &#125;\n    if (ch &gt;= &#x27;A&#x27;) &#123;\n        return ch - 64 + n;\n    &#125;\n    while (isdigit(ch)) &#123;\n        res = res * 10 + ch - 48;\n        ch = getchar();\n    &#125;\n    return res;\n&#125;\n\nlong long binpow(long long a, long long b) &#123;\n    a %= mod;\n    long long res = 1;\n    while (b &gt; 0) &#123;\n        if (b &amp; 1) res = res * a % mod;\n        a = a * a % mod;\n        b &gt;&gt;= 1;\n    &#125;\n    return res;\n&#125;\n\nint main() &#123;\n    cin &gt;&gt; n;\n    p[1] = 1;\n    for (int i = 1; i &lt;= n; i++) &#123;\n        cin &gt;&gt; m;\n        if (!inv[m]) &#123;\n            inv[m] = binpow(m, mod - 2);\n        &#125;\n        p[i] = (long long)p[i] * inv[m] % mod;\n        for (int j = 1; j &lt;= m; j++) &#123;\n            t = read();\n            p[t] = (p[t] + p[i]) % mod;\n        &#125;\n    &#125;\n    for (int i = 1; i &lt;= 26; i++) &#123;\n        cout &lt;&lt; p[n + i] &lt;&lt; &#x27; &#x27;;\n    &#125;\n    cout &lt;&lt; endl;\n    return 0;\n&#125;\n","categories":["OI"],"tags":["题解","S2OJ"]},{"title":"S2OJ - 441. 记分牌","url":"//post/solution-s2oj-441/","content":"题目链接：441. 记分牌 - S2OJ\n难度：暂无评定\n题面\n题目描述\n比赛中记分牌上的得分数，由标有数字 000 ~ 999 的 101010 类卡片组合而成，例如得分 225225225 由两张标有 222 的卡片和一张标有 555 的卡片组合而成。\n然而，在一场比赛前，粗心的记分员只拿了包含 000 在内的 mmm 类卡片（假定每类卡片数目无限）。为了不延误比赛，记分员决定用这 mmm 类卡片表示比赛分数，表示规则为：按从小到大的顺序，用第 iii 个能以这 mmm 类卡片表示的十进制数代表得分i，其中 i≥0i \\geq 0i≥0。例如，若所带卡片只有 {0,2,4,5}\\{0, 2, 4, 5\\}{0,2,4,5} 四类，则可组合成的十进制数从小到大分别为 {0,2,4,5,20,22,24,25,40,42,44,…}\\{0, 2, 4, 5, 20, 22, 24, 25, 40, 42, 44, \\ldots\\}{0,2,4,5,20,22,24,25,40,42,44,…} ，依次分别对应于得分 {0,1,2,3,4,5,6,7,8,9,10,…}\\{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \\ldots\\}{0,1,2,3,4,5,6,7,8,9,10,…} 。\n当这 mmm 类卡片所组合成数字的位数很多时，记分员自己也不知道到底现在分数是多少，请你编写程序帮助他/她计算准确的得分。其次，比赛还有一个关键得分 sss ，记分员还想知道得分为 sss 时记分牌上的数字会是多少。\n输入格式\n第一行为正整数 mmm ，表示目前可用数字卡片的种类数。\n第二行为 mmm 个各不相同的一位阿拉伯数字，以空格分隔，且其中肯定包含 000 。表示 mmm 种可用的卡片。\n第三行为记分牌上的一个非负整数 xxx ，其所有数位均取自第二行给定的 mmm 个数字，且最高位非 000 。\n第四行为一个非负整数 sss ，你需要输出对应记分牌上的数字。\n输出格式\n两行，第一行为十进制非负整数，对应于 xxx 所表示的十进制得分。\n第二行为一个非负整数，表示了分数为 sss 时对应的记分牌上的数字，保证此项输出不超过 214748364721474836472147483647 。\n输入输出样例\n输入样例 #1\n4\n0 4 2 7\n27\n7\n输出样例 # 1\n7\n27\n样例说明 #1\n所给卡片从小到大排列为 {0,2,4,7,20,22,24,27,…}\\{0, 2, 4, 7, 20, 22, 24, 27, \\ldots\\}{0,2,4,7,20,22,24,27,…} ，对应得分为 {0,1,2,3,4,5,6,7,…}\\{0, 1, 2, 3, 4, 5, 6, 7, \\ldots\\}{0,1,2,3,4,5,6,7,…} 。\n所以记分牌数字 272727 对应得分为 777 ，得分 777 对应记分牌数字为 272727 。\n数据规模与约定\n对于 20%20\\%20% 的数据，m≤3m \\leq 3m≤3 ；\n对于 40%40\\%40% 的数据，x≤32767x \\leq 32767x≤32767 ， s≤32767s \\leq 32767s≤32767 ；\n对于 100%100\\%100% 的数据，2≤m≤102 \\leq m \\leq 102≤m≤10 ， x≤2147483647x \\leq 2147483647x≤2147483647 。\n思路\n观察样例可知，卡片的排列可以看作是 mmm 进制与 101010 进制间的转换。\n记分牌进制数⟷m 进制数⟷10 进制数0⟷0⟷02⟷1⟷14⟷2⟷27⟷3⟷320⟷10⟷422⟷11⟷524⟷12⟷627⟷13⟷7…\\begin{aligned}\n    \\text{记分牌进制数} &amp; \\longleftrightarrow &amp; \\text{m 进制数} &amp; \\longleftrightarrow &amp; \\text{10 进制数} \\\\\n    0 &amp; \\longleftrightarrow &amp; 0 &amp; \\longleftrightarrow &amp; 0 \\\\\n    2 &amp; \\longleftrightarrow &amp; 1 &amp; \\longleftrightarrow &amp; 1 \\\\\n    4 &amp; \\longleftrightarrow &amp; 2 &amp; \\longleftrightarrow &amp; 2 \\\\\n    7 &amp; \\longleftrightarrow &amp; 3 &amp; \\longleftrightarrow &amp; 3 \\\\\n    20 &amp; \\longleftrightarrow &amp; 10 &amp; \\longleftrightarrow &amp; 4 \\\\\n    22 &amp; \\longleftrightarrow &amp; 11 &amp; \\longleftrightarrow &amp; 5 \\\\\n    24 &amp; \\longleftrightarrow &amp; 12 &amp; \\longleftrightarrow &amp; 6 \\\\\n    27 &amp; \\longleftrightarrow &amp; 13 &amp; \\longleftrightarrow &amp; 7 \\\\\n    &amp; \\ldots &amp;\n\\end{aligned}\n记分牌进制数024720222427​⟷⟷⟷⟷⟷⟷⟷⟷⟷…​m 进制数012310111213​⟷⟷⟷⟷⟷⟷⟷⟷⟷​10 进制数01234567​\n故可以使用 std::map 来实现从记分牌与 mmm 进制数之间的转换。\n将读入的卡片先排序，然后建立映射：\nsort(a, a + m);\nfor (int i = 0; i &lt; m; i++) &#123;\n    m1[i] = a[i];\n    m2[a[i]] = i;\n&#125;\n此处 m1 是从 mmm 进制到 「记分牌进制」 的转换， m2 是从 「记分牌进制」 到 mmm 进制的转换。\n\n先将读入的 xxx 转为 mmm 进制数：\nreverse(x.begin(), x.end());\nfor (int i = 0; i &lt; x.size(); i++) &#123;\n    mx.push_back(m2[x[i] - &#x27;0&#x27;] + &#x27;0&#x27;);\n&#125;\n再将这个 mmm 进制数转为 101010 进制数：\nreverse(mx.begin(), mx.end());\nfor (int i = 0; i &lt; mx.size(); i++) &#123;\n    ans1 += (mx[i] - &#x27;0&#x27;) * pow(m, i);\n&#125;\n综合起来，就是下面这样：\nreverse(x.begin(), x.end());\nfor (int i = 0; i &lt; x.size(); i++) &#123;\n    ans1 += m2[x[i] - &#x27;0&#x27;] * pow(m, i);\n&#125;\n之后输出 ans1 即可。\n\n同样地，对 sss 的处理就是一个逆向过程。\n先将读入的 sss 转换为 mmm 进制数，再将这个 mmm 进制数转换为 「记分牌进制」 数，合并以后就是这样：\nwhile (s) &#123;\n    ans2.push_back(m1[s % m] + &#x27;0&#x27;);\n    s /= m;\n&#125;\n之后输出 ans2 即可。\n代码\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nint main() &#123;\n    int m, s, a[15], ans1 = 0;\n    string x, ans2;\n    map&lt;int, int&gt; m1, m2;\n    cin &gt;&gt; m;\n    for (int i = 0; i &lt; m; i++) &#123;\n        cin &gt;&gt; a[i];\n    &#125;\n    sort(a, a + m);\n    for (int i = 0; i &lt; m; i++) &#123;\n        m1[i] = a[i];\n        m2[a[i]] = i;\n    &#125;\n    cin &gt;&gt; x &gt;&gt; s;\n    reverse(x.begin(), x.end());\n    for (int i = 0; i &lt; x.size(); i++) &#123;\n        ans1 += m2[x[i] - &#x27;0&#x27;] * pow(m, i);\n    &#125;\n    while (s) &#123;\n        ans2.push_back(m1[s % m] + &#x27;0&#x27;);\n        s /= m;\n    &#125;\n    reverse(ans2.begin(), ans2.end());\n    cout &lt;&lt; ans1 &lt;&lt; endl\n         &lt;&lt; ans2 &lt;&lt; endl;\n    return 0;\n&#125;\n提交记录 #12569 - S2OJ\n","categories":["OI"],"tags":["题解","S2OJ"]},{"title":"牛客网 - 7612. 2020牛客NOIP赛前集训营-普及组（第五场）","url":"//post/solution-nowcoder-contest-7612/","content":"比赛链接：https://ac.nowcoder.com/acm/contest/7612\nA-购物\n题面\n题目描述\n超市进行了买 k 送一的活动，商品的单价是 x 元，牛妹想至少买 n 件商品，\n输出最少需要花费多少钱。\n输入描述\n第一行一个整数 T≤100T\\leq 100T≤100，表示 TTT 组数据。\n接下来 T 行，每行 3 个整数  n,k,x(1≤n,x≤1000,1≤k≤100)n, k, x (1\\leq n,x \\leq 1000, 1\\leq k \\leq 100)n,k,x(1≤n,x≤1000,1≤k≤100)\n输出描述\n对于每组数据输出一行表示答案。\n样例\n\n样例1\n\n[input]\n3\n3 2 1\n10 3 4\n5 3 2\n[output]\n2\n32\n8\n思路\n签到题，模拟即可。\n代码\n#include&lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nint main() &#123;\n    int t;\n    cin &gt;&gt; t;\n    while(t--) &#123;\n        int n, k, x, ans = 0;\n        cin &gt;&gt; n &gt;&gt; k &gt;&gt; x;\n        int i = 0, j = 0;\n        while(i &lt; n) &#123;\n            i++;\n            j++;\n            ans += x;\n            if(j == k) &#123;\n                j = 0;\n                i++;\n            &#125;\n        &#125;\n        cout &lt;&lt; ans &lt;&lt; endl;\n    &#125;\n    return 0;\n&#125;\nB-交换\n题面\n题目描述\n给一个长度为 nnn 的 01 序列 s1,s2,....,sns_1, s_2, ...., s_ns1​,s2​,....,sn​，现在可以至多进行 1 次如下操作：\n选择 1≤x&lt;n1 \\leq x &lt; n1≤x&lt;n，将 sss 序列变成 {sx+1,sx+2,.....,sn,s1,s2,....sx}\\{s_{x+1},s_{x+2},....., s_n, s_1, s_2, ....s_x\\}{sx+1​,sx+2​,.....,sn​,s1​,s2​,....sx​}\n输出最长的全为 111 的子区间长度。\n输入描述\n一个 01 字符串，表示序列 sss。(1≤∣s∣≤1000001\\leq |s| \\leq 1000001≤∣s∣≤100000)\n输出描述\n输出一个整数表示答案。\n样例\n\n样例1\n\n[input]\n1001\n[output]\n2\n\n样例2\n\n[input]\n11111\n[output]\n5\n\n样例3\n\n[input]\n10111010\n[output]\n3\n思路\n给定的字符串首尾相接就会成一个环，那么可以破环成列，在 s 的末尾在添加一个 s，以样例 10111010 为例，处理过后则变成了 1011101010111010，那么这样就可以找出最长的全为 111 的子区间长度。\n注意当给定的字符串全为 111 时，有可能会出现 fi≥nf_i \\geq nfi​≥n 的情况，按照题意， fi≤nf_i\\leq nfi​≤n ，所以当 sis_isi​ 为 '1' 时，递推式为 fi=min⁡(fi−1+1,n)f_i = \\min(f_{i-1} + 1,  n)fi​=min(fi−1​+1,n) 。\n最终的答案就是max⁡({f1,f2,...,fn})\\max(\\{f_1, f_2, ..., f_n\\})max({f1​,f2​,...,fn​})\n代码\n#include&lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nint main() &#123;\n    int ans = 0, cnt = 0;\n    string s;\n    cin &gt;&gt; s;\n    int n = s.size()-1;\n    s += s;\n    int i = 0, f[200005];\n    memset(f, 0x00, sizeof(f));\n    for(int i = 1 ; i &lt; s.size() ; i++) &#123;\n        if(s[i] == &#x27;1&#x27;) &#123;\n            f[i] = min(f[i-1]+1, n);\n        &#125;\n    &#125;\n    for(int i = 0 ; i &lt;= 2*n ; i++) &#123;\n        ans = max(f[i], ans);\n    &#125;\n    cout &lt;&lt; ans &lt;&lt; endl;\n    return 0;\n&#125;\nC-最少移动\n题面\n题目描述\n给一个长度为 nnn 的正整数序列 {a1,a2,...,an}\\{a_1,a_2,...,a_n\\}{a1​,a2​,...,an​}，每次操作可以选择两个相邻的位置，让一个元素 −1-1−1 另一个元素 +1+1+1，输出最少几次操作，能让所有元素相等，如果不可能实现，请输出 -1。\n输入描述\n第一行一个整数 T(T≤20)T(T \\leq 20)T(T≤20)，表示 TTT 组数据。\n每组数据第一行一个整数 nnn，第二行 nnn 个数字表示 aaa 序列，1≤ai≤1000001 \\leq a_i \\leq 1000001≤ai​≤100000\n输出描述\n对于每组数据，输出一个整数表示答案。\n样例\n\n样例1\n\n[input]\n3\n3\n1 3 2\n3\n2 2 3\n5\n1 2 3 1 3\n[output]\n1\n-1\n3\n思路\n这道题可以用前缀和做。\na={1,2,3,1,3}sum={1,3,6,7,10}a = \\{1, 2, 3, 1, 3\\}\\\\\nsum = \\{1, 3, 6, 7, 10\\}\na={1,2,3,1,3}sum={1,3,6,7,10}\naia_iai​ 为序列元素， sumisum_isumi​ 为前缀和元素。\n不难发现，当 ai+1,ai+1−1a_i+1, a_{i+1}-1ai​+1,ai+1​−1 时，sumi=sumi+1sum_i=sum_i+1sumi​=sumi​+1 ，而 sumi+1sum_i+1sumi​+1 不变。\n同理，当 ai−1,ai+1+1a_i-1, a_{i+1}+1ai​−1,ai+1​+1 时，sumi=sumi−1sum_i=sum_i-1sumi​=sumi​−1 ，而 sumi+1sum_i+1sumi​+1 仍不变。\n当 aaa 中所有元素相等时，sumsumsum 一定是一个等差数列。\n举个例子：\na={2,2,2,2,2}sum={2,4,6,8,10}a = \\{2,2,2,2,2\\}\\\\\nsum = \\{2,4,6,8,10\\}\na={2,2,2,2,2}sum={2,4,6,8,10}\n所以可以得到结论：当 fn mod n≠0f_n \\bmod n \\ne 0fn​modn=0 时， sumsumsum 中的元素不可能成等差数列，因此 aaa 中的元素不可能相等，无解。 反之则有解。\n由上方发现的规律可知：在变换过程中，sumnsum_nsumn​ 总是不变的，因此可以自后向前逆推：设公差为ggg，则 fi=fi+1−g(0&lt;i&lt;n)f_i = f_{i+1}-g (0&lt;i&lt;n)fi​=fi+1​−g(0&lt;i&lt;n)，所以将 fif_ifi​ 变成 fi+1−gf_{i+1}-gfi+1​−g 所需的步数为 abs(i∗g−fi)abs(i*g-f_i)abs(i∗g−fi​)。\n提示：此题必须开 long long！\n代码\n#include&lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nint main() &#123;\n    int t;\n    cin &gt;&gt; t;\n    while(t--) &#123;\n        long long n, a[100005], f[100005], ans = 0;\n        f[0] = 0;\n        cin &gt;&gt; n;\n        for(long long i = 1 ; i &lt;= n ; i++) &#123;\n            cin &gt;&gt; a[i];\n            f[i] = f[i-1] + a[i];\n        &#125;\n        if(f[n]%n != 0) &#123;\n            cout &lt;&lt; -1 &lt;&lt; endl;\n        &#125;\n        else &#123;\n            long long g = f[n]/n;\n            for (long long i = n; i &gt; 0; i--) &#123;\n                ans += abs(i * g - f[i]);\n            &#125;\n            cout &lt;&lt; ans &lt;&lt; endl;\n        &#125;\n    &#125;\n    return 0;\n&#125;\nD-飞行棋\n题面\n题目描述\n牛牛在玩飞行棋。\n有无限个格子排成一行，从左到右，标号为 0,1,....,n,......,∞0,1,....,n, ......, \\infty0,1,....,n,......,∞ 终点为 000 ，有一架飞机一开始在 nnn 号位置。\n排骨龙每回合可以先投掷一次 ddd 面的骰子，1 到 ddd 等概率出现。\n投出点数 xxx 后，飞机会移动 xxx 步，每步移动一格，方向初始向左移动，若到达终点，会向右移动。\n若投出的点数为 ddd 点，可以继续投掷，直到投出的点数不是 ddd 点。\n求让这架飞机停在终点回合数的期望。\n输入描述\n第一行一个数字 TTT 表示 TTT (T≤100T \\leq 100T≤100) 组数据。\n接下来每行两个正整数 n,d(2≤d,n≤100000)n,d (2\\leq d,n \\leq 100000)n,d(2≤d,n≤100000)\n输出描述\n输出 T 行，每行保留两位小数输出答案。\n样例\n\n样例1\n\n[input]\n6\n1 6\n2 6\n3 6\n4 6\n5 6\n6 6\n[output]\n5.00\n5.00\n5.00\n5.00\n5.00\n5.17\n思路\n设 fxf_xfx​ 为从 xxx 走到 111 的 步数。\n\n当 x≥dx \\geq dx≥d 时，fx=∑i=1ddpx−idf_x = \\sum_{i=1}^{d} \\frac{dp_{x-i}}{d}fx​=∑i=1d​ddpx−i​​\n当 x&lt;dx &lt; dx&lt;d 时， 期望为 d−1d-1d−1 。\n\n来源：2020牛客NOIP赛前集训营-普及组（第五场）题解\n代码\n#include&lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nint main() &#123;\n    int t;\n    cin &gt;&gt; t;\n    while(t--) &#123;\n        int n, d;\n        cin &gt;&gt; n &gt;&gt; d;\n        if(d == 1) &#123;\n            cout &lt;&lt; &quot;1.00&quot; &lt;&lt; endl;\n        &#125;\n        else if(n &lt; d) &#123;\n            cout &lt;&lt; fixed &lt;&lt; setprecision(2) &lt;&lt; d-1.00 &lt;&lt; endl;\n        &#125;\n        else &#123;\n            double f[100005], sum[100005];\n            memset(f, 0x00, sizeof(f));\n            memset(sum, 0x00, sizeof(sum));\n            f[0] = sum[0] = 1;\n            for(int i = 1 ; i &lt; d, i &lt;= n ; i++) &#123;\n                f[i] = d - 1.00;\n                sum[i] = sum[i-1] + f[i];\n            &#125;\n            for(int i = d ; i &lt;= n ; i++) &#123;\n                    f[i]   = (sum[i-1] + f[i] - f[i-d-1])/d;\n                    sum[i] = sum[i-1] + f[i] - f[i-d-1];\n            &#125;\n            cout &lt;&lt; fixed &lt;&lt; setprecision(2) &lt;&lt; f[n] &lt;&lt; endl;\n        &#125;\n    &#125;\n    return 0;\n&#125;\n","categories":["OI"],"tags":["题解","牛客网"]},{"title":"给腾讯云服务器免费增加第二个 IP","url":"//post/tencent-cloud-cvm-dual-ip/","content":"前言\n良心云果然是良心云，增加了一个IP四舍五入居然不要钱，不过还是要登进系统配置一下双IP的。\n\n\n和客服的对话\n增加网卡&amp;公网IP\n\n点击按钮新建一个弹性网卡并绑定\n\n绑定完以后可以在服务器的弹性网卡管理页面看到详情\n\n点击新建的弹性网卡，进入管理页面，并记录下这张网卡的内网IP，稍后会用到\n\n点击绑定按钮，并申请一个弹性公网IP\n\n\n此时弹性公网IP已经绑定成功，并且可以看到已经变为不收取IP资源费的状态了\n\n查看主网卡的内网IP，并记录下这个IP，稍后会用到\n配置服务器的网络设置\n使用 ip addr 查看网卡名称，并记录下来\n\n切换到网卡配置文件目录\ncd /etc/sysconfig/network-scripts/\n编辑 ifcfg-eth0 文件，将下方内容修改后填入\nDEVICE=&quot;eth0&quot;             # 弹性网卡名称\nNM_CONTROLLED=&quot;yes&quot;       # 是否由 Network Manager 控制该网络接口\nONBOOT=&quot;yes&quot;              # 系统启动时是否激活\nIPADDR=&quot;172.21.0.10&quot;      # 弹性网卡上的 IP 地址\nNETMASK=&quot;255.255.240.0&quot;   # 子网掩码\nGATEWAY=&quot;172.21.0.1&quot;      # 网关\n\n其中 IPADDR 填写主网卡的内网IP。\n子网掩码可以使用 V2EX 提供的 IPv4 子网查询工具 查询对应的子网。\n网关根据创建网卡时选择的子网而定。\n\n新建 ifcfg-eth1 文件，将下方内容修改后填入\nDEVICE=&quot;eth1&quot;             # 需配置的弹性网卡名称（此处是新添加的网卡名称）\nNM_CONTROLLED=&quot;yes&quot;       # 是否由 Network Manager 控制该网络接口\nONBOOT=&quot;yes&quot;              # 系统启动时是否激活\nIPADDR=&quot;172.21.0.12&quot;      # 弹性网卡上的 IP 地址\nNETMASK=&quot;255.255.240.0&quot;   # 子网掩码\n# GATEWAY=&quot;172.21.0.1&quot;    # 网关（若与eth0的网关不同，需要删除注释并修改为正确的网关）\n\n其中 IPADDR 填写新添加网卡的内网IP。\n子网掩码可以 V2EX 提供的 IPv4 子网查询工具 查询对应的子网。\n网关根据创建网卡时选择的子网而定。\n\n保存后重启网络服务。\nservice network restart\n\n配置路由（可选）\n\n按照上述步骤配置好后，Linux 还是默认都从主网卡发包。\n您可通过策略路由让报文从哪个网卡进，并从该网卡返回。\n\n创建路由表\necho &quot;10 t1&quot; &gt;&gt; /etc/iproute2/rt_tables\necho &quot;20 t2&quot; &gt;&gt; /etc/iproute2/rt_tables\n添加默认路由\nip route add default dev eth0 via 172.21.0.1 table 10\nip route add default dev eth1 via 172.21.0.1 table 20\n\n上述两个命令中，172.21.0.1要分别替换成主网卡所属子网的网关，以及辅助网卡所属子网的网关。\n\n配置策略路由\nip rule add from 172.21.0.10 table 10\nip rule add from 172.21.0.12 table 20","categories":["随笔"],"tags":["网络","Linux"]},{"title":"USTC Hackergame 2020 Write Up","url":"//post/ustc-hackergame-2020-write-up/","content":"前言\n对于我这种啥也不会的蒟蒻，拿到第676名已经是很不错的了（逃\n\nweb\n签到题\nweb题当然要先看源码了（出题人好恶毒啊）\n\n再就是改值、提交\n\nso easy~\n\nflag 获取成功：flag&#123;hR6Ku81-HappyHacking2020-35a790fff0&#125;\n2048\n首先F12看下源码，看到了一个有趣的东西\n\n这么好的东西当然要拖到console里面去啊\n\n\n小彩蛋：JavaScript 中 String 类型转换成数字类型时会得到 NaN，凑成了 banana 。\n\n然后就出来了此题的 「flxg」\n\nflxg获取成功：flxg&#123;8G6so5g-FLXG-7b77994fc5&#125;\ngeneral\n一闪而过的 Flag\n直接打开是会闪，但是，你闪归你闪，我直接用cmd打开，你总不能 把我cmd窗口关掉吧 还继续闪吧\n\nflag获取成功：flag&#123;Are_you_eyes1ght_g00D?_can_you_dIst1nguish_1iI?&#125;\n猫咪问答++\n\n\n第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？\n\n\n这个很好找，链接奉上：https://tools.ietf.org/html/rfc1149\n\n\nUSTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？\n\n\n谷歌一下，你就知道 https://news.ustclug.org/2019/09/2019-sfd-ustc/\n\n\n中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？\n\n\n\n至于剩下的… 懒得找了，直接暴力吧\n\n\n以下编程语言、软件或组织对应标志是哺乳动物的有几个？\nDocker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.\n\n\n\n\n中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？\n\n\n\n附上代码：\nfor((i=1;i&lt;=23;i=($i+1))); do for((j=1;j&lt;=30;j=($j+1))); do echo &quot;[$i, $j] $(curl -s &#x27;http://202.38.93.111:10001/&#x27; --data &quot;q1=$i&amp;q2=256&amp;q3=9&amp;q4=$j&amp;q5=17098&quot; -H &quot;Cookie: PHPSESSID=******; session=******&quot; | grep &#x27;flag.*&#x27;)&quot; ; done ; done\nflag获取成功：flag&#123;b4a31f2a_G00G1e_1s_y0ur_fr13nd_228b608a32&#125;\n233 同学的 Docker\n\n众所周知，Docker 镜像是分层存储的，所以这道题可以很轻松地解出来。\n\n先pull下来镜像。\ndocker inspect 8b8d3c8324c7/stringtool\n然后查看镜像的元信息，下面是简化版的结果（json格式）\n[\n    &#123;\n        &quot;Id&quot;: &quot;sha256:be6d023618d199e0ec7448f70e5e47a00c6c2b79777ad5e2d312a6f74d6ad56b&quot;,\n        &quot;RepoTags&quot;: [\n            &quot;8b8d3c8324c7/stringtool:latest&quot;\n        ],\n        &quot;RepoDigests&quot;: [\n            &quot;8b8d3c8324c7/stringtool@sha256:aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152&quot;\n        ],\n        &quot;Parent&quot;: &quot;&quot;,\n        &quot;Comment&quot;: &quot;&quot;,\n        &quot;Created&quot;: &quot;2020-10-16T12:51:09.221320098Z&quot;,\n        &quot;Container&quot;: &quot;d2f452fddd5c71c8c57a29d67f29c69ffac419440d57664dad6e4ba1f0eff8a1&quot;,\n        &quot;GraphDriver&quot;: &#123;\n            &quot;Data&quot;: &#123;\n                &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/e5ae9d16844b8a8f5a943dec4172e04f6cdd283af181e1d17315c6b4df883eb1/diff:/var/lib/docker/overlay2/e394091d4d369e4b39d51389ada0156f8df91164e7928ca705321012b3164171/diff:/var/lib/docker/overlay2/de25217d9ac38b566f5e21050325fc0b712b81eb76d8bf949535efe4048150dc/diff:/var/lib/docker/overlay2/44b1b520904edb80dde2e1cfd0bb4e8cc272bcdb3abfbecb9f7c58c66fda461f/diff:/var/lib/docker/overlay2/77e74c48f3d794c594fcbbaafb1de3de084d5680c7361eb3c694cd74bb5ba7d2/diff:/var/lib/docker/overlay2/e2f50b5ba8b187a859f175daf953b5f1244ca210e65fc281cebbb490c1736090/diff:/var/lib/docker/overlay2/c49ab73078dbf960574fba1cb22cbfa6cb80300213ef9ce0e8541204181b2ea6/diff:/var/lib/docker/overlay2/cdca87b3621cb3bafbb198f6b90aa229e225eec78f0a58b0b17415bc0c252c3c/diff:/var/lib/docker/overlay2/c75c733f9469403b6677b86de747b78eee86b342e4b8cb67301b62bc37148f0d/diff:/var/lib/docker/overlay2/6c5b7e0fcab90d5b9e95987fa4901fdaca167e20078efc15255025edaa3bffe5/diff:/var/lib/docker/overlay2/15ec67c13cb10d0efe49ffa8038af1e4e15ee4ace3d0e3cbb3b35373438162ee/diff:/var/lib/docker/overlay2/63919ff473de17fc4a04bebe8e3163ac9a6615e860c8d154c58b40e83cae3008/diff:/var/lib/docker/overlay2/301804bb5ea02f0be82935af0838aae81fb796470e35ca799c010ee551c63901/diff:/var/lib/docker/overlay2/837182ab20cd4356c084efceb23eaf81921b199deeb4260a3bb8bd3690bdf248/diff:/var/lib/docker/overlay2/83f0cdea53e8d31281de36413a4d5e5ba9aef2fce54733ab8686bdc04a0c7736/diff:/var/lib/docker/overlay2/fad7f08992db8ca5ee5d731ccc21ac6746107798714b453e6fb21f23f0de8ed6/diff:/var/lib/docker/overlay2/2742f86c6ff24a479ff553458418cee16e1d90c3ba6e51f28599fcd2143108c0/diff:/var/lib/docker/overlay2/f0ea5cad64532fdff5edaaad4880132a8811bbd04019a2b216710dfda4bb829b/diff:/var/lib/docker/overlay2/af49c2f259440c1d94b6843258a68201bb3a37b6ec0e20b7e1dc6773de29e5eb/diff:/var/lib/docker/overlay2/9d6591c82c88ba3d461cf4d20c03e2a4b064454e3bbe9718b26e97eaf1fa703b/diff:/var/lib/docker/overlay2/eb71979f0abedbf4854bd95a364726dd7dc21b779512dad582bdefe87b24efb3/diff:/var/lib/docker/overlay2/b14870a3b3e75ac73506b96ad8de3ac918b6d1dbb8cb702e56b1d879910ee8d7/diff&quot;,\n                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/9d9609e4438067f4a2b0d26aeefab51a6e0abb58262e571b5fe2558955f271b7/merged&quot;,\n                &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/9d9609e4438067f4a2b0d26aeefab51a6e0abb58262e571b5fe2558955f271b7/diff&quot;,\n                &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/9d9609e4438067f4a2b0d26aeefab51a6e0abb58262e571b5fe2558955f271b7/work&quot;\n            &#125;,\n            &quot;Name&quot;: &quot;overlay2&quot;\n        &#125;\n    &#125;\n]\n查看 diff 文件夹：\n\n然后就能看到文件内容了~\n\nflag获取成功：flag&#123;Docker_Layers!=PS_Layers_hhh&#125;\n","categories":["技术"],"tags":["CTF"]},{"title":"使用 Cloudflare Warp 为单栈 VPS 添加双栈网络访问","url":"//post/vps-cloudflare-warp/","content":"Warp 是 Cloudflare 提供的一项基于 WireGuard 的网络流量安全及加速服务，能够让你通过连接到 Cloudflare 的边缘节点实现隐私保护及链路优化。\n\n由于 Cloudflare 官方的 Warp Client 过于臃肿，导致我看到安装包大小后就决定直接放弃安装，于是我选择了 ViRb3/wgcf 替代。\n使用 apt 安装 cloudflare-warp 时的提示\n安装依赖\n可以前往 Releases 页面 下载编译好的二进制文件以供使用。\n也可使用如下命令安装：\ncurl -Ls https://git.io/wgcf-installer.sh | bash\n安装好之后运行 wgcf --help ，得到类似下图的输出即为安装成功：\n\n另外还需按照 WireGuard 官网 上的说明安装 WireGuard 。\n根据需求可能还需要安装 resolvconf 。\n生成 WireGuard 配置文件\n先使用 wgcf register 命令注册 Warp 。\n使用键盘上的方向键选择 &quot;Yes&quot; 并回车确认\n注册成功后的提示：\n\n之后使用 wgcf generate 命令生成配置文件。\n\n修改 WireGuard 配置文件\n这是一份生成出来的配置文件：\n[Interface]\nPrivateKey = ******\nAddress = 172.16.*.*/32\nAddress = fd01:******/128\nDNS = 1.1.1.1\nMTU = 1280\n\n[Peer]\nPublicKey = ******\nAllowedIPs = 0.0.0.0/0\nAllowedIPs = ::/0\nEndpoint = engage.cloudflareclient.com:2408\n\n添加 IPv4 网络访问\n\n删去 [Interface] 中的 Address = fd01:******/128 ；\n删去 [Peer] 中的 AllowedIPs = ::/0 ；\n将 Endpoint 的域名替换为解析出来的 IPv6 地址，如 [2606:4700:d0::a29f:c001]:2408 。\n\n\n添加 IPv6 网络访问\n\n删去 [Interface] 中的 Address = 172.16.*.*/32 ；\n删去 [Peer] 中的 AllowedIPs = 0.0.0.0/0 ；\n将 Endpoint 的域名替换为解析出来的 IPv4 地址，如 162.159.192.1:2408 。\n\n\n\n如果不需要使用 Cloudflare 的 DNS 服务可以删去 DNS = 1.1.1.1 这一行，使用的话需要安装 resolvconf 。\n启动 WireGuard 隧道\n将刚才修改好的配置文件移动到 /etc/wireguard/ 目录下，推荐命名为 wgcf.conf ，下面的操作以这个文件名为准。\n使用 systemd enable --now wg-quick@wgcf 命令启动隧道，然后使用 wg show wgcf 命令查看隧道状态。\n如果在启动时出现了错误，可以使用 systemd status wg-quick@wgcf 命令查看错误信息，修复后使用 systemd start wg-quick@wgcf 启动隧道。\n一切正常\n之后就可以享受双栈网络带来的便利了~\n注：日常如果需要重启隧道可以使用 systemctl restart wg-quick@wgcf 命令。\n后记\n折腾这些的原因是我从某个 Player IX 那里嫖的 VM 没有提供 IPv4 网络访问权限，这让我日常的维护工作麻烦了很多，于是我想到了 Cloudflare Warp 这个东西。CloudFlare Warp 提供的网络访问相较于 TunnelBroker.net 、 TunnelBroker.ch 等一众隧道要好很多，延迟并不像其他隧道那样高。\n在查找资料的过程中我也发现了很多博客里面所描述的内容有误或已经过时，所以综合其他文章的内容加上自己的实践，写下了这篇文章。\n参考资料\n\n【WGCF】连接CF WARP为服务器添加IPv4/IPv6网络 - Luminous’ Home\nCloudflare WARP 给 VPS 服务器额外添加 IPv4 或 IPv6 网络获得“原生”IP - P3TERX\n\n","categories":["技术"],"tags":["Linux","折腾","Cloudflare"]},{"title":"【多图】在 VMware 上安装 macOS 11 Big Sur Beta","url":"//post/vmware-macos-bigsur/","content":"工具准备\n\n文件：BigSur.cdr\n文件：unlocker.zip\n软件：VMware Workstation Pro 15\n\n文末会给出上述工具的下载地址。\n安装 VMware\n安装步骤这里不再细说。\n不过这里来说下 VMware 15.5.5 以后 VMware 和 微软的新动作：VMware 和 Hyper-V 可以共存了~[1][2]\n*注：需 Windows 10 2004 以上版本的系统\n只需要在安装时勾选下图所示的选项即可：\n\n于是，我的 WSL2 和我的 Docker Desktop 可以和 VMware 一起愉快的玩耍辣😆~\n解锁 VMware\n条件：先关闭 VMware 的所有进程。\nWindows\n解压 Unlocker.zip 内的所有文件到一个文件夹中，右键 win-install.cmd ，选择&quot;以管理员身份运行&quot;，等待运行完毕即可。\nLinux\n使用以下命令解锁 VMware ：\nunzip unlocker.zip\nchmod +x lnx-install.sh\nsudo bash lnx-install.sh\n检验方法：创建虚拟机时是否可以选择 macOS 系统。\n创建虚拟机\n\n▲ 打开 VMware Workstation 15 ，选择 「新建虚拟机」。\n\n▲ 初始页面\n\n▲ 硬件兼容性\n\n▲ 镜像配置\n我们创建完成后再挂载镜像，选择&quot;稍后安装操作系统&quot;。\n\n▲ 选择系统版本\n由于 Unlocker 最高只支持 macOS 10.16 ，所以这里选择最高的版本即 macOS 10.16 。\n\n▲ 设置虚拟机名称、选择存储位置\n\n▲ 设置 CPU 核心数量\n\n▲ 调整内存大小\n\n▲ 网络配置\n\n▲ IO 配置\n\n▲ 磁盘配置\n\n▲ 磁盘配置\n\n▲ 磁盘配置\n\n▲ 磁盘配置\n\n▲ 完成！\n配置虚拟机\n在 vmx 文件末尾添加以下内容并保存。\nsmc.version = &quot;0&quot;\nhw.model = &quot;MacBookPro16,1&quot;\nboard-id = &quot;Mac-E1008331FDC96864&quot;\nboard-id.reflectHost = &quot;TRUE&quot;\n挂载安装镜像\n点击&quot;编辑虚拟机设置&quot;，选择&quot;CD/DVD&quot;选项。\n\n如图所示，先勾选&quot;使用 ISO 映像文件&quot;选项，再点击浏览，点击&quot;所有文件&quot;，选中 bigsur.cdr 并确认。\n保存以后点击&quot;开启虚拟机&quot;\n安装 macOS\n\n▲ 耐心等待加载\n\n▲ 选择中文并继续\n\n▲ 选中磁盘工具并打开\n\n▲ 找到名称为 VMware Virtual SATA Hard Drive Media 的磁盘，选中该磁盘\n\n▲ 抹掉名称为 VMware Virtual SATA Hard Drive Media 的磁盘，格式选择 APFS\n\n▲ 退出磁盘工具，选择 安装 macOS 并继续\n\n▲ 点击继续开始正式安装\n\n▲ 同意条款与条件\n\n▲ 选择安装位置\n\n▲ 开始安装\n\n▲ 上面显示的剩余时间通常都是忽悠人的，得等好久\n配置 macOS\n\n▲ 首先选择国家和地区\n接下来按照自己需求配置即可，到配置迁移助理时选择以后\n\n▲ 选择 以后\n\n▲ 选择 稍后设置\n\n▲ All done!\n安装 VMware Tools\n在 VMware 的 虚拟机(M) 菜单栏中选择 安装 VMware Tools(T)... 选项。\n\n之后按照步骤操作就行啦~\n参考资料\n[1] VMware Blogs: VMware Workstation 15.5 Now Supports Host Hyper-V Mode\n[2] Microsoft Tech Community: VMware Workstation and Hyper-V\n文件下载\n百度网盘\n\n链接：https://pan.baidu.com/s/1m_iwiZK1XVIhwrrpCenB3Q\n提取码：blog\n\n","categories":["技术"],"tags":["macOS"]},{"title":"初识 Service Worker —— 使用 Workbox 快速开发 Service Worker","url":"//post/workbox-service-worker/","content":"对于优化前端加载性能这个问题，许多人以 http-cache、异步加载、304 状态码、文件压缩、CDN 等方法来解决。\n其实除了这些方法，还有一个比它们都强大的，那就是 Service Worker 。\n\n我们可以使用 Google Chrome 团队的 Workbox 来实现 Service Worker 的快速开发。\n注册 Service Worker\n在页面中添加以下内容以注册一个 Service Worker 。\n&lt;script&gt;\n    // 检测是否支持 Service Worker\n    // 也可使用 navigator.serviceWorker 判断\n    if (&#x27;serviceWorker&#x27; in navigator) &#123; \n        // 为了保证首屏渲染性能，在页面 onload 完之后注册 Service Worker\n        // 不使用 window.onload 以免冲突   \n        window.addEventListener(&#x27;load&#x27;, () =&gt; &#123;\n            navigator.serviceWorker.register(&#x27;/sw.js&#x27;);\n        &#125;);\n    &#125;\n&lt;/script&gt;\n当然，在这之前你需要先有一个 Service Worker 的代码 /sw.js 。\n你可以在这个文件中写入以下代码来检测是否成功地注册了 Service Worker 。\nconsole.clear();\nconsole.log(&#x27;Successful registered service worker.&#x27;);\n控制台输出\n引入 Workbox\n你可以使用 Google 提供的 CDN 来引入 Workbox 。\n只需在 sw.js 的开头写入以下内容即可：\nimportScripts(&#x27;https://storage.googleapis.com/workbox-cdn/releases/6.1.1/workbox-sw.js&#x27;);\n如果你觉得 Google 的 CDN 不太靠谱的话，可以使用 workbox-cli 将资源存在本地：\nnpm i workbox-cli -g\nworkbox copyLibraries &#123;path/to/workbox/&#125;\n这时需要在 sw.js 的开头将上方写入的内容替换为以下内容即可：\nimportScripts(&#x27;&#123;path/to&#125;/workbox/workbox-sw.js&#x27;);\nworkbox.setConfig(&#123;\n    modulePathPrefix: &#x27;&#123;path/to&#125;/workbox/&#x27;\n&#125;);\nWorkbox 策略\nStale While Revalidate（重新验证时过期）\n工作流程示意图\n此策略将对网络请求使用缓存来响应（如果有），并在后台更新缓存。如果未缓存，它将等待网络响应并使用它。\n这是一个相当安全的策略，因为这意味着用户会定期更新其缓存。这种策略的缺点是：它总是从网络上请求资源，较为浪费用户的带宽。\nregisterRoute(\n    new RegExp(matchString),\n    new workbox.strategies.StaleWhileRevalidate()\n);\nNetwork First（网络优先）\n工作流程示意图\n此策略将尝试首先从网络获得响应。如果收到响应，它将把它传递给浏览器，并将其保存到缓存中。如果网络请求失败，将使用最后一个缓存的响应。\nregisterRoute(\n    new RegExp(matchString),\n    new workbox.strategies.NetworkFirst()\n);\nCache First（缓存优先）\n工作流程示意图\n此策略将首先检查缓存中是否有响应，如果有响应，则使用该策略。如果请求不在缓存中，则将使用网络，并将任何有效响应添加到缓存中，然后再传递给浏览器。\nregisterRoute(\n    new RegExp(matchString),\n    new workbox.strategies.CacheFirst()\n);\nNetwork Only（仅网络）\n工作流程示意图\n强制响应来自网络。\nregisterRoute(\n    new RegExp(matchString),\n    new workbox.strategies.NetworkOnly()\n);\nCache Only（仅缓存）\n工作流程示意图\n强制响应来自缓存。\nregisterRoute(\n    new RegExp(matchString),\n    new workbox.strategies.CacheOnly()\n);\n策略配置\n可以通过定义要使用的插件来自定义路由的行为。\nnew workbox.strategies.StaleWhileRevalidate(&#123;\n    // Use a custom cache for this route.\n    cacheName: &#x27;my-cache-name&#x27;,\n\n    // Add an array of custom plugins (e.g. `ExpirationPlugin`).\n    plugins: [\n        ...\n    ]\n&#125;);\nWorkbox 中的自定义策略\n在某些情况下，您可能希望使用自己的其他策略来响应请求，或者只是通过模板在 Service Worker 中生成请求。\n为此可以提供一个异步返回 Response 对象的函数 handler 。\nconst handler = async (&#123; url, event &#125;) =&gt; &#123;\n  return new Response(`Custom handler response.`);\n&#125;;\n\nworkbox.routing.registerRoute(\n    new RegExp(matchString),\n    handler\n);\n需要注意的是，如果在 match 回调中返回一个值，它将 handler 作为 params 参数传递到回调中。\nconst match = (&#123; url, event &#125;) =&gt; &#123;\n    if (url.pathname === &#x27;/example&#x27;) &#123;\n        return &#123;\n            name: &#x27;Workbox&#x27;,\n            type: &#x27;guide&#x27;,\n        &#125;;\n    &#125;\n&#125;;\n\nconst handler = async (&#123; url, event, params &#125;) =&gt; &#123;\n    // Response will be &quot;A guide to Workbox&quot;\n    return new Response(\n        `A $&#123;params.type&#125; to $&#123;params.name&#125;`\n    );\n&#125;;\n\nworkbox.routing.registerRoute(match, handler);\n如果 URL 中的某些信息可以在 match 回调中解析一次并在中使用，则这可能会对 handler 有所帮助。\nWorkbox 实践\n通常对于大部分项目使用 Workbox 时一般会引入相应的 gulp 或者 webpack 插件，在构建流程中完成对 Service Worker 的注册、将指定 URL 进行 Precache、完成 sw.js 的生成，等等。\n但是对于 Hexo、Jekyll 这些静态站点生成器或者 WordPress、Typecho 这些 CMS，如果不安装相应的插件，就需要自己从头编写一个 sw.js。\n先写一下总的配置：\nlet cacheSuffixVersion = &#x27;-210227&#x27;;  // 缓存版本号\nconst maxEntries = 100;              // 最大条目数\n\ncore.setCacheNameDetails(&#123;\n    prefix: &#x27;baoshuo-blog&#x27;,          // 前缀\n    suffix: cacheSuffixVersion       // 后缀\n&#125;);\nGoogle Fonts\nGoogle Fonts 主要使用两个域名：fonts.googleapis.com 和 fonts.gstatic.com ，因此只需在匹配到这两个域名时进行缓存。\nworkbox.routing.registerRoute(\n    // 匹配 fonts.googleapis.com 和 fonts.gstatic.com 两个域名\n    new RegExp(&#x27;^https://(?:fonts\\\\.googleapis\\\\.com|fonts\\\\.gstatic\\\\.com)&#x27;),\n    new workbox.strategies.StaleWhileRevalidate(&#123;\n        // cache storage 名称和版本号\n        cacheName: &#x27;font-cache&#x27; + cacheSuffixVersion,\n        plugins: [\n            // 使用 expiration 插件实现缓存条目数目和时间控制\n            new workbox.expiration.ExpirationPlugin(&#123;\n                // 最大保存项目\n                maxEntries,\n                // 缓存 30 天\n                maxAgeSeconds: 30 * 24 * 60 * 60,\n            &#125;),\n            // 使用 cacheableResponse 插件缓存状态码为 0 的请求\n            new workbox.cacheableResponse.CacheableResponsePlugin(&#123;\n                statuses: [0, 200],\n            &#125;),\n        ]\n    &#125;)\n);\njsDelivr CDN\n使用 jsDelivr CDN 时如果指定了库的版本，对应的文件可以称得上是永久不会改变的，所以使用 CacheFirst 来进行缓存。\nworkbox.routing.registerRoute(\n    new RegExp(&#x27;^https://cdn\\\\.jsdelivr\\\\.net&#x27;),\n    new workbox.strategies.CacheFirst(&#123;\n        cacheName: &#x27;static-immutable&#x27; + cacheSuffixVersion,\n        fetchOptions: &#123;\n            mode: &#x27;cors&#x27;,\n            credentials: &#x27;omit&#x27;\n        &#125;,\n        plugins: [\n            new workbox.expiration.ExpirationPlugin(&#123;\n                maxAgeSeconds: 30 * 24 * 60 * 60,\n                purgeOnQuotaError: true\n            &#125;)\n        ]\n    &#125;)\n);\nGoogle Analytics\nWorkbox 有一个 Google Analytics 离线统计插件，可惜我用的是 Sukka 大佬编写的非官方 Google Analytics 实现，所以只能添加一个 NetworkOnly 来放弃离线统计。\nworkbox.routing.registerRoute(\n    new RegExp(&#x27;^https://api\\\\.baoshuo\\\\.ren/cfga/(.*)&#x27;),\n    new workbox.strategies.NetworkOnly(&#123;\n        plugins: [\n            new workbox.backgroundSync.BackgroundSyncPlugin(&#x27;Optical_Collect&#x27;, &#123;\n                maxRetentionTime: 12 * 60 // Retry for max of 12 Hours (specified in minutes)\n            &#125;),\n        ]\n    &#125;)\n);\n图片\n由于我开通了 SM.MS 的 LifeTime Premium VIP ，所以图片当然是要存到这里啦~\nSM.MS 的图片域名有这几个：i.loli.net、vip1.loli.net、vip2.loli.net、vip1.loli.io、vip2.loli.io，只需要写一个正则匹配下就好了。\n由于图片链接对应的文件像 jsDelivr 一样也是几乎永久都不会改变的，所以使用 CacheFirst 来进行缓存。\nworkbox.routing.registerRoute(\n    new RegExp(&#x27;^https://(?:i|vip[0-9])\\\\.loli\\\\.(?:io|net)&#x27;),\n    new workbox.strategies.CacheFirst(&#123;\n        cacheName: &#x27;img-cache&#x27; + cacheSuffixVersion,\n        plugins: [\n            // 使用 expiration 插件实现缓存条目数目和时间控制\n            new workbox.expiration.ExpirationPlugin(&#123;\n                maxEntries,                          // 最大保存项目\n                maxAgeSeconds: 30 * 24 * 60 * 60,    // 缓存 30 天\n            &#125;),\n            // 使用 cacheableResponse 插件缓存状态码为 0 的请求\n            new workbox.cacheableResponse.CacheableResponsePlugin(&#123;\n                statuses: [0, 200],\n            &#125;),\n        ]\n    &#125;)\n);\n友情链接\n这些文件只是偶尔更新，使用 StaleWhileRevalidate ，可以兼顾速度与版本更新。\nworkbox.routing.registerRoute(\n    new RegExp(&#x27;^https://friends\\\\.baoshuo\\\\.ren(.*)(png|jpg|jpeg|svg|gif)&#x27;),\n    new workbox.strategies.StaleWhileRevalidate(&#123;\n        cacheName: &#x27;img-cache&#x27; + cacheSuffixVersion,\n        fetchOptions: &#123;\n            mode: &#x27;cors&#x27;,\n            credentials: &#x27;omit&#x27;\n        &#125;\n    &#125;)\n);\nworkbox.routing.registerRoute(\n    new RegExp(&#x27;https://friends\\\\.baoshuo\\\\.ren/links.json&#x27;),\n    new workbox.strategies.StaleWhileRevalidate()\n);\nDisqus 评论\nDisqusJS 判断访客的 Disqus 可用性是通过检查 shortname.disqus.com/favicon.ico 和 disqus.com/favicon.ico ，显然是不能被缓存的。\nAPI 可以在无网络时使用 NetworkFirst 来达到无网络时也能查看评论的效果。\n另外 Disqus 本身也没有缓存的必要，所以对 *.disqus.com 使用 NetworkOnly 即可。\n但是 *.disquscdn.com 下的头像、JS、CSS 是可以缓存一段时间的，所以使用 CacheFirst 缓存 10 天。\n// API\nworkbox.routing.registerRoute(\n    new RegExp(&#x27;^https://api\\\\.baoshuo\\\\.ren/disqus/(.*)&#x27;),\n    new workbox.strategies.NetworkFirst(&#123;\n        cacheName: &#x27;dsqjs-api&#x27; + cacheSuffixVersion,\n        fetchOptions: &#123;\n            mode: &#x27;cors&#x27;,\n            credentials: &#x27;omit&#x27;\n        &#125;,\n        networkTimeoutSeconds: 3\n    &#125;)\n);\n// Disqus\nworkbox.routing.registerRoute(\n    new RegExp(&#x27;^https://(.*)disqus\\\\.com&#x27;),\n    new workbox.strategies.NetworkOnly()\n);\nworkbox.routing.registerRoute(\n    new RegExp(&#x27;^https://(.*)disquscdn\\\\.com(.*)&#x27;),\n    new workbox.strategies.CacheFirst(&#123;\n        cacheName: &#x27;disqus-cdn-cache&#x27; + cacheSuffixVersion,\n        plugins: [\n            new workbox.expiration.ExpirationPlugin(&#123;\n                maxAgeSeconds: 10 * 24 * 60 * 60,\n            &#125;),\n            new workbox.cacheableResponse.CacheableResponsePlugin(&#123;\n                statuses: [0, 200],\n            &#125;),\n        ]\n    &#125;)\n);\n后缀匹配\n针对其余没有被域名匹配到的静态文件，通过文件后缀进行匹配并使用 StaleWhileRevalidate ，可以兼顾速度与版本更新。\nworkbox.routing.registerRoute(\n    new RegExp(&#x27;.*\\.(?:png|jpg|jpeg|svg|gif|webp)&#x27;),\n    new workbox.strategies.StaleWhileRevalidate()\n);\nworkbox.routing.registerRoute(\n    new RegExp(&#x27;.*\\.(css|js)&#x27;),\n    new workbox.strategies.StaleWhileRevalidate()\n);\n默认行为\n使用 Workbox 的 defaultHandler 匹配剩下的请求（包括页面自身），一律使用 NetworkFirst ，借助 Workbox 的 runtimeCache 起到加速和离线效果。\nworkbox.routing.setDefaultHandler(\n    new workbox.strategies.NetworkFirst(&#123;\n        networkTimeoutSeconds: 3\n    &#125;)\n);\n参考资料\n文章头图来自：https://developers.google.com/web/tools/workbox\nWorkbox 策略 一节中的配图来自：https://web.dev/offline-cookbook/\n\nWorkbox - Google Developers\nWorkbox, not sw-toolbox &amp; sw-precache - Sukka’s Blog\nGoogleChrome/workbox - GitHub\nThe Offline Cookbook - web.dev\n\n","categories":["技术"],"tags":["Web"]},{"title":"浅谈网页「深色模式」的实现","url":"//post/about-darkmode/","content":"随着越来越多的操作系统、浏览器开始支持 Dark Mode 和相应的 Media Queries Level 5，越来越多的网站开始添加深色模式。\n我的博客其实早在 2019 年末就支持了深色模式，但一直没有很好地实现这个功能。于是在 2020 年的那个超长寒假，我把博客系统更换到了 Typecho，并与某位大佬一起实现了一个深色模式插件（原文链接已丢失）。正好今年寒假把博客换到了 Hexo 上，趁着主题代码还热乎、能看懂，赶紧来写写我的深色模式是如何实现的。\n\n现在的深色模式效果\n关于深色模式\n\nDark themes reduce the luminance emitted by device screens, while still meeting minimum color contrast ratios. They help improve visual ergonomics by reducing eye strain, adjusting brightness to current lighting conditions, and facilitating screen use in dark environments – all while conserving battery power.[1]\n\n翻译\n深色主题能降低设备屏幕发出的亮度，同时仍然满足最小的颜色对比度。它们有助于改善视觉效果、减少眼睛疲劳，调整亮度以适应当前的照明条件，并有助于在黑暗环境中使用屏幕，同时节省电池电量。\n\n界面设计[1:1]\n颜色\n不要使用 100% 的纯黑\nGoogle 在 Material Design 的设计指南中对于深色模式列出了一系列设计规范，其中第一条就是 「不要使用 100% 的纯黑」 。\nGoogle 推荐将深色表面和 100% 白色文字的对比度至少设置为为 15.8:1 （Dark surfaces and 100% white body text have a contrast level of at least 15.8:1）\n为什么呢？因为纯白色会反射所有波长的光线，而纯黑色会吸收所有光线，这是对比度最大的两种颜色，白底黑字时，文字过于刺眼，而黑底白字时，文字又可能难以辨认。如果长时间阅读这样的文字，势必会让眼睛感觉到疲劳，与深色模式开发的初衷背道而驰。\nGoogle 推荐使用 #121212 来作为深色模式的主背景色。\n\nA dark theme uses dark grey, rather than black, as the primary surface color for components. Dark grey surfaces can express a wider range of color, elevation, and depth, because it’s easier to see shadows on grey (instead of black).\nDark grey surfaces also reduce eye strain, as light text on a dark grey surface has less contrast than light text on a black surface.\n\n翻译\n深色主题应使用深灰而不是黑色作为组件的主要表面颜色。深灰色表面可以表示更广泛的颜色，高度和深度范围，因为更容易看到灰色阴影（而不是黑色）。\n深灰色的表面还可以减少眼睛疲劳，因为深灰色表面上的浅色文本的对比度低于黑色表面上的浅色文本。\n\n许多常见应用的深色模式背景色的 H 值都在 200~250 范围内（即蓝色范围），在纯灰色的基础上稍微偏冷一些。不过也有一些例外，比如网易云音乐的背景色有点偏暖，可能和其品牌色有关（网易云音乐的品牌色是暖红色）。\n\n不要让亮色占据过多面积\n在深色主题中应该尽可能地使用有限的颜色进行强调，并使大部分空间显示出深色表面。\n正确示例\n错误示例\n\n不要使用过高的色彩饱和度\n在深色模式下，过高的色彩饱和度可能会使文本像下方这样难以辨识（清晰度降低）：\n这张图片中的文本辨识度较低\n色彩饱和度过高还可能会导致文本在深色背景上产生光学振动，从而引起眼睛疲劳。\n最佳做法是使用 「去饱和色」 ，这样可以提高清晰度，并减少视觉抖动。\n这张图片中的文本较上方的图片来说文本辨识度提高了许多\n层次\n在浅色模式下，我们通常会使用投影来区分页面内元素的层次，但这种方法在深色模式中如果使用不当，不仅起不到区分页面内元素层次的作用，还会影响整体观感，起到反作用。\nGoogle 给出的示例\n\nWWDC 2019 中苹果设计师讲到深色模式的文本\nApple 认为在浅色模式下投影能轻松地区分两个视觉元素，但是在深色模式下作用甚微。所以他们建议在深色背景下，对前置元素的使用稍亮的灰色。[2]\n\n\n在组件表面(1)上放置一个白色半透明的遮罩层(2)，就可以体现出深色模式中的层次。\n代码实现\n这个主题使用了向 body 添加 .dark 类来实现深色模式。\n利用 Media Query 简单实现深色模式\n可以直接为深色模式编写独立的样式：\nbody &#123;\n    color: #111;\n&#125;\n\n@media (prefers-color-scheme: dark) &#123;\n    body.dark &#123;\n        color: #eee;\n    &#125;\n&#125;\n更进一步地，还可以使用 CSS Variable 来简化代码：\n:root &#123;\n    --text: #111;\n&#125;\n\n@media (prefers-color-scheme: dark) &#123;\n    :root &#123;\n        --text: #eee;\n    &#125;\n&#125;\n\nbody &#123;\n    color: var(--text);\n&#125;\n还可以利用 &lt;link&gt; 标签的 Media Query 来有条件地加载文件，节省流量：\n/* main.css */\nbody &#123;\n    color: #111;\n&#125;\n\n/* dark.css */\nbody &#123;\n    color: #eee;\n&#125;\n需要注意 CSS 选择器的权重，因此作为可选的 dark.css 一定要放在 main.css 之后加载。\n&lt;link rel=&quot;stylesheet&quot; href=&quot;main.css&quot;&gt;\n&lt;link rel=&quot;stylesheet&quot; href=&quot;dark.css&quot; media=&quot;(prefers-color-scheme: dark)&quot;&gt;\n使用 Media Query + JavaScript 实现跟随系统/定时切换深色模式\n:root &#123;\n    --text: #111;\n&#125;\n\n.dark &#123;\n    --text: #eee;\n&#125;\n\nbody &#123;\n    color: var(--text);\n&#125;\n这段 CSS 与先前的并没有什么差别，而且与其相对应的 JavaScript 也很好编写。\ndocument.addEventListener(&#x27;DOMContentLoaded&#x27;, (event) =&gt; &#123;\n    if ((window.matchMedia &amp;&amp; window.matchMedia(&#x27;(prefers-color-scheme: dark)&#x27;).matches)\n        || new Date().getHours() &gt;= 19 || new Date().getHours() &lt; 7) &#123;\n        document.body.classList.add(&#x27;dark&#x27;);\n    &#125;\n&#125;);\n此段代码中开启深色模式的条件有两个：\n\n系统开启了深色模式\n时间在晚7点~早7点之间\n\n只要满足上述任意一个条件，深色模式就会被开启。\n使用 Media Query + Toggle Button 实现跟随系统/手动切换深色模式[3]\n:root &#123;\n    --text: #111;\n&#125;\n\n.dark &#123;\n    --text: #eee;\n&#125;\n\nbody &#123;\n    color: var(--text);\n&#125;\n这段 CSS 与先前的并没有什么差别，下面就是令人头大的 JavaScript 部分了。\n先定义一些常量：\nconst rootElement = document.documentElement;\nconst darkModeClassName = &#x27;dark&#x27;;\nconst darkModeStorageKey = &#x27;user-color-scheme&#x27;;\nconst darkModeTogglebuttonElement = document.getElementById(&#x27;dark-mode-toggle-button&#x27;);\nconst validColorModeKeys = &#123; &#x27;dark&#x27;: true, &#x27;light&#x27;: true &#125;\nconst invertDarkModeObj = &#123; &#x27;dark&#x27;: &#x27;light&#x27;, &#x27;light&#x27;: &#x27;dark&#x27; &#125;\n接下来使用 try &#123;&#125; catch (e) &#123;&#125; 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：\nconst setLocalStorage = (key, value) =&gt; &#123;\n    try &#123;\n        localStorage.setItem(key, value);\n    &#125; catch (e) &#123;&#125;\n&#125;\n\nconst removeLocalStorage = (key) =&gt; &#123;\n    try &#123;\n        localStorage.removeItem(key);\n    &#125; catch (e) &#123;&#125;\n&#125;\n\nconst getLocalStorage = (key) =&gt; &#123;\n    try &#123;\n        return localStorage.getItem(key);\n    &#125; catch (e) &#123;\n        return null;    // 与 localStorage 中没有找到对应 key 的行为一致\n    &#125;\n&#125;\n获取当前 prefers-color-scheme 的方法：\nconst getModeFromCSSMediaQuery = () =&gt; &#123;\n    return window.matchMedia(&#x27;(prefers-color-scheme: dark)&#x27;).matches ? &#x27;dark&#x27; : &#x27;light&#x27;;\n&#125;\n再写一个清除 Class 和 LocalStorage 的函数：\nconst resetRootDarkModeClassAndLocalStorage = () =&gt; &#123;\n    rootElement.classList.remove(darkModeClassName);\n    rootElement.classList.remove(invertDarkModeObj[darkModeClassName]);\n    removeLocalStorage(darkModeStorageKey);\n&#125;\n接下来就是起主要作用的函数了，负责为 &lt;body&gt; 标签增删深色模式的 Class ：\nconst applyCustomDarkModeSettings = (mode) =&gt; &#123;\n    // 接受从「开关」处传来的模式，或者从 localStorage 读取\n    const currentSetting = mode || getLocalStorage(darkModeStorageKey);\n\n    if (currentSetting === getModeFromCSSMediaQuery()) &#123;\n        // 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式\n        resetRootDarkModeClassAndLocalStorage();\n    &#125; else if (validColorModeKeys[currentSetting]) &#123;\n        rootElement.classList.add(currentSetting);\n        rootElement.classList.remove(invertDarkModeObj[currentSetting]);\n    &#125; else &#123;\n        // 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null\n        // 或者 localStorage 被篡改，currentSetting 不是合法值\n        resetRootDarkModeClassAndLocalStorage();\n    &#125;\n&#125;\n还需要一个函数负责获取相反的显示模式，并将其存储到 LocalStorage 中\nconst toggleCustomDarkMode = () =&gt; &#123;\n    let currentSetting = getLocalStorage(darkModeStorageKey);\n\n    if (validColorModeKeys[currentSetting]) &#123;\n        // 从 localStorage 中读取模式，并取相反的模式\n        currentSetting = invertDarkModeObj[currentSetting];\n    &#125; else if (currentSetting === null) &#123;\n        // localStorage 中没有相关值，或者 localStorage 抛了 Error\n        // 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式\n        currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];\n    &#125; else &#123;\n        // 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值\n        return; // 直接 return;\n    &#125;\n    // 将相反的模式写入 localStorage\n    setLocalStorage(darkModeStorageKey, currentSetting);\n\n    return currentSetting;\n&#125;\n相关的函数都定义完了，是时候添加执行了：\n// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）\napplyCustomDarkModeSettings();\n// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效\ndarkModeTogglebuttonElement.addEventListener(&#x27;click&#x27;, () =&gt; &#123;\n    applyCustomDarkModeSettings(toggleCustomDarkMode());\n&#125;);\n\n使用 Media Query + Toggle Button + JavaScript 实现跟随系统/定时/手动切换深色模式\nCSS 和大部分 JavaScript 代码没有变化，此处仅说明有变化的代码。\n在函数 toggleCustomDarkMode() 中添加写入一个时间戳的操作：\n@@ -85,19 +114,20 @@\n const toggleCustomDarkMode = () =&gt; &#123;\n     let currentSetting = getLocalStorage(darkModeStorageKey);\n \n     if (validColorModeKeys[currentSetting]) &#123;\n         // 从 localStorage 中读取模式，并取相反的模式\n         currentSetting = invertDarkModeObj[currentSetting];\n     &#125; else if (currentSetting === null) &#123;\n         // localStorage 中没有相关值，或者 localStorage 抛了 Error\n         // 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式\n         currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];\n     &#125; else &#123;\n         // 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值\n         return; // 直接 return;\n     &#125;\n     // 将相反的模式写入 localStorage\n     setLocalStorage(darkModeStorageKey, currentSetting);\n+    setLocalStorage(darkModeTimeKey, +new Date());\n\n     return currentSetting;\n&#125;;\n重新编写入口，用来检测是否符合定时条件：\nconst initDarkMode = (nowTime) =&gt; &#123;\n    const lastSunrise = (nowTime.getHours() &lt; 7 ? new Date(nowTime.getFullYear(), nowTime.getMonth(), nowTime.getDate() - 1, 7) : new Date(nowTime.getFullYear(), nowTime.getMonth(), nowTime.getDate(), 7)).getTime();    // 日出\n    const lastSunset = (nowTime.getHours() &lt; 19 ? new Date(nowTime.getFullYear(), nowTime.getMonth(), nowTime.getDate() - 1, 19) : new Date(nowTime.getFullYear(), nowTime.getMonth(), nowTime.getDate(), 19)).getTime();  // 日落\n    const darkModeTime = new Date(parseInt((getLocalStorage(darkModeTimeKey) || &#x27;0&#x27;), 10)).getTime();\n    nowTime = nowTime.getTime();\n    if (lastSunrise &lt; lastSunset) &#123;\n        // 日出比日落早表示晚上\n        if (lastSunset &lt; darkModeTime) &#123;\n            // 当晚自行调整过日间/夜间模式\n            applyCustomDarkModeSettings();\n        &#125; else &#123;\n            applyCustomDarkModeSettings(darkModeClassName);\n        &#125;\n    &#125; else &#123;\n        // 日出比日落晚表示白天\n        if (lastSunrise &lt; darkModeTime) &#123;\n            console.log(1);\n            applyCustomDarkModeSettings();\n        &#125;\n        else &#123;\n            console.log(2);\n            applyCustomDarkModeSettings(invertDarkModeObj[darkModeClassName]);\n        &#125;\n    &#125;\n&#125;;\n\ninitDarkMode(new Date());\n\n深色模式下的页面滚动条[4]\n只需在页面的 &lt;head&gt; 中添加一个 &lt;meta name=&quot;color-scheme&quot;&gt; 的标签即可让页面滚动条的样式跟随深色模式变化。\n&lt;!--\n  The page supports both light and dark color schemes,\n  and the page author prefers light.\n--&gt;\n&lt;meta name=&quot;color-scheme&quot; content=&quot;light dark&quot;&gt;\n如果你使用类似上一节所示的切换按钮的话，别忘了添加下面的 CSS ：\n/*\n  The page supports both light and dark color schemes,\n  and the page author prefers light.\n*/\n:root &#123;\n    color-scheme: light;\n&#125;\n.dark &#123;\n    color-scheme: dark;\n&#125;\nDisqus 相关\n如果网页上有 Disqus 评论系统，请添加下方的 CSS 以避免 Disqus 的自动深色模式失效。\niframe &#123;\n    color-scheme: light;\n&#125;\n来源：Disqus iframe transparency won’t work on Chrome 87 - StackOverflow\n参考资料\n文章头图来自：https://material.io/design/color/dark-theme.html\n\n\n\nDark theme - Material Design ↩︎ ↩︎\n\nWhat’s New in iOS Design - WWDC 2019 ↩︎\n\n你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持 - Sukka’s Blog ↩︎\n\nImproved dark mode default styling with the color-scheme CSS property and the corresponding meta tag - web.dev ↩︎\n\n\n\n","categories":["技术"],"tags":["Web","前端"]},{"title":"关于","url":"//about/index.html","content":"关于博客\nEnglish version is on Medium: baoshuo.medium.com.\n图片\n图片使用 SM.MS 图床 存储，已开通 LifeTime Premium VIP。\n评论\n评论使用 DisqusJS ，中国大陆地区正常情况下由于网络原因仅能获取评论列表，若需要使用全部功能请自行查找解决方案。如果您使用代理连接互联网，请将 *.disqus.com disq.us *.disquscdn.com 加入代理列表。\n\n评论语法\nDisqus 评论支持使用部分 HTML 标签。\n注：下方的 &#123;&#123; text &#125;&#125; 表示显示文字，&#123;&#123; link &#125;&#125; 表示链接，&#123;&#123; code &#125;&#125; 表示代码，&#123;&#123; code_language &#125;&#125; 表示代码语言。\n下方列出了一些能使用的常用标签。为了方便查看，这些标签都是以单行形式呈现的。\n\n\n\n语法\n含义\n\n\n\n\n&lt;b&gt;&#123;&#123; text &#125;&#125;&lt;/b&gt;\n粗体文本\n\n\n&lt;blockquote&gt;&#123;&#123; text &#125;&#125;&lt;/blockquote&gt;\n引用文本\n\n\n&lt;i&gt;&#123;&#123; text &#125;&#125;&lt;/i&gt;\n斜体文本\n\n\n&lt;a href=&quot;&#123;&#123; link &#125;&#125;&quot;&gt;&#123;&#123; text &#125;&#125;&lt;/a&gt;\n超链接\n\n\n&lt;code&gt;&#123;&#123; code &#125;&#125;&lt;/code&gt;\n行内代码\n\n\n&lt;pre&gt;&lt;code class=&quot;&#123;&#123; code_language &#125;&#125;&quot;&gt;&#123;&#123; code &#125;&#125;&lt;/code&gt;&lt;/pre&gt;\n代码块\n\n\n\n详情请见：What HTML tags are allowed within comments? - Disqus Help\n\n\n评论设置\n强制使用 DisqusJS | 强制使用原版 Disqus\n\n\n评论检测\nDisqus: 尚未检测\nDisqus API (via api.baoshuo.ren): 尚未检测\nDisqus CDN: 尚未检测\n检测\n\nconst checkDisqus = () => {\n    // document.getElementById('checkComment').style.display = 'none';\n    // Disqus\n    const disqusFavicon = new Image;\n    const disqusTimeout = setTimeout(() => {\n        disqusFavicon.onerror = disqusFavicon.onload = null;\n        document.getElementById('check-disqus').innerHTML = `失败`;\n    }, 3000);\n    disqusFavicon.onerror = () => {\n        clearTimeout(disqusTimeout);\n        document.getElementById('check-disqus').innerHTML = `失败`;\n    };\n    disqusFavicon.onload = () => {\n        clearTimeout(disqusTimeout);\n        document.getElementById('check-disqus').innerHTML = `成功`;\n    };\n    disqusFavicon.src = `https://disqus.com/favicon.ico?${+(new Date)}=${+(new Date)}`;\n\n    // Disqus API\n    // https://api.baoshuo.ren/check\n    fetch(`https://api.baoshuo.ren/check?${+(new Date)}=${+new Date()}`)\n        .then(data => document.getElementById('check-disqus-api').innerHTML = `成功`)\n        .catch(error => document.getElementById('check-disqus-api').innerHTML = `失败`);\n\n    // Disqus CDN\n    // https://c.disquscdn.com/next/embed/assets/img/disqus-social-icon-dark.a621bea3e02c9fa04fd3965a3d6f424d.svg\n    const disqusCDNLogo = new Image;\n    const disqusCDNLogoTimeout = setTimeout(() => {\n        disqusCDNLogo.onerror = disqusCDNLogo.onload = null;\n        document.getElementById('check-disqus-cdn').innerHTML = `失败`;\n    }, 3000);\n    disqusCDNLogo.onerror = () => {\n        clearTimeout(disqusCDNLogoTimeout);\n        document.getElementById('check-disqus-cdn').innerHTML = `失败`;\n    };\n    disqusCDNLogo.onload = () => {\n        clearTimeout(disqusCDNLogoTimeout);\n        document.getElementById('check-disqus-cdn').innerHTML = `成功`;\n    };\n    disqusCDNLogo.src = `https://c.disquscdn.com/next/embed/assets/img/disqus-social-icon-dark.a621bea3e02c9fa04fd3965a3d6f424d.svg?${+(new Date)}=${+(new Date)}`;\n};\n\n\nCDN\n部分静态资源使用 jsDelivr CDN 提供加速服务。\n更新记录\n\n2020/06/23 切换到静态博客平台\n2020/07/22 更换到新域名 baoshuo.blog\n2020/11/25 将所有图片迁移到 SM.MS 图床上\n2020/12/06 换回旧域名 blog.baoshuo.ren ，迁回到国内服务器\n2021/02/01 迁移博客到 Hexo 平台\n2021/02/23 重构主题\n2021/04/18 上线文章目录功能\n\n关于我\n个人属性\n正经、穷、菜…\n在上学。\n\ndocument.getElementById('baoshuo-age').innerHTML = `现在 ${Math.floor((+new Date() - 1151942400000) / 31536000000)} 岁，`;\n\n在干什么事情\nOperating AS141776.\n说什么语言\n\n中文（zh-CN） ★★★★★ 母语\n英文（en-US） ★★★☆☆\n\n会什么东西\n\nC++ ★★★★☆\nHTML ★★★★☆ (HTML is a programming language!)\nC ★★★★☆\nJavaScript ★★★★☆\nCSS ★★★★☆\nPHP ★★★☆☆\nPython ★★★☆☆\nShell ★★☆☆☆\n\n关于竞赛\n\n竞赛不是火，却能点亮一生。\n—— 石家庄二中实验学校 · 信息技术中心\n\n联系我\n\n主页： baoshuo.ren\n邮箱： i@baoshuo.ren\nTelegram： @baoshuo\nTwitter：@renbaoshuo\n\n版权相关\n\n使用 Pure 主题\n使用 Hexo 构建博客\n本博客所有文章除特别声明外，均采用 CC BY-NC-SA 4.0 许可协议。转载请在文中明显位置注明出处\n\n"},{"title":"分类","url":"//categories/index.html","content":""},{"title":"搜索","url":"//search/index.html","content":""},{"title":"友情链接","url":"//friends/index.html","content":"请前往 renbaoshuo/Friends 申请友情链接。\n"},{"title":"标签","url":"//tags/index.html","content":""}]