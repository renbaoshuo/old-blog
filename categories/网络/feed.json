{
    "version": "https://jsonfeed.org/version/1",
    "title": "宝硕博客 • All posts by \"网络\" category",
    "description": "宝硕博客 —— Baoshuo (@renbaoshuo) 随便写东西的地方，以技术向博文为主，生活向博文为辅。",
    "home_page_url": "https://blog.baoshuo.ren",
    "items": [
        {
            "id": "https://blog.baoshuo.ren/post/bird-looking-glass/",
            "url": "https://blog.baoshuo.ren/post/bird-looking-glass/",
            "title": "搭建 BIRD Looking Glass 速成指北",
            "date_published": "2021-05-03T04:23:00.000Z",
            "content_html": "<p>BIRD 是 Linux 上常用的一款 BGP 路由软件。bird-lg-go 是 <a href=\"https://lantian.pub\">蓝天</a> 使用 Go 语言编写的 Looking Glass 程序，内存占用比原版 bird-lg 更低。它提供了一个网页面板，可以显示各个服务器上的 BIRD 路由软件的状态，以及查询到指定 IP 的路由。</p>\n<span id=\"more\"></span>\n<ul>\n<li>项目地址：<a href=\"https://github.com/xddxdd/bird-lg-go\">https://github.com/xddxdd/bird-lg-go</a></li>\n<li>成品： <a href=\"https://lg.dn42.as141776.net\">https://lg.dn42.as141776.net</a></li>\n</ul>\n<h2 id=\"安装-docker-和-docker-compose\"><a class=\"anchor\" href=\"#安装-docker-和-docker-compose\"></a>安装 Docker 和 Docker Compose</h2>\n<p>虽然这个程序可以直接运行，但我还是比较喜欢套个 Docker 防止污染环境。</p>\n<pre><code class=\"highlight bash\">curl -sSL https://get.docker.com | sh\npip install docker-compose</code></pre>\n<h2 id=\"编排-docker-compose-服务\"><a class=\"anchor\" href=\"#编排-docker-compose-服务\"></a>编排 Docker Compose 服务</h2>\n<p>在运行 web 的服务器上找个地方（如 <code>/var/bird-lg/</code>），将下面的内容修改后写入 <code>docker-compose.yml</code> 中：</p>\n<pre><code class=\"highlight yml\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span>\n\n<span class=\"attr\">services:</span>\n  <span class=\"attr\">bird-lg:</span>\n    <span class=\"attr\">image:</span> <span class=\"string\">xddxdd/bird-lg-go</span>\n    <span class=\"attr\">container_name:</span> <span class=\"string\">bird-lg</span>\n    <span class=\"attr\">restart:</span> <span class=\"string\">always</span>\n    <span class=\"attr\">environment:</span>\n      <span class=\"bullet\">-</span> <span class=\"string\">BIRDLG_SERVERS=cn1,eu1</span>              <span class=\"comment\"># 节点列表，以逗号分隔</span>\n      <span class=\"bullet\">-</span> <span class=\"string\">BIRDLG_DOMAIN=dn42.as141776.net</span>     <span class=\"comment\"># 节点 endpiont 后缀</span>\n      <span class=\"bullet\">-</span> <span class=\"string\">BIRDLG_TITLE_BRAND=Looking</span> <span class=\"string\">Glass</span>    <span class=\"comment\"># 标签栏上显示的名称</span>\n      <span class=\"bullet\">-</span> <span class=\"string\">BIRDLG_NAVBAR_BRAND=Looking</span> <span class=\"string\">Glass</span>   <span class=\"comment\"># 页面上显示的名称</span>\n      <span class=\"bullet\">-</span> <span class=\"string\">BIRDLG_WHOIS=whois.lantian.dn42</span>     <span class=\"comment\"># Whois 服务器地址</span>\n      <span class=\"bullet\">-</span> <span class=\"string\">BIRDLG_DNS_INTERFACE=asn.dn42</span>\n    <span class=\"attr\">ports:</span>\n      <span class=\"bullet\">-</span> <span class=\"string\">&quot;5000:5000&quot;</span>\n  <span class=\"attr\">bird-lgproxy:</span>\n    <span class=\"attr\">image:</span> <span class=\"string\">xddxdd/bird-lgproxy-go</span>\n    <span class=\"attr\">container_name:</span> <span class=\"string\">bird-lgproxy</span>\n    <span class=\"attr\">restart:</span> <span class=\"string\">always</span>\n    <span class=\"attr\">volumes:</span>\n      <span class=\"bullet\">-</span> <span class=\"string\">&quot;/var/run/bird/bird.ctl:/var/run/bird/bird.ctl&quot;</span>\n    <span class=\"attr\">ports:</span>\n      <span class=\"bullet\">-</span> <span class=\"string\">&quot;8000:8000&quot;</span></code></pre>\n<p>在各个节点上只需要写入下面内容即可：</p>\n<pre><code class=\"highlight yml\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span>\n\n<span class=\"attr\">services:</span>\n  <span class=\"attr\">bird-lgproxy:</span>\n    <span class=\"attr\">image:</span> <span class=\"string\">xddxdd/bird-lgproxy-go</span>\n    <span class=\"attr\">container_name:</span> <span class=\"string\">bird-lgproxy</span>\n    <span class=\"attr\">restart:</span> <span class=\"string\">always</span>\n    <span class=\"attr\">volumes:</span>\n      <span class=\"bullet\">-</span> <span class=\"string\">&quot;/var/run/bird/bird.ctl:/var/run/bird/bird.ctl&quot;</span>\n    <span class=\"attr\">ports:</span>\n      <span class=\"bullet\">-</span> <span class=\"string\">&quot;8000:8000&quot;</span></code></pre>\n<p>之后启动 Docker 容器：</p>\n<pre><code class=\"highlight bash\">docker-compose up -d</code></pre>\n<h2 id=\"使用-nginx-反代页面\"><a class=\"anchor\" href=\"#使用-nginx-反代页面\"></a>使用 nginx 反代页面</h2>\n<p>使用下方的配置启动反向代理即可。</p>\n<pre><code class=\"highlight nginx\"><span class=\"section\">server</span> &#123;\n    <span class=\"attribute\">listen</span>      *:<span class=\"number\">80</span>;\n    <span class=\"attribute\">listen</span>      [::]:<span class=\"number\">80</span>;\n    <span class=\"attribute\">server_name</span> lg.dn42.as141776.net;\n\n    <span class=\"comment\"># reverse proxy</span>\n    <span class=\"attribute\">location</span> / &#123;\n        <span class=\"attribute\">proxy_pass</span>                         http://127.0.0.1:5000;\n        <span class=\"attribute\">proxy_http_version</span>                 <span class=\"number\">1</span>.<span class=\"number\">1</span>;\n        <span class=\"attribute\">proxy_cache_bypass</span>                 $http_upgrade;\n\n        <span class=\"comment\"># Proxy headers</span>\n        <span class=\"attribute\">proxy_set_header</span> Upgrade           $http_upgrade;\n        <span class=\"attribute\">proxy_set_header</span> Host              $host;\n        <span class=\"attribute\">proxy_set_header</span> X-Real-IP         $remote_addr;\n        <span class=\"attribute\">proxy_set_header</span> X-Forwarded-For   $proxy_add_x_forwarded_for;\n        <span class=\"attribute\">proxy_set_header</span> X-Forwarded-Proto $scheme;\n        <span class=\"attribute\">proxy_set_header</span> X-Forwarded-Host  $host;\n        <span class=\"attribute\">proxy_set_header</span> X-Forwarded-Port  $server_port;\n\n        <span class=\"comment\"># Proxy timeouts</span>\n        <span class=\"attribute\">proxy_connect_timeout</span>              <span class=\"number\">60s</span>;\n        <span class=\"attribute\">proxy_send_timeout</span>                 <span class=\"number\">60s</span>;\n        <span class=\"attribute\">proxy_read_timeout</span>                 <span class=\"number\">60s</span>;\n    &#125;\n&#125;</code></pre>\n<h2 id=\"配置-dns-解析\"><a class=\"anchor\" href=\"#配置-dns-解析\"></a>配置 DNS 解析</h2>\n<p>bird-lg-go 的节点 endpiont 生成逻辑是 <code>http://[节点].[endpoint后缀]:8000</code> ，如 <code>http://eu1.dn42.as141776.net:8000</code> ，所以只需要去配置对应的解析。</p>\n<blockquote>\n<p><strong>警告</strong></p>\n<p>建议解析到节点的公网 IP 上，以免 DN42 炸掉时 Looking Glass 也一并炸掉。</p>\n</blockquote>\n<p>配置示例：</p>\n<pre><code class=\"highlight stylus\">eu1<span class=\"selector-class\">.dn42</span><span class=\"selector-class\">.as141776</span><span class=\"selector-class\">.net</span>.  <span class=\"number\">3600</span>    IN      A       <span class=\"number\">136.243</span>.<span class=\"number\">221.96</span>\ncn1<span class=\"selector-class\">.dn42</span><span class=\"selector-class\">.as141776</span><span class=\"selector-class\">.net</span>.  <span class=\"number\">3600</span>    IN      CNAME   home<span class=\"selector-class\">.baoshuo</span><span class=\"selector-class\">.ren</span>.</code></pre>\n<h2 id=\"成果\"><a class=\"anchor\" href=\"#成果\"></a>成果</h2>\n<p><img src=\"https://vip2.loli.io/2021/05/03/iaFfTWAhpdZGJ9t.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n",
            "tags": [
                "BIRD",
                "BGP",
                "DN42"
            ]
        },
        {
            "id": "https://blog.baoshuo.ren/post/dn42-network/",
            "url": "https://blog.baoshuo.ren/post/dn42-network/",
            "title": "初探 DN42 网络",
            "date_published": "2021-04-04T03:29:32.000Z",
            "content_html": "<p>DN42 全称 Decentralized Network 42（42 号去中心网络），是一个大型、去中心化的 BGP 网络。DN42 的目的是模拟一个互联网。它使用了大量在目前互联网骨干上应用的技术（例如 BGP 和递归 DNS），可以很好地模拟一个真实的网络环境。</p>\n<span id=\"more\"></span>\n<p>DN42 适合以下类别的用户：</p>\n<ul>\n<li>想要研究网络技术，练习服务器、路由器等网络设备配置，甚至后续在真实互联网建立 AS 的用户。</li>\n<li>已经拥有真实 AS ，但担心自己<a href=\"https://blog.cloudflare.com/how-verizon-and-a-bgp-optimizer-knocked-large-parts-of-the-internet-offline-today/\">配置错误广播出错误路由、干掉半个互联网</a>，希望有个地方测试的用户。</li>\n</ul>\n<p>DN42 不适合以下类别的用户：</p>\n<ul>\n<li>单纯想要保护隐私、规避网络审查的用户</li>\n<li>在网内消耗大量流量，例如用于解锁流媒体服务的用户</li>\n</ul>\n<p>所以，DN42 的使用门槛还是比较高的。这与在真实互联网中一样，你要扮演一个 ISP （互联网服务提供商），注册自己的个人信息， ASN 号码，IPv4 和 IPv6 的地址池，并且使用 BGP 在自己的服务器上广播它们。你还要和其它的用户联系，和他们进行 Peering（对等互联），一步步进入完整的 DN42 网络。</p>\n<hr>\n<p>DN42 在 <code>172.20.0.0/14</code> 和 <code>fd00::/8</code> 上运行，而这两个 IP 段都是分配给内网使用的。换句话说，你在 DN42 上怎么折腾，都不会影响到服务器其它的互联网连接。</p>\n<p>你可以通过加入 <a href=\"https://t.me/Dn42Chat\">Telegram 群组</a> 或者 <a href=\"irc://irc.hackint.org/#dn42\">IRC 频道</a> 来寻求帮助。</p>\n<p>请注意，DN42 是一个测试网络，所有人都在帮助所有人。即使你不小心搞砸了，也没有人会指责你。</p>\n<p>欢迎在搭建完成自己的内网以后与我进行对等互联，可以访问 <a href=\"https://dn42.baoshuo.ren\">dn42.baoshuo.ren</a> 获取更多信息。</p>\n<p>若无特别说明，本文中所使用的系统环境均为 <code>Ubuntu 20.04.2 LTS</code> ，本文中所有使用 <code>&lt;&gt;</code> 包裹的内容均需要自行替换。</p>\n<h2 id=\"注册-dn42\"><a class=\"anchor\" href=\"#注册-dn42\"></a>注册 DN42</h2>\n<p>在注册过程中会大量使用到一些 UNIX 工具（如 Git 、 GPG 等），所以最好使用 Linux 或者 macOS 系统完成整个流程，如果你正在使用 Windows 系统，那么可以使用 <a href=\"http://aka.ms/wsl\">WSL</a> 。</p>\n<h3 id=\"注册前的准备\"><a class=\"anchor\" href=\"#注册前的准备\"></a>注册前的准备</h3>\n<ul>\n<li>了解如何编写 RPSL （<a href=\"https://tools.ietf.org/html/rfc2622/\">RFC2622</a>） 格式的配置文件。</li>\n<li>了解如何使用 <a href=\"https://zh.wikipedia.org/wiki/%E6%97%A0%E7%B1%BB%E5%88%AB%E5%9F%9F%E9%97%B4%E8%B7%AF%E7%94%B1\">CIDR</a> （<a href=\"https://tools.ietf.org/html/rfc1518\">RFC1518</a>，<a href=\"https://tools.ietf.org/html/rfc1519\">RFC1519</a>） 格式表示 IP 地址块。</li>\n<li>熟悉 <a href=\"https://dn42.dev\">DN42 Wiki</a> 中的 <a href=\"https://dn42.dev/howto/Getting-Started\">Getting-Started</a> 、 <a href=\"https://dn42.dev/howto/Address-Space\">Address Space</a> 页面中的内容。</li>\n<li>在 <a href=\"https://git.dn42.dev\">DN42 Git</a> 中有一个注册好的账户。</li>\n<li>会使用英文与他人交流。</li>\n</ul>\n<h3 id=\"克隆-dn42-注册表-git-仓库\"><a class=\"anchor\" href=\"#克隆-dn42-注册表-git-仓库\"></a>克隆 DN42 注册表 Git 仓库</h3>\n<p>将 <a href=\"https://git.dn42.dev/dn42/registry\">dn42/registry</a> 这个仓库 clone 到本地。</p>\n<p>新建一个名为 <code>&lt;用户名&gt;-&lt;日期, YYYYMMDD&gt;/&lt;自定义名称&gt;</code> 的分支。</p>\n<pre><code class=\"highlight bash\">git checkout -b &lt;用户名&gt;-&lt;日期, YYYYMMDD&gt;/register</code></pre>\n<h3 id=\"注册维护者\"><a class=\"anchor\" href=\"#注册维护者\"></a>注册维护者</h3>\n<p>在仓库的 <code>data/mntner</code> 目录下新建一个文件，命名为 <code>&lt;昵称&gt;-MNT</code> 。</p>\n<p>文件内填入以下内容：</p>\n<pre><code class=\"highlight rpsl\">mntner:             &lt;昵称&gt;-MNT\nadmin-c:            &lt;昵称&gt;-DN42\ntech-c:             &lt;昵称&gt;-DN42\nauth:               &lt;身份验证信息&gt;\nmnt-by:             &lt;维护者&gt;\nsource:             DN42</code></pre>\n<p>示例：<a href=\"https://git.dn42.dev/dn42/registry/src/branch/master/data/mntner/BAOSHUO-MNT\"><code>data/mntner/BAOSHUO-MNT</code> at dn42/registry@master</a></p>\n<ul>\n<li><code>mntner</code> ：维护者（全称为 Maintainer），这个维护者的名称，与文件名相同。</li>\n<li><code>admin-c</code> ：管理员联系信息（Admin Contact），需要指向 <a href=\"#%E6%B3%A8%E5%86%8C%E8%81%94%E7%B3%BB%E4%BA%BA\">注册联系人</a> 一节中的 <code>person</code> 文件，一般为 <code>&lt;昵称&gt;-DN42</code> 。</li>\n<li><code>tech-c</code> ：技术人员联系信息（Tech Contact），需要指向 <a href=\"#%E6%B3%A8%E5%86%8C%E8%81%94%E7%B3%BB%E4%BA%BA\">注册联系人</a> 一节中的 <code>person</code> 文件，一般为 <code>&lt;昵称&gt;-DN42</code> 。</li>\n<li><code>auth</code> ：身份验证信息，接受 <strong>GPG 公钥</strong> 和 <strong>SSH 公钥</strong> ，可以查看 <a href=\"https://dn42.dev/howto/Registry-Authentication\">Registry Authentication</a> 页面获取详细信息。</li>\n<li><code>mnt-by</code> ：由谁维护（全称为 Maintain by），此处需要指向这个维护者本身，即 <code>&lt;昵称&gt;-MNT</code> 。</li>\n<li><code>source</code> ：信息来源，默认为 <code>DN42</code> 。</li>\n</ul>\n<h3 id=\"注册联系人\"><a class=\"anchor\" href=\"#注册联系人\"></a>注册联系人</h3>\n<p>在仓库的 <code>data/person</code> 目录下新建一个文件，命名为 <code>&lt;昵称&gt;-DN42</code> 。</p>\n<pre><code class=\"highlight rpsl\">person:             &lt;姓名&gt;\ncontact:            &lt;邮箱&gt;\nnic-hdl:            &lt;NIC 句柄&gt;\nmnt-by:             &lt;维护者&gt;\nsource:             DN42</code></pre>\n<p>示例：<a href=\"https://git.dn42.dev/dn42/registry/src/branch/master/data/person/BAOSHUO-DN42\"><code>data/person/BAOSHUO-DN42</code> at dn42/registry@master</a></p>\n<ul>\n<li><code>person</code> ：姓名。</li>\n<li><code>contact</code> ：联系方式，一般为邮箱。</li>\n<li><code>nic-hdl</code> ：NIC 句柄（即 <a href=\"https://en.wikipedia.org/wiki/NIC_handle\">NIC handle</a>），指向文件本身，与文件名相同。</li>\n<li><code>mnt-by</code> ：由谁维护（全称为 Maintain by），指向你在 <a href=\"#%E6%B3%A8%E5%86%8C%E7%BB%B4%E6%8A%A4%E8%80%85\">注册维护者</a> 一节中注册的的维护者信息。</li>\n<li><code>source</code> ：固定为 <code>DN42</code>。</li>\n</ul>\n<h3 id=\"注册-asn\"><a class=\"anchor\" href=\"#注册-asn\"></a>注册 ASN</h3>\n<p>在国际互联网上，ASN 范围 <code>4200000000 - 4294967294</code> 是被保留以供私人使用的，而 DN42 占用的就是其中的一块： <code>4242420000 - 4242429999</code> 。目前 DN42 开放注册的 ASN 范围是 <code>4242420000 - 4242423999</code> ，只需要在这个区间里面挑一个没有被他人占用的号码即可。</p>\n<p>DN42 Registry 的管理员 burble 提供了一个在线查看可用 ASN 的工具: <a href=\"https://explorer.burble.com/free#/asn\">DN42 Free ASN Explorer</a> 。访问该页面就会随机生成 10 个当前还未注册的 ASN 以便使用。</p>\n<p>在仓库的 <code>data/aut-num</code> 目录下新建一个文件，命名为刚才选中的 AS 号码。</p>\n<pre><code class=\"highlight rpsl\">aut-num:            &lt;AS 号码, 带 AS 前缀&gt;\nas-name:            &lt;AS 名称&gt;\ndescr:              &lt;AS 简介&gt;\nadmin-c:            &lt;NIC 句柄&gt;\ntech-c:             &lt;NIC 句柄&gt;\nmnt-by:             &lt;维护者&gt;\nsource:             DN42</code></pre>\n<p>示例：<a href=\"https://git.dn42.dev/dn42/registry/src/branch/master/data/aut-num/AS4242420247\"><code>data/aut-num/AS4242420247</code> at dn42/registry@master</a></p>\n<ul>\n<li><code>aut-num</code> ：AS 号，此处可以使用私有 AS 号码，也可以使用公网 AS 号码（不推荐）。</li>\n<li><code>as-name</code> ：AS 的名称，可以设置为 <code>&lt;昵称&gt;-AS</code> 。</li>\n<li><code>descr</code> ：（选填）AS 简介，随意填写。</li>\n<li><code>admin-c</code> ：管理员联系信息（Admin Contact），指向你在 <a href=\"#%E6%B3%A8%E5%86%8C%E8%81%94%E7%B3%BB%E4%BA%BA\">注册联系人</a> 一节中注册的 NIC 句柄。</li>\n<li><code>tech-c</code> ：技术员联系信息（Tech Contact），指向你在 <a href=\"#%E6%B3%A8%E5%86%8C%E8%81%94%E7%B3%BB%E4%BA%BA\">注册联系人</a> 一节中注册的 NIC 句柄。</li>\n<li><code>mnt-by</code> ：由谁维护（Maintain by），指向你在 <a href=\"#%E6%B3%A8%E5%86%8C%E7%BB%B4%E6%8A%A4%E8%80%85\">注册维护者</a> 一节中注册的的维护者信息。</li>\n<li><code>source</code> ：如果使用私有 AS 号码则此处填写 <code>DN42</code> ，否则填写 ASN 所对应的 RIR 名称。</li>\n</ul>\n<h3 id=\"注册-ipv4-地址块\"><a class=\"anchor\" href=\"#注册-ipv4-地址块\"></a>注册 IPv4 地址块</h3>\n<p><em>如果您想在 DN42 上创建一个 IPv6 Only 网络，请不要注册 IPv4 地址块，并忽略 <a href=\"#%E6%B7%BB%E5%8A%A0%E8%B7%AF%E7%94%B1%E8%AE%B0%E5%BD%95\">添加路由记录</a> 一节中的 IPv4 部分。</em></p>\n<p>在国际互联网上， <code>172.16.0.0/12</code> 是由 <a href=\"https://tools.ietf.org/html/rfc1918\">RFC1918</a> 规定的由专用网络使用的 IP 地址块，而 DN42 占用的就是其中的一块： <code>172.20.0.0/14</code> 。目前 DN42 开放注册的地址块范围可以在 <a href=\"https://dn42.dev/howto/Address-Space#ipv4-address-space\">Address Space</a> 页面上查看。</p>\n<p>DN42 Registry 的管理员 burble 提供了一个在线查看可用 IPv4 地址块的网站，点击 <a href=\"https://explorer.burble.com/free#/4\">DN42 Free IPv4 Explorer</a> 即可随机生成 10 个当前还未注册的 IPv4 地址块。</p>\n<p>和在真实互联网上一样，DN42 的 IPv4 地址资源也是十分紧缺的，因此 IPv4 的申请原则是「够用就好」。如果节点数量足够少，只申请 <code>/28</code> 或 <code>/29</code> 大小的地址块就够用了。</p>\n<p>在仓库的 <code>data/inetnum</code> 目录下新建一个文件，命名为 IP 地址块的 CIDR 格式，并使用 <code>_</code> 代替 <code>/</code>。</p>\n<pre><code class=\"highlight rpsl\">inetnum:            &lt;起始 IP 地址&gt; - &lt;结束 IP 地址&gt;\ncidr:               &lt;IP 地址块的 CIDR 格式&gt;\nnetname:            &lt;IP 地址块名称&gt;\ndescr:              &lt;IP 地址块简介&gt;\ncountry:            &lt;IP 地址块所属国家&gt;\nadmin-c:            &lt;NIC 句柄&gt;\ntech-c:             &lt;NIC 句柄&gt;\nmnt-by:             &lt;维护者&gt;\nstatus:             ASSIGNED\nsource:             DN42</code></pre>\n<p>示例：<a href=\"https://git.dn42.dev/dn42/registry/src/branch/master/data/inetnum/172.23.250.64_26\"><code>data/inetnum/172.23.250.64_26</code> at dn42/registry@master</a></p>\n<ul>\n<li><code>inetnum</code> ：这个地址块的范围。</li>\n<li><code>cidr</code> ：以 CIDR 格式表示的这个地址块的范围，含义与 <code>inetnum</code> 相同。</li>\n<li><code>netname</code> ：这个地址块的名称。可以设置为 <code>&lt;昵称&gt;-IPV4</code> 。</li>\n<li><code>descr</code> ：（选填）这个地址块的简介。</li>\n<li><code>nserver</code> ：（选填）IP 地址反向解析的 DNS 服务器。</li>\n<li><code>country</code> ：你的 <a href=\"https://zh.wikipedia.org/wiki/ISO_3166\">ISO 3166</a> 国家代码，填 <code>CN</code> 代表中国大陆地区。</li>\n<li><code>admin-c</code> ：管理员联系信息（Admin Contact），指向你在 <a href=\"#%E6%B3%A8%E5%86%8C%E8%81%94%E7%B3%BB%E4%BA%BA\">注册联系人</a> 一节中注册的 NIC 句柄。</li>\n<li><code>tech-c</code> ：技术员联系信息（Tech Contact），指向你在 <a href=\"#%E6%B3%A8%E5%86%8C%E8%81%94%E7%B3%BB%E4%BA%BA\">注册联系人</a> 一节中注册的 NIC 句柄。</li>\n<li><code>mnt-by</code> ：由谁维护（Maintain by），指向你在 <a href=\"#%E6%B3%A8%E5%86%8C%E7%BB%B4%E6%8A%A4%E8%80%85\">注册维护者</a> 一节中注册的的维护者信息。</li>\n<li><code>status</code> ：固定为 <code>ASSIGNED</code>。</li>\n<li><code>source</code> ：固定为 <code>DN42</code>。</li>\n</ul>\n<h3 id=\"注册-ipv6-地址块\"><a class=\"anchor\" href=\"#注册-ipv6-地址块\"></a>注册 IPv6 地址块</h3>\n<p>在国际互联网上， <code>fc00::/7</code> 是由 <a href=\"https://tools.ietf.org/html/rfc4193\">RFC4193</a> 定义的 <a href=\"https://en.wikipedia.org/wiki/Unique_local_address\">唯一本地地址</a>，而 DN42 占用的就是其中的一块： <code>fd00::/8</code> 。目前 DN42 开放注册的地址块范围可以在 <a href=\"https://dn42.dev/howto/Address-Space#ipv6-address-space\">Address Space</a> 页面上查看。</p>\n<p>DN42 Registry 的管理员 burble 提供了一个在线查看可用 IPv6 地址块的网站，点击 <a href=\"https://explorer.burble.com/free#/6\">DN42 Free IPv6 Explorer</a> 即可随机生成 10 个当前还未注册的 IPv6 地址块。</p>\n<p>在仓库的 <code>data/inet6num</code> 目录下新建一个文件，命名为 IPv6 地址块的 CIDR 格式，并使用 <code>_</code> 代替 <code>/</code>。</p>\n<pre><code class=\"highlight rpsl\">inet6num:           &lt;起始 IPv6 地址&gt; - &lt;结束 IPv6 地址&gt;\ncidr:               &lt;IPv6 地址块的 CIDR 格式&gt;\nnetname:            &lt;IPv6 地址块名称&gt;\ndescr:              &lt;IPv6 地址块简介&gt;\ncountry:            &lt;IPv6 地址块所属国家&gt;\nadmin-c:            &lt;NIC 句柄&gt;\ntech-c:             &lt;NIC 句柄&gt;\nmnt-by:             &lt;维护者&gt;\nstatus:             ASSIGNED\nsource:             DN42</code></pre>\n<p>示例：<a href=\"https://git.dn42.dev/dn42/registry/src/branch/master/data/inet6num/fd42:4242:247::_48\"><code>data/inet6num/fd42:4242:247::_48</code> at dn42/registry@master</a></p>\n<ul>\n<li><code>inet6num</code> ：这个地址块的范围。</li>\n<li><code>cidr</code> ：使用 CIDR 格式表示的这个地址块的范围，含义与 <code>inet6num</code> 相同。</li>\n<li><code>netname</code> ：这个地址块的名称。可以设置为 <code>&lt;昵称&gt;-IPV6</code> 。</li>\n<li><code>descr</code> ：（选填）这个地址块的简介。</li>\n<li><code>nserver</code> ：（选填）IP 地址反向解析的 DNS 服务器。</li>\n<li><code>country</code> ：你的 <a href=\"https://zh.wikipedia.org/wiki/ISO_3166\">ISO 3166</a> 国家代码，填 <code>CN</code> 代表中国大陆地区。</li>\n<li><code>admin-c</code> ：管理员联系信息（Admin Contact），指向你在 <a href=\"#%E6%B3%A8%E5%86%8C%E8%81%94%E7%B3%BB%E4%BA%BA\">注册联系人</a> 一节中注册的 NIC 句柄。</li>\n<li><code>tech-c</code> ：技术员联系信息（Tech Contact），指向你在 <a href=\"#%E6%B3%A8%E5%86%8C%E8%81%94%E7%B3%BB%E4%BA%BA\">注册联系人</a> 一节中注册的 NIC 句柄。</li>\n<li><code>mnt-by</code> ：由谁维护（Maintain by），指向你在 <a href=\"#%E6%B3%A8%E5%86%8C%E7%BB%B4%E6%8A%A4%E8%80%85\">注册维护者</a> 一节中注册的的维护者信息。</li>\n<li><code>status</code> ：固定为 <code>ASSIGNED</code>。</li>\n<li><code>source</code> ：固定为 <code>DN42</code>。</li>\n</ul>\n<h3 id=\"添加路由记录\"><a class=\"anchor\" href=\"#添加路由记录\"></a>添加路由记录</h3>\n<p>在仓库的 <code>data/route</code> 目录下新建一个文件，命名为 IP 地址块的 CIDR 格式，并使用 <code>_</code> 代替 <code>/</code>。</p>\n<pre><code class=\"highlight rpsl\">route:              &lt;IP 地址块的 CIDR 格式&gt;\ndescr:              &lt;简介&gt;\norigin:             &lt;AS 号码, 带 AS 前缀&gt;\nmnt-by:             &lt;维护者&gt;\nsource:             DN42</code></pre>\n<ul>\n<li><code>route</code> ：这个 IPv4 地址块的范围，CIDR 格式。</li>\n<li><code>descr</code> ：（选填）路由简介。</li>\n<li><code>origin</code> ：填写你的 AS 号码。</li>\n<li><code>mnt-by</code> ：由谁维护（Maintain by），指向你在 <a href=\"#%E6%B3%A8%E5%86%8C%E7%BB%B4%E6%8A%A4%E8%80%85\">注册维护者</a> 一节中注册的的维护者信息。</li>\n<li><code>source</code> ：固定为 <code>DN42</code>。</li>\n</ul>\n<p>如需添加 IPv6 路由，将本节所述的 <code>route</code> 改为 <code>route6</code> 即可，此处不再赘述。</p>\n<h3 id=\"上传更改到-dn42-注册表\"><a class=\"anchor\" href=\"#上传更改到-dn42-注册表\"></a>上传更改到 DN42 注册表</h3>\n<p>完成以上步骤之后，使用 <code>git diff</code> 查看文件变动，检查无误后，使用 <code>git add .</code> 暂存。</p>\n<p><img src=\"https://vip2.loli.io/2021/08/14/RhjwYHFGcaKUSye.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<p>运行仓库根目录下的 <code>./check-my-stuff &lt;维护者&gt;</code> 检查文件内容是否有误，确定无误后，提交。</p>\n<p>在提交时，如果需要使用 GPG 签名，需要在添加 <code>-S</code> 参数，如 <code>git commit -S</code> ；如果使用 SSH 签名，请直接使用 <code>git commit</code> 进行提交，待提交后再进行签名工作。</p>\n<p>使用下面的命令进行签名：</p>\n<pre><code class=\"highlight bash\">./sign-my-commit --ssh --key &lt;SSH 私钥文件&gt; &lt;维护者&gt;</code></pre>\n<p>之后使用下面的命令上传即可：</p>\n<pre><code class=\"highlight bash\">git push --set-upstream origin &lt;用户名&gt;-&lt;日期, YYYYMMDD&gt;/register</code></pre>\n<p><img src=\"https://vip2.loli.io/2021/04/04/1YwNjs8uvOJMFoq.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<p>上传后在 DN42 Git 中切换到自己的分支，并创建一个合并请求，等待管理员审核。</p>\n<h3 id=\"注意事项\"><a class=\"anchor\" href=\"#注意事项\"></a>注意事项</h3>\n<ol>\n<li>各个项目的键和值之间有一长串空格，键、冒号与空格的总长度必须是 20 个字符，且不能随意修改。为了编辑时的方便，注册表中提供了一个脚本 <code>fmt-my-stuff</code> ，只需要使用 <code>./fmt-my-stuff &lt;维护者&gt;</code> 即可自动完成此步骤。</li>\n<li>DN42 Registry 的工作语言是英语。请使用英语完成全部流程，以免出现不必要的麻烦。</li>\n<li>请认真对待管理员提出的更改请求，按照要求完成全部修改后直接上传到原分支下即可，无需再新开合并请求。</li>\n<li>推荐使用随机的 IPv4 与 IPv6 地址块，避免与其他网络重复。请明白，DN42 并不是这些网络资源的权威注册机构。</li>\n</ol>\n<h2 id=\"dn42-bird2-使用入门\"><a class=\"anchor\" href=\"#dn42-bird2-使用入门\"></a>DN42 BIRD2 使用入门</h2>\n<p>如无特别说明，本部分中所使用的 BIRD 版本为 <code>2.0.7</code> 。</p>\n<h3 id=\"安装-bird2\"><a class=\"anchor\" href=\"#安装-bird2\"></a>安装 BIRD2</h3>\n<pre><code class=\"highlight bash\">apt update\napt install bird2 -y</code></pre>\n<p>一般情况下，执行此命令即可自动安装 BIRD2 并启动系统服务。</p>\n<h3 id=\"编写-bird-配置文件\"><a class=\"anchor\" href=\"#编写-bird-配置文件\"></a>编写 BIRD 配置文件</h3>\n<p>对于刚刚加入 DN42 网络的新人来说，推荐使用 <a href=\"https://dn42.dev/howto/Bird2#example-configuration\">howto/Bird2 - DN42 Wiki</a> 中的示例配置以节省配置时间。</p>\n<p>这套配置默认使用了 Multi Protocol BGP ，如果不想使用此功能请自行编写配置文件，如果没有 DN42 IPv4 地址需要去掉文件中的 IPv4 部分。</p>\n<p>将以下配置写入到 <code>/etc/bird/bird.conf</code> 中：</p>\n<pre><code class=\"highlight pgsql\">define OWNAS       = &lt;<span class=\"keyword\">AS</span> 号&gt;;\ndefine OWNIP       = &lt;DN42 IPv4 地址&gt;;\ndefine OWNIPv6     = &lt;DN42 IPv6 地址&gt;;\ndefine OWNNET      = &lt;DN42 IPv4 地址块, <span class=\"type\">CIDR</span> 格式&gt;;\ndefine OWNNETv6    = &lt;DN42 IPv6 地址块, <span class=\"type\">CIDR</span> 格式&gt;;\ndefine OWNNETSET   = [ &lt;DN42 IPv4 地址块, <span class=\"type\">CIDR</span> 格式&gt;+ ];\ndefine OWNNETSETv6 = [ &lt;DN42 IPv4 地址块, <span class=\"type\">CIDR</span> 格式&gt;+ ];\n\nrouter id OWNIP;\n\nprotocol device &#123;\n    scan <span class=\"type\">time</span> <span class=\"number\">10</span>;\n&#125;\n\n<span class=\"keyword\">function</span> is_self_net() &#123;\n    <span class=\"keyword\">return</span> net ~ OWNNETSET;\n&#125;\n\n<span class=\"keyword\">function</span> is_self_net_v6() &#123;\n    <span class=\"keyword\">return</span> net ~ OWNNETSETv6;\n&#125;\n\n<span class=\"keyword\">function</span> is_valid_network() &#123;\n    <span class=\"keyword\">return</span> net ~ [\n        <span class=\"number\">172.20</span><span class=\"number\">.0</span><span class=\"number\">.0</span>/<span class=\"number\">14</span>&#123;<span class=\"number\">21</span>,<span class=\"number\">29</span>&#125;, # dn42\n        <span class=\"number\">172.20</span><span class=\"number\">.0</span><span class=\"number\">.0</span>/<span class=\"number\">24</span>&#123;<span class=\"number\">28</span>,<span class=\"number\">32</span>&#125;, # dn42 Anycast\n        <span class=\"number\">172.21</span><span class=\"number\">.0</span><span class=\"number\">.0</span>/<span class=\"number\">24</span>&#123;<span class=\"number\">28</span>,<span class=\"number\">32</span>&#125;, # dn42 Anycast\n        <span class=\"number\">172.22</span><span class=\"number\">.0</span><span class=\"number\">.0</span>/<span class=\"number\">24</span>&#123;<span class=\"number\">28</span>,<span class=\"number\">32</span>&#125;, # dn42 Anycast\n        <span class=\"number\">172.23</span><span class=\"number\">.0</span><span class=\"number\">.0</span>/<span class=\"number\">24</span>&#123;<span class=\"number\">28</span>,<span class=\"number\">32</span>&#125;, # dn42 Anycast\n        <span class=\"number\">172.31</span><span class=\"number\">.0</span><span class=\"number\">.0</span>/<span class=\"number\">16</span>+,       # ChaosVPN\n        <span class=\"number\">10.100</span><span class=\"number\">.0</span><span class=\"number\">.0</span>/<span class=\"number\">14</span>+,       # ChaosVPN\n        <span class=\"number\">10.127</span><span class=\"number\">.0</span><span class=\"number\">.0</span>/<span class=\"number\">16</span>&#123;<span class=\"number\">16</span>,<span class=\"number\">32</span>&#125;, # neonetwork\n        <span class=\"number\">10.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span>/<span class=\"number\">8</span>&#123;<span class=\"number\">15</span>,<span class=\"number\">24</span>&#125;     # Freifunk.net\n    ];\n&#125;\n\nroa4 <span class=\"keyword\">table</span> dn42_roa;\nroa6 <span class=\"keyword\">table</span> dn42_roa_v6;\n\nprotocol static &#123;\n    roa4 &#123; <span class=\"keyword\">table</span> dn42_roa; &#125;;\n    <span class=\"keyword\">include</span> &quot;/etc/bird/roa_dn42.conf&quot;;\n&#125;;\n\nprotocol static &#123;\n    roa6 &#123; <span class=\"keyword\">table</span> dn42_roa_v6; &#125;;\n    <span class=\"keyword\">include</span> &quot;/etc/bird/roa_dn42_v6.conf&quot;;\n&#125;;\n\n<span class=\"keyword\">function</span> is_valid_network_v6() &#123;\n  <span class=\"keyword\">return</span> net ~ [\n    fd00::/<span class=\"number\">8</span>&#123;<span class=\"number\">44</span>,<span class=\"number\">64</span>&#125; # ULA address space <span class=\"keyword\">as</span> per RFC <span class=\"number\">4193</span>\n  ];\n&#125;\n\nprotocol kernel &#123;\n    scan <span class=\"type\">time</span> <span class=\"number\">20</span>;\n\n    ipv6 &#123;\n        <span class=\"keyword\">import</span> <span class=\"keyword\">none</span>;\n        export <span class=\"keyword\">filter</span> &#123;\n            <span class=\"keyword\">if</span> source = RTS_STATIC <span class=\"keyword\">then</span> reject;\n            krt_prefsrc = OWNIPv6;\n            accept;\n        &#125;;\n    &#125;;\n&#125;;\n\nprotocol kernel &#123;\n    scan <span class=\"type\">time</span> <span class=\"number\">20</span>;\n\n    ipv4 &#123;\n        <span class=\"keyword\">import</span> <span class=\"keyword\">none</span>;\n        export <span class=\"keyword\">filter</span> &#123;\n            <span class=\"keyword\">if</span> source = RTS_STATIC <span class=\"keyword\">then</span> reject;\n            krt_prefsrc = OWNIP;\n            accept;\n        &#125;;\n    &#125;;\n&#125;\n\nprotocol static &#123;\n    route OWNNET reject;\n\n    ipv4 &#123;\n        <span class=\"keyword\">import</span> <span class=\"keyword\">all</span>;\n        export <span class=\"keyword\">none</span>;\n    &#125;;\n&#125;\n\nprotocol static &#123;\n    route OWNNETv6 reject;\n\n    ipv6 &#123;\n        <span class=\"keyword\">import</span> <span class=\"keyword\">all</span>;\n        export <span class=\"keyword\">none</span>;\n    &#125;;\n&#125;\n\n<span class=\"keyword\">template</span> bgp dnpeers &#123;\n    <span class=\"keyword\">local</span> <span class=\"keyword\">as</span> OWNAS;\n    <span class=\"type\">path</span> metric <span class=\"number\">1</span>;\n\n    ipv4 &#123;\n        <span class=\"keyword\">import</span> <span class=\"keyword\">filter</span> &#123;\n            <span class=\"keyword\">if</span> is_valid_network() &amp;&amp; !is_self_net() <span class=\"keyword\">then</span> &#123;\n                <span class=\"keyword\">if</span> (roa_check(dn42_roa, net, bgp_path.last) != ROA_VALID) <span class=\"keyword\">then</span> &#123;\n                    print &quot;[dn42] ROA check failed for &quot;, net, &quot; ASN &quot;, bgp_path.last;\n                    reject;\n                &#125;\n                accept;\n            &#125;\n            reject;\n        &#125;;\n\n        export <span class=\"keyword\">filter</span> &#123;\n            <span class=\"keyword\">if</span> is_valid_network() &amp;&amp; source ~ [RTS_STATIC, RTS_BGP] <span class=\"keyword\">then</span> accept;\n            reject;\n        &#125;;\n        <span class=\"keyword\">import</span> <span class=\"keyword\">limit</span> <span class=\"number\">1000</span> action block;\n    &#125;;\n\n    ipv6 &#123;\n        <span class=\"keyword\">import</span> <span class=\"keyword\">filter</span> &#123;\n            <span class=\"keyword\">if</span> is_valid_network_v6() &amp;&amp; !is_self_net_v6() <span class=\"keyword\">then</span> &#123;\n                <span class=\"keyword\">if</span> (roa_check(dn42_roa_v6, net, bgp_path.last) != ROA_VALID) <span class=\"keyword\">then</span> &#123;\n                    print &quot;[dn42] ROA check failed for &quot;, net, &quot; ASN &quot;, bgp_path.last;\n                    reject;\n                &#125;\n                accept;\n            &#125;\n            reject;\n        &#125;;\n        export <span class=\"keyword\">filter</span> &#123;\n            <span class=\"keyword\">if</span> is_valid_network_v6() &amp;&amp; source ~ [RTS_STATIC, RTS_BGP] <span class=\"keyword\">then</span> accept;\n            reject;\n        &#125;;\n        <span class=\"keyword\">import</span> <span class=\"keyword\">limit</span> <span class=\"number\">1000</span> action block; \n    &#125;;\n&#125;\n\n\n<span class=\"keyword\">include</span> &quot;/etc/bird/peers/*&quot;;</code></pre>\n<p>然后在 <code>/etc/bird</code> 目录下创建一个文件夹，命名为 <code>peers</code> ，以便后续存储配置文件使用。</p>\n<p>如果想更深入的学习如何编写 BIRD 配置文件，推荐查看 <a href=\"https://github.com/moesoha/bird-bgp-kickstart\">BIRD 与 BGP 的新手开场</a> 和 <a href=\"https://bird.network.cz/?get_doc&amp;f=bird.html&amp;v=20\">BIRD 官方文档</a> 。</p>\n<h3 id=\"下载-roa-配置文件\"><a class=\"anchor\" href=\"#下载-roa-配置文件\"></a>下载 ROA 配置文件</h3>\n<pre><code class=\"highlight bash\">wget -4 -O /tmp/dn42_roa.conf https://dn42.burble.com/roa/dn42_roa_bird2_4.conf &amp;&amp; mv -f /tmp/dn42_roa.conf /etc/bird/dn42_roa.conf\nwget -4 -O /tmp/dn42_roa_v6.conf https://dn42.burble.com/roa/dn42_roa_bird2_6.conf &amp;&amp; mv -f /tmp/dn42_roa_v6.conf /etc/bird/dn42_roa_v6.conf</code></pre>\n<p>使用此命令即可将 ROA 文件下载到本机以供使用。</p>\n<p>还需要将此命令添加为定时任务，推荐设置为每小时运行一次，否则不会更新到最新的 ROA ，每次更新后都需要使用 <code>birdc configure</code> 命令重载 BIRD 配置。</p>\n<h3 id=\"重新加载-bird-配置\"><a class=\"anchor\" href=\"#重新加载-bird-配置\"></a>重新加载 BIRD 配置</h3>\n<pre><code class=\"highlight bash\">birdc configure</code></pre>\n<p>使用该命令重新加载 BIRD 配置，并使用 <code>birdc show protocol</code> 查看状态。</p>\n<p><img src=\"https://vip1.loli.io/2021/08/16/ZSPe6a3fpuDATG2.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<h2 id=\"dn42-wireguard-使用入门\"><a class=\"anchor\" href=\"#dn42-wireguard-使用入门\"></a>DN42 WireGuard 使用入门</h2>\n<p>WireGuard 是一种简单易用、速度快、现代化的 VPN ，它利用了最先进的加密技术，并使用 UDP 协议传输数据。WireGuard 设计为通用 VPN ，可在嵌入式设备和超级计算机上运行，​​适用于许多不同的环境。WireGuard 起初是专为 Linux 编写并发布的，后来被移植到各个平台上。在 <a href=\"http://WireGuard.com\">WireGuard.com</a> 上可以找到它的 <a href=\"https://www.wireguard.com/papers/wireguard.pdf\">技术白皮书</a> 。</p>\n<h3 id=\"安装-wireguard\"><a class=\"anchor\" href=\"#安装-wireguard\"></a>安装 WireGuard</h3>\n<pre><code class=\"highlight bash\">apt update\napt install wireguard -y</code></pre>\n<p>一般情况下，执行此命令即可直接安装 WireGuard 和 WireGuard Tools ，无需额外操作。</p>\n<h3 id=\"生成公钥与私钥\"><a class=\"anchor\" href=\"#生成公钥与私钥\"></a>生成公钥与私钥</h3>\n<pre><code class=\"highlight bash\">wg genkey | tee privatekey | wg pubkey &gt; publickey</code></pre>\n<p>使用此命令即可在当前目录下生成两个名叫 <code>privatekey</code> 和 <code>publickey</code> 的文件，分别代表私钥和公钥。</p>\n<h3 id=\"搭建-wireguard-隧道\"><a class=\"anchor\" href=\"#搭建-wireguard-隧道\"></a>搭建 WireGuard 隧道</h3>\n<p>搭建 WireGuard 隧道非常简便，只需要生成一对公钥与私钥并与对等端交换公钥即可。</p>\n<p>如果需要通过 WireGuard 隧道建立 BGP 会话，不能使用 WireGuard 内建的多 Peer 功能，必须为每个对等端创建一条隧道。</p>\n<p>在 <code>/etc/wireguard</code> 目录下新建一个名为 <code>&lt;隧道名&gt;.conf</code> 的文件：</p>\n<pre><code class=\"highlight ini\"><span class=\"section\">[Interface]</span>\n<span class=\"attr\">PrivateKey</span> = &lt;私钥&gt;\n<span class=\"attr\">ListenPort</span> = &lt;监听端口&gt;\n<span class=\"attr\">PostUp</span>     = ip address add &lt;链路本地地址&gt;/<span class=\"number\">64</span> dev %i\n<span class=\"attr\">PostUp</span>     = ip addr add &lt;本地 IPv6 地址&gt;/<span class=\"number\">128</span> peer &lt;对端 IPv6 地址&gt;/<span class=\"number\">128</span> dev %i\n<span class=\"attr\">PostUp</span>     = ip addr add &lt;本地 IPv4 地址&gt;/<span class=\"number\">32</span> peer &lt;对端 IPv4 地址&gt;/<span class=\"number\">32</span> dev %i\n<span class=\"attr\">Table</span>      = <span class=\"literal\">off</span></code></pre>\n<ul>\n<li><code>PrivateKey</code> ：私钥。</li>\n<li><code>ListenPort</code> ：监听端口。</li>\n<li>第一个 <code>PostUp</code> ：（可选，推荐）添加链路本地地址。</li>\n<li>第二个 <code>PostUp</code> ：（可选）添加本地和对等端的 DN42 IPv6 地址。</li>\n<li>第三个 <code>PostUp</code> ：（可选）添加本地和对等端的 DN42 IPv4 地址。</li>\n<li><code>Table</code> ：必须设定为 <code>off</code> （不导入系统路由表），否则会导致系统断网。</li>\n</ul>\n<p>当使用链路本地地址建立 BGP 会话时，可以不设置 DN42 IPv4 和 DN42 IPv6 地址，但是机器上必须有一张网卡上绑定了本机的 DN42 IPv4 和 DN42 IPv6 地址。同理，如果不使用链路本地地址建立 BGP 会话则无需添加链路本地地址。</p>\n<pre><code class=\"highlight ini\"><span class=\"section\">[Peer]</span>\n<span class=\"attr\">PublicKey</span>           = &lt;对端公钥&gt;\n<span class=\"attr\">PresharedKey</span>        = &lt;对端预共享密钥&gt;\n<span class=\"attr\">Endpoint</span>            = &lt;对端 IP/域名 和 端口号&gt;\n<span class=\"attr\">PersistentKeepalive</span> = <span class=\"number\">30</span>\n<span class=\"attr\">AllowedIPs</span>          = <span class=\"number\">10.0</span>.<span class=\"number\">0.0</span>/<span class=\"number\">8</span>, <span class=\"number\">172.20</span>.<span class=\"number\">0.0</span>/<span class=\"number\">14</span>, <span class=\"number\">172.31</span>.<span class=\"number\">0.0</span>/<span class=\"number\">16</span>, fd00::/<span class=\"number\">8</span>, fe80::/<span class=\"number\">64</span></code></pre>\n<ul>\n<li><code>PublicKey</code> ：对端公钥。</li>\n<li><code>PresharedKey</code> ：（可选）对端预共享密钥。</li>\n<li><code>Endpoint</code> ：（可选）对端的连接域名/IP及端口号。<br>\n如果对端没有公网 IP 地址，需要本地设置为被动模式则无需填写此项。</li>\n<li><code>PersistentKeepalive</code> ：（可选）每隔多少秒发送一次握手信息防止连接被中断并更新对端 IP 。<br>\n如果本地没有公网 IP 地址，必须配置此项。</li>\n<li><code>AllowedIPs</code> ：允许使用 WireGuard 转发流量的 IP 地址段。</li>\n</ul>\n<p>之后使用 <code>wg-quick up &lt;隧道名&gt;</code> 来启动隧道即可。</p>\n<p>如需开机自启，可以在测试无误后执行 <code>systemctl enable wg-quick@&lt;隧道名&gt;</code> 。</p>\n<h3 id=\"检测隧道状态\"><a class=\"anchor\" href=\"#检测隧道状态\"></a>检测隧道状态</h3>\n<pre><code class=\"highlight bash\">wg show &lt;隧道名&gt;</code></pre>\n<p>使用该命令即可查看隧道状态。</p>\n<p><img src=\"https://vip1.loli.io/2021/08/16/wxgUJNHnQAXFMdS.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<p>如上图所示，当 <code>latest handshake</code> 时间较近且 <code>transfer</code> 有收有发时可以认为隧道正常。</p>\n<p>如需查看所有隧道的状态，直接使用 <code>wg</code> 命令即可。</p>\n<h2 id=\"与其他网络进行对等互联\"><a class=\"anchor\" href=\"#与其他网络进行对等互联\"></a>与其他网络进行对等互联</h2>\n<h3 id=\"系统配置\"><a class=\"anchor\" href=\"#系统配置\"></a>系统配置</h3>\n<p>在 DN42 网络中，没有绝对意义上的客户端，每个人都可能是他人的路由器，经常会出现数据包的来源网卡与回复使用的网卡不一致的情况，因此需要打开 Linux 内核的数据包转发功能，具体操作如下：</p>\n<pre><code class=\"highlight bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;net.ipv4.ip_forward=1&quot;</span> &gt;&gt; /etc/sysctl.conf\n<span class=\"built_in\">echo</span> <span class=\"string\">&quot;net.ipv6.conf.default.forwarding=1&quot;</span> &gt;&gt; /etc/sysctl.conf\n<span class=\"built_in\">echo</span> <span class=\"string\">&quot;net.ipv6.conf.all.forwarding=1&quot;</span> &gt;&gt; /etc/sysctl.conf\nsysctl -p</code></pre>\n<p>同时，也需要关闭 Linux 内核的 <code>rp_filter</code> 的严格模式，具体操作如下：</p>\n<pre><code class=\"highlight bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;net.ipv4.conf.default.rp_filter=0&quot;</span> &gt;&gt; /etc/sysctl.conf\n<span class=\"built_in\">echo</span> <span class=\"string\">&quot;net.ipv4.conf.all.rp_filter=0&quot;</span> &gt;&gt; /etc/sysctl.conf\nsysctl -p</code></pre>\n<p>除此之外，还需要关闭一些自动化的配置 iptables 防火墙的工具，如 UFW 。</p>\n<h3 id=\"搭建-wireguard-隧道-t2\"><a class=\"anchor\" href=\"#搭建-wireguard-隧道-t2\"></a>搭建 WireGuard 隧道</h3>\n<p>请参考 <a href=\"#DN42-WireGuard-%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8\">DN42 WireGuard 使用入门</a> 一节。</p>\n<h3 id=\"配置-bgp-会话\"><a class=\"anchor\" href=\"#配置-bgp-会话\"></a>配置 BGP 会话</h3>\n<p>在 <code>/etc/bird/peers</code> 目录下新建一个文件，命名为 <code>&lt;名字&gt;.conf</code> 。</p>\n<p>如果使用链路本地地址进行 Peer 的话，需要按照下面的配置示例进行配置：</p>\n<pre><code class=\"highlight bird\">protocol bgp &lt;名字&gt; from dnpeers &#123;\n    neighbor &lt;对端链路本地地址&gt; % &#x27;&lt;对端 WireGuard 隧道名&gt;&#x27; as &lt;对端 ASN&gt;;\n    source address &lt;本地的链路本地地址&gt;;\n&#125;</code></pre>\n<p>否则按照下面的配置示例进行配置：</p>\n<pre><code class=\"highlight bird\">protocol bgp &lt;名字&gt; from dnpeers &#123;\n    neighbor &lt;对端 IPv6 地址&gt; as &lt;对端 ASN&gt;;\n&#125;</code></pre>\n<p>然后使用 <code>birdc configure</code> 重载配置即可。</p>\n<h2 id=\"更新日志\"><a class=\"anchor\" href=\"#更新日志\"></a>更新日志</h2>\n<ul>\n<li>2021-04-04 第一版 <sup>（2021 年 8 月 10 日存档于 <a href=\"https://web.archive.org/web/20210810062825/https://blog.baoshuo.ren/post/dn42-network/\">互联网档案馆</a>）</sup></li>\n<li>2021-08-14 第二版</li>\n</ul>\n<h2 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\"></a>参考资料</h2>\n<ol>\n<li><a href=\"https://dn42.dev/howto/Getting-Started\">Getting Started - DN42 Wiki</a></li>\n<li><a href=\"https://git.dn42.dev/dn42/registry/src/branch/master/README.md\">Guide for creating a Pull Request - dn42/registry - DN42 Git</a></li>\n<li><a href=\"https://lantian.pub/article/modify-website/dn42-experimental-network-2020.lantian/\">DN42 实验网络介绍及注册教程（2020-10-01 更新） - Lan Tian @ Blog</a></li>\n<li><a href=\"https://datatracker.ietf.org/\">IETF Datatracker</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Unique_local_address\">Unique local address - Wikipedia</a></li>\n<li><a href=\"https://github.com/moesoha/bird-bgp-kickstart\">BIRD 与 BGP 的新手开场 - Soha Jin - GitHub</a></li>\n</ol>\n",
            "tags": [
                "BGP",
                "DN42"
            ]
        },
        {
            "id": "https://blog.baoshuo.ren/post/my-own-asn/",
            "url": "https://blog.baoshuo.ren/post/my-own-asn/",
            "title": "年轻人的第一个 ASN",
            "date_published": "2021-03-20T17:06:09.000Z",
            "content_html": "<p>很久之前就有了这样的一个想法：拥有一个自己的 ASN 。2021 年的寒假末尾，我终于找到了一个肯给我这个未成年人申请 ASN 的 LIR 。<br>\n<s>于是这个世界上又多了一个祸害公网的人。</s></p>\n<span id=\"more\"></span>\n<h2 id=\"注册-asn\"><a class=\"anchor\" href=\"#注册-asn\"></a>注册 ASN</h2>\n<p>我找了某个 LIR 注册的 APNIC 的 ASN ，下号用时 3 个工作日。</p>\n<p>需要提供的信息有这些（带有 <code>[保密]</code> 标签的是非公开信息）：</p>\n<ol>\n<li>[保密] 身份证明材料</li>\n<li>主标识</li>\n<li>联系人邮箱</li>\n<li>noc 邮箱</li>\n<li>abuse 邮箱</li>\n<li>国家</li>\n<li>联系人地址</li>\n<li>联系人姓名</li>\n<li>联系人电话</li>\n<li>ASN 的标识</li>\n<li>ASN 的全名</li>\n<li>ASN 所属国家</li>\n<li>[保密] 两个上游 ASN</li>\n<li>[保密] ASN 将要部署在的物理位置</li>\n</ol>\n<p>然后等了 3 个工作日，我的 ASN 申请终于通过审核了（其实在这之前我已经去上学了）。</p>\n<p>需要注意的是 APNIC 每半年会向联系人邮箱发送一封验证邮件，所以邮箱需要保持畅通。</p>\n<h2 id=\"申请-vultr-bgp-广播功能\"><a class=\"anchor\" href=\"#申请-vultr-bgp-广播功能\"></a>申请 Vultr BGP 广播功能</h2>\n<p>我的 LIR 为我提供了一段 <code>/44</code> 的 IP （而不是 <code>/48</code>）：<code>2406:840:e080::/44</code> 。</p>\n<p>由于某些原因，我选择了使用 Vultr 来进行 IP 的广播，当然 HE 的 BGP 隧道也是可以的。</p>\n<p>点击 <a href=\"https://my.vultr.com/bgp/\">https://my.vultr.com/bgp/</a> 进入 Vultr BGP 广播功能的开通页面。</p>\n<p><img src=\"https://vip2.loli.io/2021/03/12/aYNdpciAb217wuP.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<p>点击页面中的 <strong>Get Started</strong> 进入 BGP 开通申请页面。</p>\n<p><img src=\"https://vip1.loli.io/2021/03/12/Sb6AoPXTuJ3YIKn.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<ol>\n<li>将 <strong>I have my own IP space</strong> 和 <strong>I have my own ASN</strong> 设置为 YES</li>\n<li>在 <strong>My ASN</strong> 处填写 ASN （不含 <code>AS</code> 前缀）</li>\n<li>在 <strong>BGP Password</strong> 处填写你想要的 BGP 密码</li>\n<li>在 <strong>IP Prefixes</strong> 处填写你的 IP 前缀（CIDR 格式）</li>\n<li><strong>Routes we shoule send you</strong> 选择 <strong>Full Table</strong></li>\n</ol>\n<p>然后点击 <strong>Setup</strong> 即可。</p>\n<blockquote>\n<p><strong>小插曲</strong></p>\n<p>由于我的 LIR 忘记了给我设置 RPKI 记录，导致出现了没有查询到 RPKI 记录的错误。</p>\n</blockquote>\n<hr>\n<p>这是一篇 LOA 模板<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>，照抄即可。</p>\n<pre><code class=\"highlight text\">AUTHORIZATION LETTER\n\n[日期, 如 Feb 27, 2021]\n\nTo whom it may concern,\n\nThis letter serves as authorization for [服务商公司名, 如 Vultr] with [ASN, 如 AS2333] to announce the following IP address blocks:\n\n[IP SPACE / ASN / SUBNET]\n[IP SPACE / ASN / SUBNET]\n[...]\n\nAs a representative of the company [公司名称] that is the owner of the subnet and/or ASN, I hereby declare that I&#x27;m authorized to represent and sign for this LOA.\n\nShould you have questions about this request, email me at [邮箱], or call: [电话号码]\n\nFrom,\n\n[姓名]\n[公司名称]\n[职位, 如 Network Administrator]\n[电话号码]</code></pre>\n<hr>\n<p><img src=\"https://vip2.loli.io/2021/03/13/nbQxcZLFNV6KBgP.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<p>提交完毕之后会出现如图所示的界面，点击 <strong>Start</strong> 即可开始验证进程。</p>\n<p><img src=\"https://vip1.loli.io/2021/03/13/6QKhFL4PGxoeEXn.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<p>以 asn 141776 的验证为例，选择好接收验证邮件的邮箱，然后点击 <strong>Send</strong> 即可。</p>\n<p><img src=\"https://vip2.loli.io/2021/03/13/rE4txqgBLeZK9Ou.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<p><img src=\"https://vip2.loli.io/2021/03/13/rAOSIP5oezGRqpc.png\" alt=\"\" loading=\"lazy\" data-action=\"zoom\"></p>\n<p>点击邮箱里的链接即可（第一个是允许，第二个是拒绝）</p>\n<p><img src=\"https://vip2.loli.io/2021/03/13/xBXiqmukOQbZT6r.png\" alt=\"验证成功后的提示\" loading=\"lazy\" data-action=\"zoom\"><span class=\"image-description\">验证成功后的提示</span></p>\n<p>之后等待客服开通即可。<br>\n由于我是在半夜申请的 Vultr BGP 服务，所以几分钟就开通好了。</p>\n<p><img src=\"https://vip2.loli.io/2021/03/13/2aLwgPWHzlxF9DY.png\" alt=\"完成后的界面\" loading=\"lazy\" data-action=\"zoom\"><span class=\"image-description\">完成后的界面</span></p>\n<p>之后不要忘记去控制台重启实例哦~</p>\n<h2 id=\"使用-bird-1-6-广播-ip\"><a class=\"anchor\" href=\"#使用-bird-1-6-广播-ip\"></a>使用 BIRD 1.6 广播 IP</h2>\n<p>目前 BIRD 1.x 和 2.x 同时在维护，二者的区别是 1.x 中 IPv4 和 IPv6 协议是分开的（bird 和 bird6），而 2.x 将两部分代码合并在了一起还引入了更多新功能。<br>\n1.x 和 2.x 两个版本的语法并无差别，只是 2.x 在涉及与路由表相关的操作的时候，需要指定特别的协议（<code>ipv4</code> 或 <code>ipv6</code>）。</p>\n<p><a href=\"https://bird.network.cz/?get_doc&amp;f=bird.html&amp;v=20\">BIRD 2.x 官方文档</a></p>\n<p>我选用的是 CentOS 7 系统 + BIRD 1.6.8 的组合。</p>\n<p>由于直接使用 yum 安装 bird6 会出现无法找到包的情况，我们需要先通过 yum 安装 epel。</p>\n<pre><code class=\"highlight bash\">yum install epel-release -y</code></pre>\n<h3 id=\"安装-bird\"><a class=\"anchor\" href=\"#安装-bird\"></a>安装 bird</h3>\n<p>安装 bird6 ：</p>\n<pre><code class=\"highlight bash\">yum install bird6 -y</code></pre>\n<h3 id=\"配置-bird\"><a class=\"anchor\" href=\"#配置-bird\"></a>配置 bird</h3>\n<p>安装完成后先停止 bird 服务：</p>\n<pre><code class=\"highlight bash\">systemctl stop bird6</code></pre>\n<p>由于默认的配置文件注释的内容过多，推荐先删除原有配置文件里面的全部内容。</p>\n<p>使用你喜欢的编辑器编辑 <code>/etc/bird6.conf</code> ，填入如下方所示的配置：</p>\n<pre><code class=\"highlight nginx\"><span class=\"attribute\">router</span> id [实例的 IPv4 地址];\n\n<span class=\"attribute\">define</span> OWNIP = [实例的 IPv6 地址];\n<span class=\"attribute\">define</span> OWNAS = [ASN, 不含 AS 前缀];\n\n<span class=\"attribute\">protocol</span> device &#123;\n    <span class=\"attribute\">scan</span> time <span class=\"number\">20</span>;\n&#125;\n\n<span class=\"attribute\">protocol</span> static &#123;\n    <span class=\"attribute\">route</span> [要广播的 IP 地址, CIDR 格式] via OWNIP;\n&#125;\n\n<span class=\"attribute\">protocol</span> bgp vultr &#123;\n    <span class=\"attribute\">local</span> as OWNAS;\n    <span class=\"attribute\">source</span> address OWNIP;\n    <span class=\"attribute\">import</span> <span class=\"literal\">none</span>;\n    <span class=\"attribute\">export</span> all;\n    <span class=\"attribute\">graceful</span> restart <span class=\"literal\">on</span>;\n    <span class=\"attribute\">multihop</span> <span class=\"number\">2</span>;\n    <span class=\"attribute\">neighbor</span> <span class=\"number\">2001</span>:19f0:ffff::<span class=\"number\">1</span> as <span class=\"number\">64515</span>;\n    <span class=\"attribute\">password</span> <span class=\"string\">&quot;[你设置的 BGP 密码]&quot;</span>;\n&#125;</code></pre>\n<p>之后保存配置文件，启动广播。</p>\n<pre><code class=\"highlight bash\">systemctl start bird6</code></pre>\n<p><img src=\"https://vip1.loli.io/2021/03/13/R3UZXdnOx7yTVhc.png\" alt=\"成果\" loading=\"lazy\" data-action=\"zoom\"><span class=\"image-description\">成果</span></p>\n<p>可以使用 <code>birdc6 show route</code> 和 <code>birdc6 show proto all</code> 命令查看状态。</p>\n<h3 id=\"添加虚拟网卡\"><a class=\"anchor\" href=\"#添加虚拟网卡\"></a>添加虚拟网卡</h3>\n<p>接下来需要创建一个虚拟网卡并设置一个 IP <sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup>：</p>\n<pre><code class=\"highlight bash\">ip link add dev baoshuo1 <span class=\"built_in\">type</span> dummy\nip link <span class=\"built_in\">set</span> baoshuo1 up\nip addr add dev baoshuo1 2406:840:e080::1/128</code></pre>\n<p>在 <code>/etc/bird6.conf</code> 的末尾添加以下内容：</p>\n<pre><code class=\"highlight fortran\">protocol <span class=\"keyword\">direct</span> &#123;\n    <span class=\"keyword\">interface</span> <span class=\"string\">&quot;baoshuo*&quot;</span>;\n    <span class=\"keyword\">import</span> <span class=\"built_in\">all</span>;\n&#125;</code></pre>\n<p>之后使用 <code>systemctl reload bird6</code> 命令重载 bird 即可。</p>\n<h2 id=\"使用-bird2-广播-ip\"><a class=\"anchor\" href=\"#使用-bird2-广播-ip\"></a>使用 BIRD2 广播 IP</h2>\n<h3 id=\"安装-bird2\"><a class=\"anchor\" href=\"#安装-bird2\"></a>安装 BIRD2</h3>\n<p>由于直接使用 yum 安装 bird6 会出现无法找到包的情况，我们需要先通过 yum 安装 epel。</p>\n<pre><code class=\"highlight bash\">yum install epel-release -y</code></pre>\n<p>安装 bird2 ：</p>\n<pre><code class=\"highlight bash\">yum install bird2 -y</code></pre>\n<h3 id=\"配置-bird2\"><a class=\"anchor\" href=\"#配置-bird2\"></a>配置 BIRD2</h3>\n<p>BIRD2 的配置文件在 <code>/etc/bird.conf</code> 目录下。</p>\n<pre><code class=\"highlight puppet\">router id [实例的 IPv4 地址];\n\n<span class=\"keyword\">define</span> <span class=\"section\">OWNIP</span> = [实例的 IPv6 地址];\n<span class=\"keyword\">define</span> <span class=\"section\">OWNAS</span> = [ASN, 不含 AS 前缀];\n\nprotocol <span class=\"keyword\">device</span> &#123;\n    scan time <span class=\"number\">20</span>;\n&#125;\n\n<span class=\"keyword\">protocol</span> <span class=\"keyword\">static</span> &#123;\n    ipv6;\n    route [要广播的 IP 地址, CIDR 格式] via OWNIP;\n&#125;\n\n<span class=\"keyword\">protocol</span> <span class=\"keyword\">bgp</span> <span class=\"keyword\">lsy</span> &#123;\n    local as OWNAS;\n    <span class=\"literal\">source</span> address OWNIP;\n    <span class=\"keyword\">import</span> none;\n    export all;\n    graceful <span class=\"literal\">restart</span> on;\n    multihop <span class=\"number\">2</span>;\n    neighbor <span class=\"number\">2001</span>:<span class=\"number\">19</span>f<span class=\"number\">0</span>:ffff::<span class=\"number\">1</span> as <span class=\"number\">64515</span>;\n    <span class=\"literal\">password</span> <span class=\"string\">&quot;[你设置的 BGP 密码]&quot;</span>;\n&#125;\n\n<span class=\"keyword\">protocol</span> <span class=\"keyword\">direct</span> &#123;\n    interface <span class=\"string\">&quot;baoshuo*&quot;</span>;\n    ipv6 &#123;\n        <span class=\"keyword\">import</span> all;\n    &#125;;\n&#125;</code></pre>\n<p>由于我的需求比较简陋，所以配置文件并无较大改动。</p>\n<p><img src=\"https://vip2.loli.io/2021/03/26/Sdw9oWyuKiZNUpL.png\" alt=\"成果\" loading=\"lazy\" data-action=\"zoom\"><span class=\"image-description\">成果</span></p>\n<h2 id=\"拆分-ip-段\"><a class=\"anchor\" href=\"#拆分-ip-段\"></a>拆分 IP 段</h2>\n<p>由于我一下子用不了那么多 IP，所以我决定拆分一下。</p>\n<p>如果不涉及 whois 信息的修改操作，那么只需要修改一下 bird 的配置分开广播即可。</p>\n<p>APNIC 修改 whois 信息的流程可以参考 <a href=\"https://www.apnic.net/manage-ip/using-whois/updating-whois/objects/email-updates/\">https://www.apnic.net/manage-ip/using-whois/updating-whois/objects/email-updates/</a> 。</p>\n<h2 id=\"peer\"><a class=\"anchor\" href=\"#peer\"></a>Peer</h2>\n<p>首先编写一个模板，像下面这样：</p>\n<pre><code class=\"highlight pgsql\"># /etc/bird6.conf\n<span class=\"keyword\">template</span> bgp peers6 &#123;\n    <span class=\"keyword\">local</span> OWNIP <span class=\"keyword\">as</span> OWNAS;\n    <span class=\"type\">path</span> metric <span class=\"number\">1</span>;\n    <span class=\"keyword\">import</span> keep filtered;\n    <span class=\"keyword\">import</span> <span class=\"keyword\">filter</span> &#123;\n        print &quot;WARNING: no import filter set, all routes will be rejected.&quot;;\n        reject;\n    &#125;;\n    export <span class=\"keyword\">filter</span> &#123;\n        print &quot;WARNING: no export filter set, all routes will be rejected.&quot;;\n        reject;\n    &#125;;\n    <span class=\"keyword\">import</span> <span class=\"keyword\">limit</span> <span class=\"number\">1000</span> action block;\n    export <span class=\"keyword\">limit</span> <span class=\"number\">1000</span> action block;\n&#125;\n\n<span class=\"keyword\">include</span> &quot;/etc/bird/peers6/*&quot;;</code></pre>\n<p>如果需要 Peer ，就在 <code>/etc/bird/peers6/</code> 目录下新建一个任意名称配置文件，如下所示（需要自行替换尖角括号括住的内容）：</p>\n<pre><code class=\"highlight routeros\"><span class=\"comment\"># /etc/bird/peers6/&lt;PEER_NAME&gt;.conf</span>\nprotocol<span class=\"built_in\"> bgp </span>&lt;PEER_NAME&gt; <span class=\"keyword\">from</span> peers6 &#123;\n   <span class=\"built_in\"> neighbor </span>&lt;PEER_IP&gt; as &lt;PEER_ASN&gt;;\n    import all;\n    <span class=\"builtin-name\">export</span><span class=\"built_in\"> filter </span>myexport;\n&#125;</code></pre>\n<p><img src=\"https://vip2.loli.io/2021/03/27/IsGKxX9wRAUNBrH.png\" alt=\"和 LSC.MOE 的 Peer\" loading=\"lazy\" data-action=\"zoom\"><span class=\"image-description\">和 LSC.MOE 的 Peer</span></p>\n<h2 id=\"术语解释\"><a class=\"anchor\" href=\"#术语解释\"></a>术语解释</h2>\n<ul>\n<li>LIR: 本地互联网注册机构</li>\n<li>RIR: 区域互联网注册机构 （<a href=\"https://zh.wikipedia.org/zh-cn/%E5%8C%BA%E5%9F%9F%E4%BA%92%E8%81%94%E7%BD%91%E6%B3%A8%E5%86%8C%E7%AE%A1%E7%90%86%E6%9C%BA%E6%9E%84\">维基百科</a>）</li>\n<li>ASN: 自治系统编号（<a href=\"https://zh.wikipedia.org/zh-cn/%E8%87%AA%E6%B2%BB%E7%B3%BB%E7%BB%9F\">维基百科</a>）</li>\n<li>BGP: 边界网关协议（<a href=\"https://zh.wikipedia.org/zh-cn/%E8%BE%B9%E7%95%8C%E7%BD%91%E5%85%B3%E5%8D%8F%E8%AE%AE\">维基百科</a>）</li>\n<li>BIRD: 一个功能齐全的动态 IP 路由守护程序（<a href=\"https://bird.network.cz\">官方网站</a>）</li>\n</ul>\n<h2 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\"></a>参考资料</h2>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><a href=\"https://www.vultr.com/docs/example-letter-of-authorization-for-bgp-announcements\">Example Letter of Authorization for BGP Announcements - Vultr Docs</a> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p><a href=\"https://blog.lsc.moe/post/12/\">IP 广播 : CentOS 7 使用 bird6 广播 IPv6 - LiCEO</a> <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "BGP"
            ]
        }
    ]
}